function [fits] = consistboot(data,numits,plotfits)% function [fits] = consistboot(data,numits,plotfits)%% bootstrap to find confidence intervals for the parameter of a log-linear% fit to consistency data%% trials 	-- data matrix of the form [ level proportion_correct ntrials]% numits	-- number of simulated functions in bootstrap (default: 500)%% statistics are returned as a struct%% March 09 2000 JMG% defaultsdefarg('numits',1000);defarg('plotfits',1);if nargin,		% remove negative data	neglocs = find(data<0);	data(neglocs) = zeros(size(neglocs));	% initial minimum fit and plot	maxits = 1000;	[fits.slope,data] = fitconsistfun( data, maxits );	handle = figure;	mainaxis=axes('position',[0.1,0.1,0.8,0.8]);	handle = semilogx(data(:,1),data(:,2),'k*',data(:,1),linearconsistfun(data(:,1),fits.slope),'k-');	set(mainaxis,'XScale','log');	set(mainaxis,'YScale','linear');	xlabel('Percent Agreement');	ylabel('Percent Correct');	title('Consistency Data Plot');	drawnow;		% simulations	fprintf(1,'\n\n\n\n\n')	if plotfits,		handle = figure;		mainaxis=axes('position',[0.1,0.1,0.8,0.8]);		set(mainaxis,'XScale','log');		set(mainaxis,'YScale','linear');		xlabel('Percent Agreement');		ylabel('Percent Correct');		title('Bootstrap Data Plot');		drawnow;		hold on;	end			for i = 1:numits,		pasamples = binornd(data(:,3)./2,data(:,1)./100)./(data(:,3)./2).*100;		pcsamples = binornd(data(:,3)./2,data(:,2)./100)./(data(:,3)./2).*100;		simdata = [pasamples,pcsamples,data(:,3:4)];		simslope(i) = fitconsistfun( simdata, maxits );		if plotfits,			handle = semilogx(pasamples,pcsamples,'r*',pasamples,linearconsistfun(pasamples,simslope(i)),'b-');			if ~rem(i,100),				drawnow;			end		end		fprintf(1,'\b\b\b\b%4d',i);	end	fprintf(1,'\n');	% return statistics; remove outliers (+/- 2.5 percent)		% alpha	[glocs,blocs] = findoutliers(simslope,5,2);	fits.slopemean = mean(simslope(glocs));	fits.slopestd = std(simslope(glocs),0);	fits.data = data;	else	fits = nan;	endreturn