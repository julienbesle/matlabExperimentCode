function idealtemplate(noisesamples,noisevar,imagevar,stimfile,stimfolder)% function idealtemplate(noisesamples,noisevar,imagevar,stimfile,stimfolder)%% derives ideal template for 1-of-n identification task% for images in white noise.% stimuli are saved in a structure called 'images'% field names are names of stimuli (e.g., 'a', 'f', etc.)% allows user to choose the stimuli to include in the analysis%% October 1, 1998   JMG% defaultsdefarg('noisesamples',10000);defarg('noisevar',(.25)^2);defarg('imagevar',.1);defarg('idealfile',0);% look for file and folder namesif ~exist('stimfile','var');	[stimfile,stimfolder] = uigetfile('*.mat','Choose Stimulus File');endif ~exist('stimfolder','var')	stimfolder = pwd;end% get the new file nameif stimfile	period=findstr(stimfile,'.');	if isempty(period)==0,		idealfile=[stimfile(1:period-1),'ideal.mat'];	end	[idealfile,idealfolder] = uiputfile(idealfile,'Save File As');end% if the ideal file has been namedif idealfile		% load the file	load([stimfolder,stimfile]);	% get the names of the stimuli and let user choose which ones to include 	ok = 0;	while ok == 0;		namestruct = struct('names',fieldnames(images));		[names,ok] = dolistdlg(namestruct,'names','Select Images',[160 300],'multiple');	end	% the number of images chosen and size of images	numimages = length(names);	eval(['imagesz = size(images.',names{1},');']);	% make a 3d matrix 'stimuli' of the images set to the same contrast variance	for j = 1:numimages		eval(['stimuli(:,:,j) = images.',names{j},'*sqrt(imagevar/std(images.',names{j},'(:))^2);']);	end	% clear the image matrix	clear images;	% do the simulation	for row = 1:imagesz(1)		for col = 1:imagesz(2)				currpix = stimuli(row,col,:);			currpix = currpix(:)';			noise = randn(1,noisesamples);			noise = noise*sqrt(noisevar/std(noise(:))^2);			currtemplatelocs = rands([1:length(currpix)],[1,noisesamples]);			signalplusnoise = noise+currpix(currtemplatelocs);			corrmatrix = currpix'*signalplusnoise;			[maxcorr,maxcorrlocs] = max(corrmatrix);			template(row,col) = sum(maxcorrlocs==currtemplatelocs)/noisesamples;		end		printstr(['Row # ',num2str(row),'...']);	end	% save the ideal template and the original image names	save([idealfolder,idealfile],'template','names');endreturn