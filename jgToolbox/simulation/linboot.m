function [fits] = linboot(data,numits,plotfits)% function [fits] = linboot(data,numits,plotfits)%% bootstrap to find confidence intervals for the parameters and threshold% estimate from dat fit to a psychometric function.%% data 		-- data matrix of the form [ independantVar dependantVar std  ]% numits	-- number of simulated functions in bootstrap (default: 500)% plotfits	-- flag that allows user to see fits as they are simulated (default: 1)%% statistics are returned as a struct%% March 09 2000 JMG% defaultsdefarg('numits',500);defarg('plotfits',1);if nargin,			% initial minimum fit and plot	linfun = inline('p(1) + p(2).*x','p','x');	[fits.slopemin, fits.interceptmin] = linfitfn(data);	figure; mainaxis=axes('position',[0.1,0.1,0.8,0.8]);	handle = plot(data(:,1),data(:,2),'r*',data(:,1),linfun([fits.interceptmin,fits.slopemin],data(:,1)),'b-');	set(mainaxis,'XScale','linear');	set(mainaxis,'YScale','linear');	xlabel('Condition');	ylabel('Threshold');	title('Linear Fit');	drawnow;	hold on;			% simulations	fprintf(1,'\n\n\n\n\n')	fitcondition = linspace(data(1,1),data(end,1),1000);	for i = 1:numits,		samples = normrnd(data(:,2),data(:,3));		tempdata = [data(:,1),samples,data(:,3)];		[simslope(i), simintercept(i)] = linfitfn(tempdata);		if plotfits,			fitdata = linfun([simintercept(i) simslope(i)],fitcondition);				handle = plot(data(:,1),tempdata(:,2),'r*',fitcondition,fitdata,'b-');		end		if ~rem(i,numits/2+1)			drawnow;		end		fprintf(1,'\b\b\b\b%4d',i);	end	fprintf(1,'\n');	% return statistics; remove outliers (+/- 2.5 percent)		% slope	[glocs,blocs] = findoutliers(simslope,5,2);	fits.slopemean = mean(simslope(glocs));	fits.slopestd = std(simslope(glocs),0);	% intercept	[glocs,blocs] = findoutliers(simintercept,5,2);	fits.interceptmean = mean(simintercept(glocs));	fits.interceptstd = std(simintercept(glocs),0);	% final plot	figure;	mainaxis=axes('position',[0.1,0.1,0.8,0.8]);	fitdata = linfun([fits.interceptmean fits.slopemean],fitcondition);		handle = errorbar(data(:,1),data(:,2),data(:,3),'r*');	set(mainaxis,'XScale','log');	set(mainaxis,'YScale','log');	hold on;	handle = loglog(fitcondition,fitdata,'b-');	xlabel('Condition');	ylabel('Threshold');	title('Linear Fit with Error Bars (log axes)');	drawnow;			else	fits = nan;	endreturn%   old code for generating samples from a Gaussian distribution%   binomial distribution is used instead (above)%% 	% create random vectors based on error estimates for each stimulus level% 	samples = randn(size(empfn,1),numits);% 	for i = 1:size(empfn,1),% 		% 		% set variance to that of the standard error of the estimate% 		samples(i,:) = samples(i,:)*sqrt(empfn(i,4)^2/std(samples(i,:))^2);% % 		% set the mean to the emprical percent correct% 		samples(i,:) = samples(i,:)+(empfn(i,2)-mean(samples(i,:)));% % 	end