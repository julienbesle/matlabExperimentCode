function idealeqnoise(stimtype,numstim,maxtrials,noiselevels,approxthresh,numsessions,numstimlevels,noisetype,multnoiseratio,logrange,intnoiselevels,scalewithstim)% function idealeqnoise(stimtype,numstim,maxtrials,noiselevels,approxthresh,numsessions,numstimlevels,noisetype,multnoiseratio,logrange,intnoiselevels,scalewithstim)%% finds thresholds in the noise masking experiment% uses method of constant stimuli% 'name' is the name the subject, in intials% 'stimtype' is the type of stimulus to be shown% ('f'=faces; 'l'=letters; 'g' = gratings) % default screen is 1. default number of trials is 40.%% Sept 18 1998  JMG  U of Toronto Vision Lab% the name of the file containing the initial thresholdif nargin > 1	% change directories to the main folder	cf;	jg feature;			% defaults	defarg('maxtrials',35);	defarg('noiserange',[1e-4 .0625]);	defarg('numsessions',1);	defarg('numstimlevels',10);	defarg('noisetype','');	defarg('logrange',2);	defarg('scalewithstim',0);		% break if noise levels or threshold estimates are not provided	if ~exist('noiselevels','var') | ~exist('approxthresh','var')			printstr('Noise levels and threshold estimates must be provided.');		return;		end	% internal noise default is zero	numnoiselevels = length(noiselevels);	defarg('intnoiselevels',zeros(1,numnoiselevels));	defarg('multnoiseratio',0);		% string for data file name if internal noise is scaled with the stimulus	if scalewithstim		scaletag = 'sc';	else		scaletag = '';	end		% error checking	if length(approxthresh) ~= numnoiselevels		printstr('number of external, internal & threshold estimates do not match.');		return;	end	% constants	fileshareoff = 1;	% parameters for grating identification	vd = 100;	screensz = [23.5 17.5];	res = [640  480];	hdisdeg = 2.3;	vdisdeg = 1.54;	hdiscm = vd*tan(deg2rad(hdisdeg));	vdiscm = vd*tan(deg2rad(vdisdeg));	hdis = round(cm2pix(hdiscm,screensz,res));	vdis = round(cm2pix(vdiscm,screensz,res));	cpd = 2.3;	gaborszdeg = 1.54;	gaborszcm = vd*tan(deg2rad(gaborszdeg));		gaborsz = round(cm2pix(gaborszcm,screensz,res));	freq = cpd2cpi(cpd,gaborszcm,vd);	phz = 0;	deg1 = 12;	deg2 = -12;	cpw = 3;	% load the stimulus file. stimuli are stored in the structure 'images'.	if lower(stimtype) == 'l2'		load('LetterStruct2');	elseif lower(stimtype) == 'l'		load('LetterStruct');	elseif lower(stimtype) == 'p'		load('LetterStruct3');	elseif lower(stimtype) == 'f'		load('FaceStruct');	elseif lower(stimtype) == 'h'		load('HebrewStruct');	elseif lower(stimtype) == 't'		load('TPStruct');	elseif lower(stimtype) == 'n'		load('NoiseStruct');	else		images.g1 = dogabor(freq,cpw,gaborsz,deg1,phz);		images.g2 = dogabor(freq,cpw,gaborsz,deg2,phz);		names = {'g1','g2'};	end	names = fieldnames(images);	numstim = length(names);	eval(['imagesz = size(images.',names{1},');']);	nzsz = imagesz;	% low-pass condition	if lower(stimtype) == 'p'		filt = fftunshift(makeidealfilt(imagesz(1),0,2,0));		basevar = .1;		for i = 1:numstim			eval(['images.',names{i},' = real(ifft2(fft2(images.',names{i},').*filt));']);			eval(['images.',names{i},' = images.',names{i},'*sqrt(basevar/stdm(images.',names{i},')^2);']);					end	end		% the variance of all images is the same	eval(['basevar = std(images.',names{1},'(:))^2;']);		% make file names	found = 0;	loc = 1;	while ~found		if numsessions > 1			filename = ['ideal',num2str(loc),scaletag,'eqnoisecon',upper(stimtype),num2str(numstim),noisetype,'.dat'];		else			filename = ['ideal',num2str(loc),scaletag,'eqnoise',upper(stimtype),num2str(numstim),noisetype,'.dat'];		end		if ~(exist(filename)==2)			found = 1;		else			loc = loc+1;		end	end		% the stimulus levels to test	for i=1:numnoiselevels		stimlevels(:,i) = logspace(log10(approxthresh(i)./10^(logrange/2)),log10(approxthresh(i).*10^(logrange/2)),numstimlevels)';	end		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'eqnoise experiment');		savecomment(fwid,['image names: ',strcat(names{1:end})]);		if strcmp(lower(stimtype),'g')			savecommand(fwid,['orientations = [',num2str([deg1 deg2]),'];']);			savecommand(fwid,['cpi = ',num2str(freq),'; cpw = ',num2str(cpw),'; phase = ',num2str(phz),';']);		end		savecommand(fwid,['gam = ',num2str(1/numstim),'; multnoiseratio = ',num2str(multnoiseratio),'; extnoiselevels = [',num2str(noiselevels),']; intnoiselevels = [',num2str(intnoiselevels),'];']);		savecommand(fwid,['stimtype = 'quotestring(stimtype),';trials = ',num2str(maxtrials),';']);		if numsessions == 1			savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; condition = 6; intnoise = 7; randnstate1 = 8; randnstate2 = 9;');		else			savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; extnoise = 6; condition = 7; randnstate1 = 8; randnstate2 = 9;');		end		savedatetime(fwid);	else		fwid = fopen(filename,'a+');					savedatetime(fwid);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% initialize	sequence = rands([1:numstim],[1,maxtrials*numstimlevels*numnoiselevels]);	conlevel = zeros(size(sequence));	id = zeros(size(sequence));		% for the responses	responses = zeros([length(sequence),numsessions]);	correct = responses;	totaltrials = maxtrials*numstimlevels*numnoiselevels*numsessions;	for session = 1:numsessions				% to store the random number seeds and make the trial source		if session == 1			seeds = {};			trialstring = '';			for i = 1:numnoiselevels				eval(['trialsrc',num2str(i),' = mkconstim(stimlevels(:,',num2str(i),'),inf,',num2str(i),');']);				trialstring = [trialstring,'trialsrc',num2str(i),','];			end			eval(['trialsrc = mktslist(',trialstring(1:end-1),');']);		else			savecomment(fwid,['session #',num2str(session)]);			savedatetime(fwid);		end				% main loop		for trial = 1:totaltrials/numsessions  					if session == 1				% get the next stimulus level				[trialsrc,conlevel(trial),id(trial)] = gettrial(trialsrc);			end						% make the image			if session == 1				seeds{trial} = randn('state');			else				randn('state',seeds{trial});			end									% if the flag sacelwithstim is set (1), include the stimulus variance			% with the variance of the noise. otherwise, just set the noise variance			% alone.			nz=randn(nzsz);			nzvar = noiselevels(id(trial))+scalewithstim*conlevel(trial);					nz=nz*sqrt(nzvar/std(nz(:))^2);			if intnoiselevels(id(trial))				randn('state',sum(100*clock));				intnz = randn(nzsz);				intnz=intnz*sqrt(intnoiselevels(id(trial))/std(intnz(:))^2);			else				intnz = zeros(nzsz);			end						if multnoiseratio				randn('state',sum(100*clock));				multnz = randn(nzsz);				multnz=multnz*sqrt((noiselevels(id(trial))*multnoiseratio)/std(multnz(:))^2);			else				multnz = zeros(nzsz);			end			eval(['currimage = images.',names{sequence(trial)},'.*sqrt(conlevel(trial)/basevar)+nz+intnz+multnz;']);						% ideal rule is cross correlation			for i = 1:numstim				eval(['tempresp(i) = sum(sum(currimage.*images.',names{i},'));']);			end				% accuracy			[themax,responses(trial,session)] = max(tempresp);			correct(trial,session)=sequence(trial)==responses(trial,session);			printstr(['trial # ',num2str(trial),';  E Noise: ',num2str(noiselevels(id(trial))),'; I Noise: ',num2str(intnoiselevels(id(trial))),'; Variance: ',num2str(conlevel(trial)),'; Correct: ',num2str(correct(trial,session))]); 							% save the data			data=[trial,sequence(trial),responses(trial,session),correct(trial,session),conlevel(trial),noiselevels(id(trial)),intnoiselevels(id(trial)),(seeds{trial})'];			fprintf(fwid,'%g\t',data); 			fprintf(fwid,'\n');			if session == 1				% update trial source				trialsrc = telltrial(trialsrc,conlevel(trial),correct(trial,session));			end										end					end	% close the file	fclose(fwid);		else		printstr('Not enough input arguments.')endreturn