function idealsampNeff(name,stimtype,numstim,maxtrials,samplevels,approxthresh,uncertainty)% function idealsampNeff(name,stimtype,numstim,maxtrials,samplevels,approxthresh,uncertainty)%% finds thresholds in the sub-sample experiment% uses method of constant stimuli% 'name' is the name the subject, in intials% 'stimtype' is the type of stimulus to be shown% ('f'=faces; 'l'=letters; 'g' = gratings) % default screen is 1. default number of trials is 100.%% Sept 18 1998  JMG  U of Toronto Vision Lab% the name of the file containing the initial thresholdif nargin > 1	% change directories to the main folder	cf;	jg feature;			% defaults	defarg('mainscrs',1);	defarg('maxtrials',400);	defarg('samprange',[.001 1]);	defarg('name','ideal');	defarg('approxthresh',5e-6);	defarg('uncertainty',1);		% constants	fileshareoff = 1;	nzcn = .25;	nzvar = nzcn^2;	numstimlevels = 10;	logrange = 3;	if ~exist('samplevels','var')		numsamplevels = 7;	else		numsamplevels = length(samplevels);	end	% error checking	if length(approxthresh) < numsamplevels		printstr('number of sample levels and threshold estimates do not match.');		break;	end		% parameters for grating identification	gaborsz = 256;	iscompound = 0;	freq1 = 2;	freq2 = 3*freq1;	phz1 = 0;	phz2 = 0;	deg1 = 0;	deg2 = 0;			% load the stimulus file. stimuli are stored in the structure 'images'.	% the ideal template is stored as 'template' and the names are stored in	% the cell array 'names'	if lower(stimtype(1)) == 'l'		load('LetterStruct');		load(['Letterideal',num2str(numstim)]);	elseif lower(stimtype(1)) == 'f'		load('FaceStruct');		load(['Faceideal',num2str(numstim)]);	else		if iscompound			names = {'g1','g2'};			images.g1 = dosinimage(freq1,gaborsz)+dosinimage(freq2,gaborsz,deg1,phz1);			images.g2 = dosinimage(freq1,gaborsz)+dosinimage(freq2,gaborsz,deg2,phz2);		else			images.g1 = dosinimage(freq1,gaborsz,deg1,phz1);			images.g2 = dosinimage(freq2,gaborsz,deg2,phz2);			names = {'g1','g2'};		end		template = images.g1-images.g2;			end	numstim = length(names);	eval(['imagesz = size(images.',names{1},');']);	nzsz = imagesz;	% the variance of all images is the same	eval(['basevar = std(images.',names{1},'(:))^2;']);	% make file names	filename = [name,'sampNeff',upper(stimtype(1)),num2str(numstim),'.dat'];				% the conditions to test (% of informative pixels)	if ~exist('samplevels','var')		samplevels = logspace(log10(samprange(1)),log10(samprange(2)),numsamplevels);	end	% the stimulus levels to test	for i=1:numsamplevels		stimlevels(:,i) = logspace(log10(approxthresh(i)./10^(logrange/2)),log10(approxthresh(i).*10^(logrange/2)),numstimlevels)';	end		% the ideal image templates	samplestruct = struct('template1',1);	for i =1:length(samplevels)		eval(['samplestruct.template',num2str(i),' = threshimage(template,',num2str(samplevels(i)),');']);	end		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'idealsampleNeff experiment');		savecomment(fwid,['image names: ',strcat(names{1:end})]);		savecommand(fwid,['stimtype = 'quotestring(stimtype),'; noisevar = ',num2str(nzvar),';trials = ',num2str(maxtrials),';gam = ',num2str(1/numstim),';']);		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; condition = 6; randnstate1 = 6; randnstate2 = 7;');		savedatetime(fwid);			else		fwid = fopen(filename,'a+');					savedatetime(fwid);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% initialize	sequence = rands([1:numstim],[1,maxtrials*numstimlevels*numsamplevels]);	responses = zeros(size(sequence));	trialstring = '';	for i = 1:numsamplevels		eval(['trialsrc',num2str(i),' = mkconstim(stimlevels(:,',num2str(i),'),inf,',num2str(i),');']);		trialstring = [trialstring,'trialsrc',num2str(i),','];	end	eval(['trialsrc = mktslist(',trialstring(1:end-1),');']);		% main loop	totaltrials = maxtrials*numstimlevels*numsamplevels;	for trial = 1:totaltrials  				% get the next stimulus level		[trialsrc,conlevel,id] = gettrial(trialsrc);		% make the image		% the contrast variance of the unsampled image is set, then		% the image is sampled.		randnstate = randn('state');		nz=randn(nzsz);		nz=nz*sqrt(nzvar/std(nz(:))^2);		eval(['currimage = images.',names{sequence(trial)},'.*sqrt(conlevel/basevar);']);		eval(['currimage = currimage.*samplestruct.template',num2str(id),';']);				% add noise and make the final image		currimage = currimage+nz;		% ideal decision rule:		% when the images are sampled, their contrast variances are different		% because of this, cross-correlation is not the ideal rule; instead,		% the ideal rule is to maximize the squared distance between the templates		% and the data. if there is uncertainty, the ideal observer must look across		% all sampling conditions (see TR04).				% if there is uncertainty		if uncertainty						for i = 1:numstim									for j = 1:numsamplevels					eval(['tempresp(j,i) = sum(sum( (currimage - (images.',names{i},'.*samplestruct.template',num2str(j),')).^2));']);					end			end			tempresp = min(tempresp);						% no uncertainty		else			for i = 1:numstim				eval(['tempresp(i) = sum(sum( (currimage - (images.',names{i},'.*samplestruct.template',num2str(id),')).^2));']);			end		end				[themax,responses(trial)] = min(tempresp);		% accuracy		correct=sequence(trial)==responses(trial);		printstr(['trial # ',num2str(trial),';  Condition = ',num2str(samplevels(id)),'; Variance = ',num2str(conlevel),'; Correct = ',num2str(correct),'.']); 				% save the data		data=[trialsrc.trial,sequence(trial),responses(trial),correct,conlevel,samplevels(id),randnstate(1),randnstate(2)];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,conlevel,correct);				end		% close the file	fclose(fwid);		% turn on filesharing	if fileshareoff		status=fs('On');	end	else		printstr('Not enough input arguments.')endreturn