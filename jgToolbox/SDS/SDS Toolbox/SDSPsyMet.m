function [ Trials, Theta1, Theta2 ] = SDSPsyMet( StimA, StimB, ...	StimLevels, NTrials, Dist )% SDSPsyMet - find SDS ideal observer's psychometric function%%      [ Trials, Theta1, Theta2 ] = SDSPsyMet( StimA, StimB, StimLevels,%                                           NTrials, Dist )%%     StimA, StimB - names of stimuli%     StimLev      - row matrix containing stimulus levels to be tested%     NTrials      - number of trials per stimulus level%     Dist         - name of CDF to use in fitting psychometric function%     Trials       - trials obtained from ideal observer%     Theta1, Theta2 - parameters of psychometric function obtained%% simulate ideal observer at each stimulus levelclear Trials;Trial=0;for i=1:size(StimLevels,2),	StimLevel=StimLevels(i);	% run several trials	for j=1:NTrials,		Trial=Trial+1;		% choose stimulus		Stim=(rand<0.5);		StimName=eval(['Stim' 'A'+Stim ]);		% choose uncertainty vector and load stimulus		Unc=GetUnc(StimName);		eval([ 'load ' StimFName(StimName,StimLevel,Unc) ]);		% add Poisson noise to photoreceptor image		Image=poissrnd(Photo);		% make ideal-observer discrimination		LogLikeA = SDSLogLike(Image,StimA,StimLevel);		LogLikeB = SDSLogLike(Image,StimB,StimLevel);		Judge=(LogLikeA<LogLikeB);		Correct = (Judge==Stim);		% record trial		Trials(Trial,:)=[ StimLevel, Stim, LogLikeA/LogLikeB, Judge, Correct ];		fprintf(1,[ 'Trial %3d   StimLev %d   Image %d   Signal %5.3f   ' ...			'Judge %d   Correct %d\n' ], ...			Trial,StimLevel,Stim,LogLikeA-LogLikeB,Judge,Correct);	endend% find maximum-likelihood fit of Weibull or Gaussian to trialsif exist('Dist')~=1,	Dist='weib';end[ Theta1, Theta2 ] = FitPsyMt( [ Trials(:,1), Trials(:,5) ], Dist );return