Richard Murray              SDA Term Project:  An Ideal Observer LibraryThe attached graphs and listings document a library of Matlabfunctions that together simulate an ideal observer placed at the levelof the retina.  Geisler (1989) describes a type of ideal observer thathe calls the stimuli-defined-exactly (SDE) model, that yields aclosed-form solution for the sensitivity of the ideal observer on alarge class of discrimination tasks.  The SDE model cannot be used,however, when there is trial-to-trial uncertainty in the form orposition of the stimuli; in these cases a stimuli-defined-statistically (SDS) model is required, and simulating this type ofideal observer appears to require the use of Monte Carlo methods.This library implements an SDS ideal observer.USING THE LIBRARYIn order to carry out an ideal observer simulation with the library,the user must write Matlab scripts for an "image function" and a"probability function" for each of the two stimuli to bediscriminated, or four files in total.Trial-to-trial variability in stimuli is modelled with "uncertaintyvectors", which are ordered n-tuples of positive integers encodingvariations in the stimuli.  For instance, a stimulus with spatialjitter along the x- and y-axes might be described with the help of anuncertainty vector [ m, n ], with m and n ranging over { 1, ..., 5 };[ 3, 3 ] would then correspond to the stimulus' most central position,and other vectors to jittered positions.  Each component of anuncertainty vector is allowed to range over { 1, ..., N }, where N maybe different for each component, and the vectors many have any numberof components.The Matlab image function that the user is expected to provide takesas arguments a stimulus level and an uncertainty vector.  The functionreturns in matrix form the stimulus corresponding to that stimuluslevel and uncertainty vector.  Pixel-to-pixel distance represents 15"of arc, and the unit of stimulus intensity is photons/sec*mm^2 (wherethe mm^2 term corresponds to pupil area).The Matlab probabilty function supplied by the user takes oneargument.  If the argument is the scalar value -1, the functionreturns a vector indicating the range of the stimulus' uncertaintyvector, i.e. if in uncertainty vector [ C1, C2, C3 ] each component Cimay range over { 1, ..., Mi }, then the probability function wouldreturn [ M1, M2, M3 ].  If the argument to the probability function isinstead an uncertainty vector, then the function returns the priorprobability of the version of the stimlus corresponding to thatuncertainty vector, e.g. the spatial-jitter example might assignhighest prior probability to the central position [ 3, 3 ], and lowervalues to more eccentric stimuli.Each of the two stimlui to be discriminated is assigned a string nameby the user, e.g. "StimA" and "StimB", which are passed to the librarythrough interface functions.  These names are used by the library toconstruct the names of the Matlab .m files containing the image andprobability functions; the image function is expected to have the nameobtained by appending "Img" to the stimulus name, and the probabilityfunction has the name obtained by appending "Prob", e.g. "StimAImg","StimAProb", "StimBImg", "StimBProb".EXAMPLESTwo ideal observer simulations were carried out, for which listingsare attached, in order to demonstrate the mechanics of using thelibrary.  Graphs showing the results of the simulations are alsoattached.In the first demonstration, the ideal observer's CSF was determined byfinding the 75% threshold for discrimination between a sine-phaseGabor and a uniform field, at a number of different spatialfrequencies.In the second demonstration, the psychometric function for detectionof a filled-in circle against a uniform background was determined, asa function of the intensity of the circle.Neither of the demonstrations made use of the library's ability tomodel ideal observer performance on uncertain stimuli.  The intent wasto reproduce the results of Geisler's closed-form SDE model using theSDS ideal observer implemented with Monte Carlo methods.PROPOSED EXTENSIONSThe SDS library requires stimuli to be represented in matrix form,with the pixel-to-pixel distance representing 15" of arc.  Since someof the most interesting properties of Geisler's model (e.g. itsperformance on hyperacuity tasks) appear when stimulus variations areon the order of 1", it would be useful to be able to vary the angulardistance represented by a pixel.The SDS library now deals only with monochrome stimuli.  Geislerdiscusses in detail the modifications that are necessary to modelperformance with colour stimuli.  The colour version of the SDSlibrary would use three input images to describe each stimulus,corresponding to the RGB phosphor intensities of the monitor; it wouldexpand the colour images according to the spectral distribution ofeach phosphor; it would incorporate the variation of the opticaltransmittance function with wavelength; it would incorporate chromaticaberrations into point-spread functions; and it would model absorptionby three types of photoreceptors occurring with different densities inthe photoreceptor mosaic.Finally, it should be noted that the decision rule used in the libraryis only approximately ideal.  The ideal decision rule integrateslikelihoods over variations in the stimuli, but this method producedunderflow errors when implemented in Matlab.  The decision ruleactually used determines the likelihood of each possible stimulus(ranging over all possible uncertainty vectors, and taking account oftheir prior probabilities), and gives as its response the stimuluscategory containing the the individual stimulus with the greatestlikelihood.  This decision rule is near-ideal in many situations(D. Pelli, personal communication).  It would be preferable toovercome the problems of finite-precision arithmetic, and use themathematically ideal decision rule.REFERENCES     Geisler, Wilson (1989).  Sequential ideal observer analysis ofvisual discriminations.  Vision Research, 96(2), 267-314.