function [fun] = inline2d(fun)% function [fun] = inline2d(fun)%% generalizes any 1-d inline function into a% radially symmetric 2-d function. it assumes% the main parameter is named 'x'. 'x' is simply% replaced with sqrt(x.^2 + y.^2) and y is placed % after x in the parameter list.%% example:%% define an inline function 'square':%%	square = inline('x^2','x');%% this creates the function %%   square(x) = x^2.%% make it 2D by sending it to inline2d:%%   sqare2d = inline2d(square);%% this creates the 2d function%%   square2d(x,y) = (sqrt(x.^2 + y.^2))^2.%% error checking:%% checks for the existence of the EXP function, does% not replace any x's appearing in this string.%% checks for argument validity.%% march 27 199 JMGif nargin		if isobject(fun)				funstring = formula(fun);		args = argnames(fun);		strargs = strcat(args{:});		xloc = findstr(strargs,'x');		yloc = findstr(strargs,'y');		if xloc & isempty(yloc)						% common math functions that contain 'x'			sqstr = '(sqrt(x.^2 + y.^2))';			tempfunstring = ['o',funstring,'o'];			exploc = findstr('exp',lower(tempfunstring));					if isempty(exploc)				funstring = strrep(funstring,'x',sqstr);			else				xlocfunstring = findstr(lower(tempfunstring),'x');				for i = 1:length(xlocfunstring)					if ~strcmp(lower(tempfunstring(xlocfunstring(i)-1:xlocfunstring(i)+1)),'exp')						tempfunstring = [tempfunstring(1:xlocfunstring(i)-1),sqstr,tempfunstring(xlocfunstring(i)+1:end)];						xlocfunstring = xlocfunstring+length(sqstr)-1;					end				end								end			funstring = tempfunstring(2:end-1);			newargs = {args{1:xloc},'y',args{xloc+1:end}};			fun = inline(funstring,newargs{:});		else			if ~xloc				error('x must be inluded in inline function.');			elseif ~isempty(yloc)				error('y must not be included in 1D inline function.');			end		end	else		error('first argument must be an inline function.');	endelse	error('no arguments passed.');endreturn;