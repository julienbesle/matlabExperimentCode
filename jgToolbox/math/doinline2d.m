function [dist,newfun] = doinline2d(fun,sz,params)% function [dist,newfun] = doinline2d(fun,sz,params)%% creates a 2d square distribution matrix% according to an arbitrary inline function% and corresponding parameters% % the first parameter is a 1-D inline function object.% the variable 'x' is the dimension over which the% function is varied. the function is generalized% to 2 dimensions (radially symmetric) using INLINE2D.% see INLINE2D for examples.%% SZ is a 2 element vector containing the dimensions% of the final matrix in [rows, cols]. can be square% or rectangular. default is [256,256].%% PARAMS is a N-element vector containg the values to% be sent to the additional N parameters of FUN, in% the order they are to be sent to the inline function.%% x should always be the first parameter of the function.%% there are several resereved functions that accept a% string for FUN instead of an inline function:%% 'gauss'		-	2D gaussian function%					parameters: %                       sigma (standard deviation; default = max(sz)/4)%                       mu (mean; default = 0)%% '1overf'		-	1/x function (or reciprocal of frequency)%                   infinite value at peak set to 0.%					parameters: %                       sigma (stretch factor; default = 1)%                       mu (shift factor; default = 0)%% '1overfsq'	-	1/(x^2) function (or reciprocal of squared freq)%                   infinite value at peak set to 0.%					parameters: %                       sigma (stretch factor; default = 1)%                       mu (shift factor; default = 0)%% 'infantcsf'	-	the newborn human CSF (polynomial fit)%					parameters are set for viewing distance = 30cm,%                   image size = 16cm.%% 'mtf'			 - 	human adult optical modulation transfer function%					from Campell and Gubisch (1968), via Geisler (WAVSDE)%					returns modulation as a function spatial frequency,%					in c/deg.%% dist = -1 if not enough arguments are passed%% dependencies: defarg.m, inline2d.m, getcenter.m%               makeidealfilt.m (for infant CSF only)%% march 27 1999 jmg uf of t vision labif nargin		% defaults for size	defarg('sz',[256 256]);	if length(sz) == 1		sz = [sz,sz];	end	maxsz = max(sz);		% reserved functions	if isstr(fun)		% gaussian				if strcmp(fun,'gauss')			newfun = inline('(1/(sqrt(2*pi*sigma^2)))*(exp(-(((x-mu)/sigma).^2/2)))','x','sigma','mu');			newfun = inline2d(newfun);			defarg('params',[maxsz/4 0]);		% 1 over f				elseif strcmp(fun,'1overf')			newfun = inline('((x-mu)/sigma).^(-1)','x','sigma','mu');			newfun = inline2d(newfun);			defarg('params',[1 0]);		% 1 over f squared			elseif strcmp(fun,'1overfsq')			newfun = inline('(((x-mu)/sigma).^2).^(-1)','x','sigma','mu');			newfun = inline2d(newfun);			defarg('params',[1 0]);		% infant csf (3rd degree polynomial)		elseif strcmp(lower(fun),'infantcsf')			newfun = inline('a + b*x + c*x.^2','x','a','b','c');			newfun = inline2d(newfun);						% params for: viewing distance = 30cm, image size = 16cm.			defarg('params',[9.0653,-.19501,.0010493]);		% optical mtf		elseif strcmp(lower(fun),'mtf')					% constants from Campell and Gubisch (1968), via Geisler (WAVSDE)			% see optmtf.m and makeoptmtf.m for more details			w=0.538;			a=5.45e-5;			b=1.16e-3;			newfun = inline('w*exp(-2*(pi^2)*a*(x.^2)) + (1-w)*exp(-2*(pi^2)*b*(x.^2))','x','w','a','b');			newfun = inline2d(newfun);				defarg('params',[w a b]);		else			fprintf(1,'First argument is not reserved function.\n');			return;		end				% passed function	elseif isobject(fun)		newfun = inline2d(fun);	else		fprintf(1,'First argument is not an inline or reserved function.\n');		dist=-1;		return;	end	% set the arguments	argstring = '';	if exist('params','var') & ~isempty(params)		argstring = ',';		for i = 1:length(params)			argstring = [argstring,num2str(params(i)),','];		end		argstring = argstring(1:end-1);	end	% make the distribution [(x,y) coordinates]	x = ones(1,maxsz)'*(-maxsz/2:maxsz/2-1);	y = -x';	eval(['dist = newfun(x,y',argstring,');']);		% special cases for reserved functions.	if isstr(fun)		if strcmp(lower(fun),'infantcsf')			[val,loc] = min(dist(maxsz/2+1,maxsz/2+1:end));			filt = makeidealfilt(maxsz,0,loc,0);			dist = filt.*dist;		elseif strcmp(lower(fun),'1overf') | strcmp(lower(fun),'1overfsq')			dist(maxsz/2+1,maxsz/2+1) = 0;		end	end				% adjust to fit the desired matrix size	if sz(1) ~= sz(2)		dist = getcenter(dist,sz(1),sz(2));	end	else	fprintf(1,'No inline object sent.\n');	dist=-1;end	return;