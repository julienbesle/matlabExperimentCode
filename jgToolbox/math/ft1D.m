function [outvector] = ft1D(invector)% function [outvector] = ft1D(invector)%% Computes the discrete Fourier transform of the 1D vector [invector].% [invector] can be odd or even. The transform is returned in a row% vector [outvector], in complex form. The organization of the frequencies% is as follows:%%				    - neg...........DC............pos +%% If the image size is odd, the DC component will be centered in the % transform. If the image size is even, the DC component appears at the% center+1 location.%% April 14, 1997   J Gold J Hillis  U of Toronto Vision Lab.  % July 13, 1998:  JMG Fixed rounding function to single statement.n = length(invector);			% The number of points in the vector.LowerLimit = 1e-15;				% This is the cutoff for the amplitude								% of the components. If it is below								% this value, it is assumed to be zero.if rem(n,2) == 1				% Make the indeces of the coefficients.	k = [(-(n-1)/2):(n-1)/2]';	% If n is odd, this is k.	else		k = [(-n/2):(n/2-1)]';		% If n is even, this is k.endnumfreq = length(k);			% The number of pos+neg freq's combined.outvector = zeros(1,numfreq);	% Initialize the coefficient vector.			temp = ones(1,n);k =  k * temp;					% Create a matrix with columns of coefficient indeces.index = 0:n-1;					% Indeces, for fast matrix multiplication.index = temp' * index;			% Create a matrix with rows of partition indeces.exponent = [k .* index]';		% Columns of this matrix are the product of a								% coefficient index (k) and the partition index which 								% is used in the sum (integral for the non-discrete 								% transform) of the product of the function and the 								% complex sinusoid.								% Compute the coefficients.outvector = 1/n*(invector*(exp((-j*2*pi*exponent)/n)));% Remove roundoff error.outvector(find(outvector<LowerLimit)) = 0;return	 % Iterative method. Commented out because matrix method above is better.% Compute the coefficients.% for i = 1:numfreq			%	outvector(i) = 1/n*(sum(invector.*(exp((-j*2*pi*k(i).*index)/n))));%	if outvector(i) < LowerLimit%		outvector(i) = 0;%	end% end% END.	 