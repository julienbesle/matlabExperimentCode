function do(varargin)% function do(varargin)%% function to run experiment scripts with% pre-defined parameters.% % varargin is cell array with a variable number% of parameters. the first argument is always the% name of the experiment (see below). the second% is the initials of the subject. additional arguments% vary according to the experiment. the following% experiements are included so far:%% 	experiment										arguments%   ----------              ---------------------------------------------------------% 	equivalent noise		'eqnoise' 			initials	 stimtype % 	equ. noise consistency  'eqnoisecon' 		initials	 stimtype	  noisetype% 	equ. noise w/ rotation	'eqnoiserot' 		initials	 stimtype %	ideal equiv. noise		'idealeqnoise'	 	stimtype %	ideal equiv. noise con.	'idealeqnoisecon' 	stimtype %	sub-sampling			'subsamp', 			initials	 stimtype %	features (N-AFC)		'feat'				initials	 stimtype%	features (2-AFC)		'feat2' 			initials	 stimtype%	color and space 		'color'			 	initials 	 exptype %	stochastic resonance	'sr' 				initials% 	filtered noise			'filtnoise' 		initials	 stimtype % 	phase noise				'phznoise' 			initials	 stimtype %%	*stimtypes: 		'l' = English letters,%						'f' = Faces%						'h' = Hebrew Letters%						't' = Tarr & Pinker Figures%						'g'	= gratings%%	*exptypes:		  	'c' = color%						'n'	= neutral%%   *noisetypes:  		'l' = low%						'm' = medium%						'h' = high%% an example of the command to run a script from the prompt is:%%	do eqnoise jmg f%% the above runs the equivalent noise program for observer jmg with faces.%% 	October 26, 1998	JMG		created it% 	January 16, 1999 	JMG		added filtered and phase noise experiments	 if length(varargin) >= 2		% clear functions and variables	cf;	ce experiment;		% dual task (dosher/lu) experiment	if strcmp(varargin{1},'dual')				% notes:		%		% from dosher and lu: approximate thresholds before and after learning		% before = [0.0006    0.0006    0.0006    0.0025    0.0081    0.0100    0.0256];		% after = 		% levels used by dosher and lu (1999)		% defarg('noiselevels',[0	0.0004	0.0016	0.0064	0.0144	0.0256	0.0625	0.1089]);		% shorter list		% defarg('noiselevels',[0	.0001 0.0004 0.0064 0.0256 0.1089]);						% a larger range		% defarg('noiselevels',[0,logspace(log10(1e-5),log10(.1),numnoise-1)]);		jg feat;		numnoise = 5;		defarg('noiselevels',[0,logspace(log10(5e-4),log10(.1),numnoise-1)]);				if lower(varargin{2}) == 'jmg'			% for replicating Dosher and Lu (1999)							defarg('mainscrs',1);			defarg('maxtrials',32);			defarg('approxthresh',logspace(log10(1e-4),log10(.0075),length(noiselevels)));						defarg('numstimlevels',5);			defarg('responseorder','cgt');			defarg('responsesuppress','t');			defarg('displaysuppress','t');			defarg('noisepixelsize',2);			defarg('stimnoise',0);					defarg('constfixation',1);			defarg('snd1freq',1950);			defarg('snd2freq',2000);			defarg('blocknz',1);						defarg('logrange',3);			defarg('numsessions',1);			% modified with learning         session			defarg('numshift',1);			 % 1 1		elseif lower(varargin{2}) == 'ajr'			% for replicating Dosher and Lu (1999)							defarg('mainscrs',1);			defarg('maxtrials',32);			defarg('approxthresh',logspace(log10(1e-4),log10(.0075),length(noiselevels)));						defarg('numstimlevels',5);			defarg('responseorder','cgt');			defarg('responsesuppress','t');			defarg('displaysuppress','t');			defarg('noisepixelsize',2);			defarg('stimnoise',0);					defarg('constfixation',1);			defarg('snd1freq',1950);			defarg('snd2freq',2000);			defarg('blocknz',1);						defarg('logrange',3);			defarg('numsessions',1);			% modified with learning         session			defarg('numshift',0);			 % 1 0		elseif lower(varargin{2}) == 'tjb'			% for replicating Dosher and Lu (1999)							defarg('mainscrs',1);			defarg('maxtrials',32);			defarg('approxthresh',logspace(log10(1e-4),log10(.0075),length(noiselevels)));						defarg('numstimlevels',5);			defarg('responseorder','gct');			defarg('responsesuppress','ct');			defarg('displaysuppress','t');			defarg('noisepixelsize',2);			defarg('stimnoise',0);					defarg('constfixation',1);			defarg('snd1freq',1950);			defarg('snd2freq',2000);			defarg('blocknz',1);						defarg('logrange',3);			defarg('numsessions',1);			% modified with learning         session			defarg('numshift',0);			 % -1					% for replicating Dosher and Lu (1999)			% with no central task					elseif lower(varargin{2}) == 'pjb'				defarg('mainscrs',1);			defarg('maxtrials',32);			defarg('approxthresh',logspace(log10(1e-4),log10(.005),length(noiselevels)));						defarg('numstimlevels',5);			defarg('responseorder','gct');			defarg('responsesuppress','t');			defarg('displaysuppress','t');			defarg('noisepixelsize',2);			defarg('stimnoise',0);					defarg('constfixation',1);			defarg('snd1freq',1950);			defarg('snd2freq',2000);			defarg('blocknz',1);						defarg('logrange',3);			defarg('numsessions',1);			% modified with learning         session			defarg('numshift',0);			 % 0 0 1 1 2 -2 0 0			% modified with learning         session			%approxthresh = approxthresh*.6; % 1 .85 .6					else					% testing			maxtrials = 1;						defarg('mainscrs',1);			defarg('maxtrials',32);			defarg('approxthresh',logspace(log10(1e-4),log10(.02),length(noiselevels)));						defarg('numstimlevels',5);			defarg('responseorder','gct');			defarg('responsesuppress','');			defarg('displaysuppress','');			defarg('noisepixelsize',1);			defarg('stimnoise',0);					defarg('constfixation',0);			defarg('snd1freq',1950);			defarg('snd2freq',2000);			defarg('blocknz',1);						defarg('numshift',0);			defarg('logrange',2.5);			defarg('numsessions',1);				end		% EXPERIMENT		dualtask(varargin{2},mainscrs,maxtrials,noiselevels,approxthresh,...				numstimlevels,responseorder,responsesuppress,displaysuppress,...				noisepixelsize,stimnoise,constfixation,snd1freq,snd2freq,...				blocknz,numshift,logrange,numsessions)	elseif length(varargin) >= 3				% equivalent noise experiment		if strcmp(varargin{1},'eqnoise')			jg features;			stimtype = lower(varargin{3});			noiselevels = [logspace(log10(1e-4),log10(.0625),5)];			basethresh = [7.5e-6 7.5e-6 2.5e-5 5e-5 1e-4];			if strcmp(stimtype,'g') 				numstim = 2;			end						if strcmp(stimtype,'p') | strcmp(stimtype,'n')				noiselevels = [noiselevels(2:end),noiselevels(end)*2];				basethresh = [basethresh(2:end),basethresh(end)*2];			end			% me			if lower(varargin{2}) == 'jmg'				if strcmp(stimtype,'f')					approxthresh = basethresh*3.5;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*4.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*.8;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*10;				elseif strcmp(stimtype,'n')					approxthresh = basethresh*4.5;					logrange = 2.75;					maxtrials = 15;				else					approxthresh = basethresh*.5;				end			% michael			elseif lower(varargin{2}) == 'mwf'							if strcmp(stimtype,'f')									approxthresh = basethresh*4.5;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*15;				elseif strcmp(stimtype,'n')					approxthresh = basethresh*10;									else					approxthresh = basethresh/3;				end				% helen			elseif lower(varargin{2}) == 'hpr'				if strcmp(stimtype,'f') 					approxthresh = basethresh*4;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*12;				elseif strcmp(stimtype,'n')					approxthresh = basethresh*10;					logrange = 3;				else					approxthresh = basethresh/3;				end									% patricia			elseif lower(varargin{2}) == 'peb'				if strcmp(stimtype,'f') 					approxthresh = basethresh*4.35;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5.75;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*2;				else					approxthresh = basethresh/3;				end					% aaron				elseif lower(varargin{2}) == 'amc'				if strcmp(stimtype,'f') 					approxthresh = basethresh*4;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*4;				elseif strcmp(stimtype,'l')					approxthresh = basethresh*.85;				elseif strcmp(stimtype,'l2')					approxthresh = basethresh*1;				elseif strcmp(stimtype,'h')					approxthresh = basethresh;					logrange = 2.5;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*25;				elseif strcmp(stimtype,'n')					approxthresh = basethresh*4.75;					logrange = 2.75;				else					approxthresh = basethresh/3;				end					% chris						elseif lower(varargin{2}) == 'cpt'				if strcmp(stimtype,'f') 					approxthresh = basethresh*4.35;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*4.25;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*100;				else					approxthresh = basethresh/3;				end					% general observers						else				if strcmp(stimtype,'f') 					approxthresh = basethresh*15;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'l2')					approxthresh = basethresh*13;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*3;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*20;				elseif strcmp(stimtype,'n')					approxthresh = basethresh*13;				else					approxthresh = basethresh/3;				end					end						% defaults			defarg('mainscrs',1);			defarg('maxtrials',31);						% testing			%defarg('mainscrs',0);			%defarg('maxtrials',1);						defarg('noisetype','');			defarg('numsessions',1);			defarg('numstimlevels',5);			defarg('numshift',0);			defarg('rotation','');				defarg('logrange',2);			eqnoise(varargin{2},stimtype,mainscrs,maxtrials,noiselevels,approxthresh,numsessions,numstimlevels,noisetype,rotation,numshift,logrange);		% equivalent noise with rotated patterns experiment		elseif strcmp(varargin{1},'eqnoiserot')			jg features;			stimtype = lower(varargin{3});			noiselevels = [logspace(log10(1e-4),log10(.0625),5)];			basethresh = [7.5e-6 7.5e-6 2.5e-5 5e-5 1e-4];			% me			if lower(varargin{2}) == 'jmg'				if strcmp(stimtype,'f') | strcmp(stimtype,'t')					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				else					approxthresh = basethresh/5;				end			% general observers			elseif lower(varargin{2}) == 'amc'				if strcmp(stimtype,'f') | strcmp(stimtype,'t')					approxthresh = basethresh*5.25;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh;				else					approxthresh = basethresh/5;				end			elseif lower(varargin{2}) == 'peb'				if strcmp(stimtype,'f') | strcmp(stimtype,'t')					approxthresh = basethresh*7;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*2;				else					approxthresh = basethresh/3;				end								elseif lower(varargin{2}) == 'ajb'				if strcmp(stimtype,'f') | strcmp(stimtype,'t')					approxthresh = basethresh*7;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*2;				else					approxthresh = basethresh/3;				end								elseif lower(varargin{2}) == 'cpt'				if strcmp(stimtype,'f') | strcmp(stimtype,'t')					approxthresh = basethresh*7;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*2;				else					approxthresh = basethresh/3;				end								else				if strcmp(stimtype,'f') | strcmp(stimtype,'t')					approxthresh = basethresh*7;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*2;				else					approxthresh = basethresh/3;				end								end					% defaults				defarg('mainscrs',1);			defarg('maxtrials',31);			defarg('numsessions',1);			defarg('numstimlevels',5);			defarg('numshift',0);			defarg('noisetype','');			defarg('rotation','rot');				eqnoise(varargin{2},stimtype,mainscrs,maxtrials,noiselevels,approxthresh,numsessions,numstimlevels,noisetype,rotation,numshift);		% equivalent noise experiment with consistency measure		elseif strcmp(varargin{1},'eqnoisecon')				% basic parameters			jg features;			stimtype = lower(varargin{3});			if size(varargin,2) > 3				noisetype = upper(varargin{4});			end						% the noise levels and threshold estimates			numnoise = 5;						noiselevels = [logspace(log10(1e-4),log10(.0625),numnoise)];			basethresh = [7.5e-6 7.5e-6 2.5e-5 5e-5 1e-4];						% stimulus type			if strcmp(stimtype,'g') 				numstim = 2;			end					% assign the noise types			defarg('noisetype','')					if strcmp(noisetype,'H')					noiselevels = noiselevels(end);				basethresh = basethresh(end);							elseif strcmp(noisetype,'L')				noiselevels = noiselevels(1);				basethresh = basethresh(1);			elseif strcmp(noisetype,'M')				noiselevels = noiselevels(3);				basethresh = basethresh(3);			elseif strcmp(noisetype,'LM')				noiselevels = noiselevels(2);				basethresh = basethresh(2);			elseif strcmp(noisetype,'MH')				noiselevels = noiselevels(4);				basethresh = basethresh(4);			end												% me			if lower(varargin{2}) == 'jmg'				if strcmp(stimtype,'f')					% for the 2-point consistency experiment					% divide by 3 for long viewing distance					disfactor = 7;					% for close viewing distance					%disfactor = 1.25;					approxthresh = [1.9693e-05 1e-4]*disfactor;					noiselevels = [noiselevels(1),noiselevels(end)];					%approxthresh = [1.9693e-05]*disfactor;					%noiselevels = [0];					logrange = 2;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh/2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*100;				elseif strcmp(stimtype,'g')					% for the 2-point consistency experiment					basethresh = [1e-5 1.8e-4];						noiselevels = [noiselevels(1),2*noiselevels(end)];					approxthresh = basethresh*2.5;				end							% helen			elseif lower(varargin{2}) == 'hpr'				if strcmp(stimtype,'f')					approxthresh = [1.9693e-05 1e-4]*disfactor;					noiselevels = [noiselevels(1),noiselevels(end)];					logrange = 2;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh/2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*100;				elseif strcmp(stimtype,'g')					% for the 2-point consistency experiment					basethresh = [1e-5 1.8e-4];						noiselevels = [noiselevels(1),2*noiselevels(end)];					approxthresh = basethresh*2.5;				elseif strcmp(stimtype,'n')					noiselevels = [noiselevels(2),noiselevels(end)*2];					basethresh = [basethresh(2),basethresh(end)*2];					approxthresh = basethresh*5.5;					logrange = 2.75;				end										% pat bennett			elseif lower(varargin{2}) == 'pjb'				if strcmp(stimtype,'f')					approxthresh = basethresh*3;					%if strcmp(noisetype,'H') | strcmp(noisetype,'MH')					%	approxthresh = basethresh*3;					%elseif strcmp(noisetype,'M') | strcmp(noisetype,'LM') | strcmp(noisetype,'L')					%	approxthresh = basethresh*3;					%end				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l')					approxthresh = basethresh*1.5;					if strcmp(noisetype,'M') | strcmp(noisetype,'LM') | strcmp(noisetype,'MH')						numshift = -1;					end				elseif strcmp(stimtype,'p')					approxthresh = basethresh*100;				else					approxthresh = basethresh/5;				end				% Aarron			elseif lower(varargin{2}) == 'amc'				if strcmp(stimtype,'f') 					approxthresh = basethresh*4;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*4;				elseif strcmp(stimtype,'l')					approxthresh = basethresh*.85;				elseif strcmp(stimtype,'l2')					approxthresh = basethresh*1.25;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*100;				elseif strcmp(stimtype,'g')					% for the 2-point consistency experiment						noiselevels = [noiselevels(1),2*noiselevels(end)];					basethresh = [1e-5 1.8e-4];						approxthresh = basethresh*2.5;				end							% joanne				elseif lower(varargin{2}) == 'jjb'					if strcmp(stimtype,'f') 					approxthresh = basethresh*4;				elseif strcmp(stimtype,'t') 					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				else					approxthresh = basethresh/3;				end				% michael			elseif lower(varargin{2}) == 'mwf'				% for the 2-point consistency experiment					noiselevels = [noiselevels(1),noiselevels(end)];				basethresh = [basethresh(1),basethresh(end)];				if strcmp(stimtype,'f')									approxthresh = basethresh*5;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*100;				else					approxthresh = basethresh/3;				end				% betty			elseif lower(varargin{2}) == 'bjs'				% for the 2-point consistency experiment					noiselevels = [noiselevels(1),noiselevels(end)];				basethresh = [basethresh(1),basethresh(end)];				if strcmp(stimtype,'f')									approxthresh = basethresh*4.25;					logrange = 2.25;				elseif strcmp(stimtype,'t')					approxthresh = basethresh*5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = basethresh*2;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*100;				else					approxthresh = basethresh/3;				end												% general observers			else						if strcmp(stimtype,'f') 					approxthresh = basethresh*4.5;				elseif strcmp(stimtype,'t') 					approxthresh = basethresh*5.5;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') | strcmp(stimtype,'l2')					approxthresh = basethresh*1.5;				elseif strcmp(stimtype,'p')					approxthresh = basethresh*5.5;				else					approxthresh = basethresh/3;				end				end							% defaults			defarg('mainscrs',1);			defarg('maxtrials',40);			defarg('numsessions',2);			defarg('numstimlevels',5);			defarg('numshift',0);			defarg('rotation','');				eqnoise(varargin{2},stimtype,mainscrs,maxtrials,noiselevels,approxthresh,numsessions,numstimlevels,noisetype,rotation,numshift);		% matched template experiment		elseif strcmp(varargin{1},'mtchtmp')			jg features;			stimtype = lower(varargin{3});			octaves = 1;			logrange = 2;			filtertemps = 0;			% me			if octaves == 2				freq = [1 4 16 64 128];				if strcmp(stimtype,'f')					approxthresh = [4e-4 1e-2 5e-4 7.5e-4 7.5e-3];				elseif strcmp(stimtype,'l') 					approxthresh = [8e-5 2.75e-4 1e-4 4e-4 6e-4];				else					return;				end			elseif octaves == 1				%freq = [1 2 4 8 16 32 64 128];				freq = [1 2 4 8 16 32];				if strcmp(stimtype,'f')					%approxthresh =[0.0215  0.1034	0.0344	0.0439	0.0123	0.0048 7.4621e-04	3.1418e-04];					approxthresh =[0.0215  0.1034	0.0344	0.0439	0.0123	0.0048];				elseif strcmp(stimtype,'l') 					load maxlettervars;					approxthresh = min(maxvars);				else					return;				end			end								%maxtrials = 25;			%nzvar = .2022;			maxtrials = 40;			nzvar = 0;			mainscrs = 1;				numstim = 10;			numsessions = 1;			numstimlevels = 1;			mtchtmp(varargin{2},stimtype,numstim,mainscrs,maxtrials,freq,approxthresh,numsessions,numstimlevels,octaves,nzvar,logrange,filtertemps);		% limited bandwidth experiment		elseif strcmp(varargin{1},'narrownz')			jg features;			stimtype = lower(varargin{3});			% me			if lower(varargin{2}) == 'jmg'					if strcmp(stimtype,'f')					freq = [1 4 16 64 128];					approxthresh = [4e-4 1e-2 5e-4 7.5e-4 7.5e-3];				elseif strcmp(stimtype,'l') 					freq = [1 4 16 64 128];					approxthresh = [8e-5 2.75e-4 1e-4 4e-4 6e-4];				else					return;				end			elseif lower(varargin{2}) == 'abs'					if strcmp(stimtype,'f')					freq = [1 4 16 64 128];					approxthresh = [4e-4 1e-2 5e-4 7.5e-4 7.5e-3];				elseif strcmp(stimtype,'l') 					freq = [1 4 16 64 128];					approxthresh = [8e-5 2.75e-4 1e-4 4e-4 6e-4];				else					return;				end			end									maxtrials = 25;			mainscrs = 1;				numstim = 10;			numsessions = 1;			numstimlevels = 4;			narrownz(varargin{2},stimtype,numstim,mainscrs,maxtrials,freq,approxthresh,numsessions,numstimlevels);		% filterd noise bandwidth experiment		elseif strcmp(varargin{1},'filtnoise')			jg features;			stimtype = lower(varargin{3});			noiselevels = [0 2 8 32 64];			letterbasethresh = [6.2e-05   2.8e-05   9.3e-05   3.9e-05   3.1e-05];			facebasethresh = [2.5e-04   3.1e-05   1.7e-04   7.75e-05   6.2e-05];			bandwidth = 2;					% me			if lower (varargin{2}) == 'jmg'				if strcmp(stimtype,'f')					approxthresh = facebasethresh;				elseif strcmp(stimtype,'t')					approxthresh = facebasethresh;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h')					approxthresh = letterbasethresh;				else					approxthresh = letterbasethresh/5;				end			% general observers			else 				if strcmp(stimtype,'f') 					approxthresh = letterbasethresh*2;				elseif strcmp(stimtype,'t')					approxthresh = letterbasethresh*2;				elseif strcmp(stimtype,'l') 					approxthresh = letterbasethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = letterbasethresh*2;				else					approxthresh = letterbasethresh/4;				end					end			maxtrials = 2;			mainscrs = 1;				if strcmp(stimtype,'g') 				numstim = 2;			else				numstim = 10;			end			numstimlevels = 5;				filtnoise(varargin{2},stimtype,numstim,mainscrs,maxtrials,noiselevels,approxthresh,bandwidth,numstimlevels);		% phase noise bandwidth experiment		elseif strcmp(varargin{1},'phznoise')			jg features;			stimtype = lower(varargin{3});			noiselevels = [0 1 2 3 4 5 8 10 20];			letterbasethresh = ones(size(noiselevels)).*1e-4;			facebasethresh = ones(size(noiselevels)).*1e-4;;			bandwidth = 2;					% me			if lower (varargin{2}) == 'jmg'				if strcmp(stimtype,'f')					approxthresh = facebasethresh;				elseif strcmp(stimtype,'t')					approxthresh = facebasethresh;				elseif strcmp(stimtype,'l') | strcmp(stimtype,'h')					approxthresh = letterbasethresh;				else					approxthresh = letterbasethresh/5;				end			% general observers			else 				if strcmp(stimtype,'f') 					approxthresh = letterbasethresh*2;				elseif strcmp(stimtype,'t')					approxthresh = letterbasethresh*2;				elseif strcmp(stimtype,'l') 					approxthresh = letterbasethresh*1.5;				elseif strcmp(stimtype,'h')					approxthresh = letterbasethresh*2;				else					approxthresh = letterbasethresh/4;				end					end			maxtrials = 2;			mainscrs = 1;				if strcmp(stimtype,'g') 				numstim = 2;			else				numstim = 10;			end			numstimlevels = 5;				phznoise(varargin{2},stimtype,numstim,mainscrs,maxtrials,noiselevels,approxthresh,bandwidth,numstimlevels);		% equivalent noise memory experiment		elseif strcmp(varargin{1},'eqnoisemem')			jg features;			noiselevels = [0,logspace(log10(1e-4),log10(.0625),4)];			basethresh = [7.5e-5 7.5e-5 2.5e-4 5e-4 1e-3];			% me			if lower(varargin{2}) == 'jmg'				approxthresh = basethresh;			% general observers						else				approxthresh = basethresh;			end						%maxtrials = 40;			soa = str2num(varargin{3})/1000;			numshow = 5;			maxtrials = 3;			mainscrs = 0;				numsessions = 1;			numstimlevels = 5;			noisetype = '';			rotation = '';			uncertainty = 0;			eqnoisemem(varargin{2},numshow,soa,uncertainty,mainscrs,maxtrials,noiselevels,approxthresh,numsessions,numstimlevels,noisetype,rotation);		% sub-sampling experiment 		elseif strcmp(varargin{1},'subsamp')			jg features;			samplevels = [];			approxthresh = [];			maxtrials = 35;			mainscrs = 1;			numstim = 10;			stimtype = varargin{3};			sampNeff(varargin{2},stimtype,numstim,mainscrs,maxtrials,samplevels,approxthresh);		% N-AFC ahumada noise to features experiment 		elseif strcmp(varargin{1},'feat')			jg features;			maxtrials = 500;			mainscrs = 1;			numstim = 4;			% 4 alternatives: number must be even (m/f ratio).			pc = .5;				% low pc for more even distribution of noises			stimtype = varargin{3};			featNq(varargin{2},stimtype,mainscrs,maxtrials,numstim,pc);		% 2-AFC ahumada noise to features experiment 		% this uses only button presses and is much faster		elseif strcmp(varargin{1},'feat2')			jg features;			maxtrials = 500;			mainscrs = 1;			stimtype = varargin{3};			featq(varargin{2},stimtype,mainscrs,maxtrials);		% color and space discriminability experiment 		elseif strcmp(varargin{1},'color')			jg color;			maxtrials = 132;			mainscrs = 1;			exptype = lower(varargin{3});					color(lower(varargin{2}),exptype,mainscrs,maxtrials);		end					end	% ideal observer equivalent noise experiment	if strcmp(varargin{1},'idealeqnoise')		jg features;		stimtype = lower(varargin{2});		numnoise = 5;		noiselevels = [logspace(log10(1e-4),log10(.0625),5)];		if strcmp(stimtype,'f') | strcmp(stimtype,'t')			approxthresh = [2e-9 2e-8 1e-7 5e-7 2e-6]*6;		elseif strcmp(stimtype,'l') | strcmp(stimtype,'h') |  strcmp(stimtype,'l2')			approxthresh = [2e-9 2e-8 1e-7 5e-7 2e-6]*2;		elseif strcmp(stimtype,'g')			approxthresh = [2e-9 2e-8 1e-7 5e-7 2e-6]*6;		elseif strcmp(stimtype,'p')			approxthresh = [2e-9 2e-8 1e-7 5e-7 2e-6]*2;		elseif strcmp(stimtype,'n')			approxthresh = [2e-9 2e-8 1e-7 5e-7 2e-6]*3;			logrange = 3;		end			defarg('logrange',2);		numsessions = 1;		numstimlevels = 10;		maxtrials = 500;		noisetype = '';		if strcmp(stimtype,'g') 			numstim = 2;			maxtrials = 1000;		else			numstim = 10;		end			% the internal/external noise ratio		multnoiseratio = 0;				idealeqnoise(stimtype,numstim,maxtrials,noiselevels,approxthresh,numsessions,numstimlevels,noisetype,multnoiseratio,logrange)	% ideal observer equivalent noise consistency experiment	elseif strcmp(varargin{1},'idealeqnoisecon')		jg features;		stimtype = lower(varargin{2});		noisetype = '';		numintnoise = 11;		noiselevels = .0625;		basethresh = [1e-5];		if strcmp(stimtype,'f')			basethresh = basethresh*2;		elseif strcmp(stimtype,'f')			basethresh = basethresh*5;		elseif strcmp(stimtype,'g')			basethresh = 1.2*basethresh;		end		noiselevels = ones(1,numintnoise).*noiselevels;		intnoiselevels = linspace(.4,1.4,numintnoise);		basethresh = intnoiselevels.*basethresh;		intnoiselevels = (intnoiselevels.*sqrt(noiselevels)).^2;				numsessions = 2;		numstimlevels = 10;		maxtrials = 2000;		if strcmp(stimtype,'g') 			numstim = 2;		else			numstim = 10;		end		defarg('logrange',2);			multnoiseratio = 0;		scalewithstim = 1;		idealeqnoise(stimtype,numstim,maxtrials,noiselevels,basethresh,numsessions,numstimlevels,noisetype,multnoiseratio,logrange,intnoiselevels,scalewithstim)	% stochastic resonance experiment	elseif strcmp(varargin{1},'sr')		jg sr;		maxtrials = 75;		mainscrs = 1;		noiserange = [1e-6 1e-4];		sr(varargin{2},mainscrs,maxtrials,noiserange);	end			end