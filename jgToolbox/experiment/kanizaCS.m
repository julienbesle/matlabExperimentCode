function kanizaCS(name,stimtype,mainscrs)% function kaniza(name,stimtype,maxtrials,mainscrs)%% finds threshold to use in the feature experiment% 'name' is the name the subject, in initials% default screen is 1. default number of trials is 1500.%% July 18-19 1998  JMG  U of Toronto Vision Labif nargin	% change directories to the main folder	cf;	jg feature;		defarg('stimtype','modal');		% default screen	if nargin < 3		mainscrs = 2;	else		mainscrs = str2num(mainscrs);	end		% constants	fileshareoff = 1;	calfile = 'c3po12_29_99.DDF';	duration = .5;	key1 = abs('1');	key2 = abs('2');	nzcn = .1414;	nzvar = nzcn^2;	darktime = 0;	vd = 100;	fixationcolor = 130;	basefixation = ones(4);	randfixation = ones(4)*120;	filename = [name,'kanizaTHRESH',lower(stimtype),'.dat'];		% amodal condition	if ~strcmp(lower(stimtype),'amodal')		ringp = 0;		guess = 0.01;			else		ringp = .2;	end	% control condition	if ~strcmp(lower(stimtype),'control')		control = 0;		guess = 0.01;	else		control = 1;	end	% real condition	if ~strcmp(lower(stimtype),'real')		real = 0;		guess = 0.001;	else		real = 1;	end	% mask condition	if strcmp(lower(stimtype),'mask');		mask = 1;		sinfreq = 8;		sindeg = 45;  % 90		sinphz = 0; % 135		fixationcolor = 120;		guess = 0.01;	else		mask = 0;	end	% modal condition	if strcmp(lower(stimtype),'modal');		guess = 0.01;	end				% uses RFM's kaniza toolbox	kansz = 100;		% 128 64	100	induceRad = 16;		% 21  10	16	support = .25;	angledeg = 1.75;	% 1.75	image1name = 'fat';	image2name = 'thin';	if ~mask		image1 = mkfatthinmat(kansz, induceRad, support, angledeg*(-1),ringp, 1,-1,0,control,real,0);		image2 = mkfatthinmat(kansz, induceRad, support, angledeg, ringp, 1, -1,0,control,real,0);	else		image1 = mkfatthinmatgrating(kansz, induceRad, support, angledeg*(-1),ringp, 1,-1,0,control,real,0,sinfreq,sindeg,sinphz);		image2 = mkfatthinmatgrating(kansz, induceRad, support, angledeg, ringp, 1, -1,0,control,real,0,sinfreq,sindeg,sinphz);	end			image1 = scalearb(image1,-1,0);	image2 = scalearb(image2,-1,0);	var1 = std(image1(:))^2;	var2 = std(image2(:))^2;			% parameters for trialsource	guess = 0.0025;	numstimlevels = 5;	maxtrials = 50;	logrange = 2;	levels = logspace(log10(guess/10^(logrange/2)),log10(guess*10^(logrange/2)),numstimlevels)';	gamma = .5;		% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);	% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[190 190 190];	tempCLUT(256,:)=[190 190 190];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% load the stimuli & calibration files% 	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Dark Adaptation');	tic;	[cal1] = getddf(calfile);	hidecursor;	% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'kaniza experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecommand(fwid,['stimtype = ',quotestring(stimtype),';']); 		savecommand(fwid,['kansz = ',num2str(kansz),'; induceRad = ',num2str(induceRad),';support = ',num2str(support),';angledeg = ',num2str(angledeg),'; ringp = ',num2str(ringp),'; control = ',num2str(control),'; real = ',num2str(real),';']);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),'];']);		savecommand(fwid,['duration = ',num2str(duration),'; darktime = ',num2str(darktime),'; noisevar = ',num2str(nzvar),';gam = ',num2str(gamma),';']);		savecommand(fwid,['image1name = ',quotestring(image1name),'; image2name = ',quotestring(image2name),';']);		savecommand(fwid,'image1id = 1; image2id = 2;');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; randnstate1 = 6; randnstate2 = 7;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');		savedatetime(fwid);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	flushevents('keyDown');	sound(introsnd);	hidecursor;	presentimage = [image1*sqrt(.2/var1),zeros(size(image1,1),size(image1,2)/4),image2*sqrt(.2/var2)];	[presentimage,HCCLUT]=makeimage(presentimage,cal1,fixationcolor);	screen(screens(1),'SetClut',HCCLUT,0);	screen(screens(1),'PutImage',presentimage);	[newx,newy] = centertext(screens(1),rects(1,:),[image1name,' = 1           ',image2name,' = 2'],round(rects(1,4)*.15));	[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.9));	hit = getchar;	screen(screens(1),'FillRect',0);		% initialize	sequence = coinflip(maxtrials*numstimlevels,.5)+1;	responses = sequence*0 + 1;	if ~exist('trialsrc','var')		trialsrc = mkconstim( levels, maxtrials, 1);	end		% main loop	for trial = 1:maxtrials*numstimlevels  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop				if isnan(contrast)			break;		end		% make the image		randnstate = randn('state');		nz=cliprandn(size(image1),2);		nz=nz*sqrt(nzvar/std(nz(:))^2);		eval(['currimage=image',num2str(sequence(trial)),'*sqrt(contrast/var',num2str(sequence(trial)),')+nz;']);		[currimage,CLUT]=makeimage(currimage,cal1,fixationcolor);		fixRect=centrerect([0 0 kansz kansz],[ 0 0 size(basefixation)]);		currimage((fixRect(2)+1):fixRect(4),(fixRect(1)+1):fixRect(3))=basefixation;				% fixation		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',HCCLUT,0);		screen(screens(1),'PutImage',basefixation);					% see if user wants to pause/fixation		key = pollpause(screens(1),'0',num2str(maxtrials-trial),500,.4);		if trial == 1 | ~isempty(key)			screen(screens(1),'SetClut',HCCLUT,0);			screen(screens(1),'PutImage',basefixation);				waitsecs(duration/2);				end				% present the image		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',CLUT,0);		screen(screens(1),'WaitVBL',1);		screen(screens(1),'PutImage',currimage);		waitsecs(duration);		screen(screens(1),'WaitVBL',1);		screen(screens(1),'FillRect',0);				% get the response		flushevents('keyDown');		resp = '9';		while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)			resp = getchar;		end		if abs(resp)==key2			responses(trial) = 2;		elseif isquitkey(resp)			break;		end				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end			% save the data		data=[trialsrc.trial,sequence(trial),responses(trial),correct,contrast];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'%.0f\t',[randnstate(1),randnstate(2)]);		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);					end	% close the screen.	sound(introsnd);	screen CloseAll;	% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn