function dotextures(initials,learningfactor)% function dotextures(initials,learningfactor)%% shell that runs the equivalent noise identification experiment.% finds contrast thresholds according to method% of constant stimuli at arbitrary number of noise levels.% can also choose any number of stimuli to present.%% 'initials' is your initials. %% 'learningfactor' is a parameter that allows% the user to adjust the contrast range with learning.% it is a proportion of the initial threshold estimate for% the low and high noise conditions (hard-coded below).% 'learningfactor' is 1 by default. the user should adjust this% to some fraction of 1 with subsequent sessions. a good% place to start after the first session would be '0.9'. %% 'numstim' is the number of stimuli in the set% the default (and maximum) is 10. the first 'numstim' % patterns in the set are used if 'numstim' is less% than 10.%% 'stimset' is the stimulus set to be used. this is % refereced by an integer, ie. '1' for set #1, '2' for% set #2, etc. default is '1'.%% random noise textures can be made by the function:% [images,steps] = makebpnoise(sz,rmin,rmax,n,area,spacing)%% each set can be regenerated by using a unique seed.% these are the seeds for the first 2 sets:% seeds = [.8;2.1].*1e+09 for NoiseStruct1   ('n1')% seeds = [.7;3.0].*1e+09 for NoiseStruct2  ('n2')%% if you want more sets, you have to generate them yourself% with the makebpnoise function (found in the 'analysis' folder).%% Running the experiment:%% if pat was running in the second session with 5 stimuli% and with the 1st noise set, he would type:%%		>> dotextures pjb .9 5 1%% the experiment is set up to probe 5 stimulus levels at each% of 5 noise levels for 31 trials each (a total of 775 trials).% you can adjust these parameters below.%% consecutive sessions are saved in separate files, and % the file names are numbered appropriately if the files% are kept within matlab's search path.%% at the end of the experiment, the data analysis routine is% called and you are propted to confirm some parameters. just hit% 'ok' and your data will be spit out in a file and on a graph.%% more details:% includes option to repeat trials to get consistency% measure (see 'numsessions' parameter below).% % patterns are bandpass filtered gaussian noise fields% (2-4 cycles/image), 256x256 pixels in size.% % user selects stimuli with a from a selection window.% each trial is started with a mouse click% '0' key skips initial adaptation.% clicking mouse in top left corner instead of a response% exists the program. data is saved after each trial.%%% Nov 6 1999 JMG U of T Vision Lab% set the pathjg setp fred;jg home;% test for initialsif nargin <1	error('initials must be passed.');	return;end% parameters for individual subjectsif strcmp(initials,'lo')	stimset = 1;	showstim = [2 4 6 8 10];elseif strcmp(initials,'pb')	stimset = 1;	showstim = [1 2 3 4 5];else	return;end% defaultsdefarg('learningfactor',1);defarg('stimset','1');			% texture set #1defarg('nztype','');			% used to label noise levels (not used here)defarg('stimtype',['n',num2str(stimset)]);defarg('numsessions',1);		% number of repeated sessions (for consistency)defarg('numstimlevels',5);		% number of stimulus levels in psychometric functiondefarg('numshift',0);			% shifts the stimulus levels up or down in log spacedefarg('logrange',3);			% the range of stimlus levels around threshold estimatedefarg('maxtrials',31);			% number of trials/stimulus leveldefarg('mainscrs',1);			% screen to display stimulidefarg('showstim',[1:10]);showstim = unique(showstim);	% sorts and gets rid of any repeatsnumstim = length(showstim);% string conversionif ischar(learningfactor)	learningfactor = str2num(learningfactor);end% noise and stimulus levels estimated from Gold, Bennett & Sekuler (1999)defarg('noiselevels', [0,logspace(log10(5e-4),log10(.1),4)]);defarg('approxthresh', [4.5000e-05   4.5000e-05   1.5000e-04   3.0000e-04   6.0000e-04]);approxthresh = approxthresh*learningfactor;% the experiment[filename] = texture(initials,stimtype,mainscrs,maxtrials,numstim,noiselevels,approxthresh,numsessions,numstimlevels,numshift,logrange,nztype,showstim,learningfactor)% call fitting functiondopsymet(filename,pwd);% reset the pathjg setp oldpath; 