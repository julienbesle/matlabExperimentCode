function featNq(name,stimtype,mainscrs,maxtrials,numstim,pc)% function featNq(name,stimtype,mainscrs,maxtrials,numstim,pc)%% finds threshold to use in the feature experiment% 'name' is the name the subject, in intials% 'stimtype' is the type of stimulus to be shown % (e.g., 'Lbig1' = big letters set 1, 'Fbig1' = big faces set 1, 'Gbig' = big gratings).% default screen is 1. default number of trials is 500.%% July 18-19 1998  JMG  U of Toronto Vision Labif nargin >1 & exist('stimtype','var')	% change directories to the main folder	cf;	jg feature;		% default screen	defarg('mainscrs',1);	defarg('maxtrials',500);	% constants	fileshareoff = 1;	calfile = 'AppleA.DDF';	duration = .5;	nzcn = .25;	nzvar = nzcn^2;	darktime = 120;	vd = 100;		% make sounds	introsnd=makesnd(140,.2,.3);	corrsnd=makesnd(400,.09,.4);	wrongsnd=makesnd(200,.09,.4);	% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[1 1 1];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% load the stimuli & calibration files	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Dark Adaptation'); tic;	[cal1] = getddf(calfile);		% load the stimulus file. stimuli are stored in the structure 'images'.	% the names are stored in the cell array 'names'	if lower(stimtype(1)) == 'l'		load('LetterStruct');	elseif lower(stimtype(1)) == 'f'		load('FaceStruct');	end	tempnames = fieldnames(images);	defarg('numstim',length(tempnames));	if numstim < length(tempnames) & numstim > 1		if mod(numstim,2) == 0 			if lower(stimtype) == 'f'					female = {'andrea','esther','nicole','sharon','tracy'};				male = {'dave','paul','richard','rob','steve'};					currname = 1;				names = {};				for i = 1:numstim/2					names{currname} = male{i};					names{currname+1} = female{i};					currname = currname+2;				end			else				for i = 1:numstim					names{i} =tempnames{i};				end			end		else				printstr('Number of stimuli must be even');			return;		end	else		names = tempnames;	end	eval(['imagesz = size(images.',names{1},');']);	eval(['basevar = (std(images.',names{1},'(:)))^2;']);	nzsz = imagesz;	% file names	filename = [name,'fq',stimtype,num2str(numstim),'.dat'];	sourcename = [name,'fq',stimtype,num2str(numstim),'src'];	% make the selection window 	coords = getcoords(100,numstim,rects,20);	select = mkselectwin(coords,100/imagesz(1),rects,images,names);	[select,selectclut] = makeimage(select,cal1);	% parameters for quest	gamma = 1/numstim;	guess = 7.5e-5;	guesssd = 5*guess;		% deafult percent correct corresponds to alpha contrast in weibull fit	defarg('pc',(1-(1-gamma)*exp(-1)));	beta = 2.5;	delta = .01;	mulstep = 10^.01;	range = 10;	accuracy = 0;	id = 1; 		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'feature.quest experiment');		savecomment(fwid,['image names: ',strcat(names{1:end})]);		savecomment(fwid,['calibration file: ',calfile]);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),'];']);		savecommand(fwid,['stimtype = 'quotestring(stimtype),'; duration = ',num2str(duration),'; darktime = ',num2str(darktime),'; noisevar = ',num2str(nzvar),';']);		savecommand(fwid,['pc=',num2str(pc),'; initialalpha = ',num2str(guess),'; initialbeta = ',num2str(beta),'; gam = ',num2str(gamma),';']);		savecommand(fwid,['delta = ',num2str(delta),'; mulstep = ',num2str(mulstep),'; quitSD = ',num2str(accuracy),'; initialSD = ',num2str(guesssd),';']);		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; currsd = 6; randnstate1 = 7; randnstate2 = 8;');		savedatetime(fwid);	else		fwid = fopen(which(filename),'a+');		savedatetime(fwid);		if exist(sourcename,'file')			load(which(sourcename));		end			end	% initialize	sequence = rands([1:numstim],[1,maxtrials]);	responses = zeros(size(sequence));	if ~exist('trialsrc','var')		trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% mouse click to continue	screen(screens(1),'FillRect',0);	flushevents('mouseUp','mouseDown');	setmouse(rects(3)/2,rects(4)/2,screens);	sound(introsnd);	screen(screens(1),'SetClut',selectclut,0);	screen(screens(1),'PutImage',select);	[newx,newy] = centertext(screens(1),rects(1,:),'Click Mouse To Start');	[clicks,x,y] = getclicks;	screen(screens(1),'FillRect',0);			% main loop	for trial = 1:maxtrials  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop				if isnan(contrast)			break;		end		% make the image		randnstate = randn('state');		nz=cliprandn(nzsz,2);		nz=nz*sqrt(nzvar/std(nz(:))^2);		eval(['currimage=images.',names{sequence(trial)},'*sqrt(contrast/basevar)+nz;']);		[currimage,CLUT]=makeimage(currimage,cal1);				% wait for mouse click		[clicks,x,y] = getclicks(screens(1));				% if the user double clicked, show the # of remaining trials		% wait for another click to proceed with next trial		while clicks > 1			screen(screens(1),'SetClut',selectclut,0);			[newx,newy] = centertext(screens(1),rects(1,:),num2str(maxtrials-trial),[],210);			[clicks,x,y] = getclicks(screens(1));			screen(screens(1),'FillRect',0);			[clicks,x,y] = getclicks(screens(1));		end				% present the image		screen(screens(1),'SetClut',CLUT,0);		screen(screens(1),'PutImage',currimage);		waitsecs(duration);		screen(screens(1),'FillRect',0);				% present the selection window		screen(screens(1),'SetClut',selectclut,0);		screen(screens(1),'PutImage',select);				% get the response		responses(trial) = selectimage(coords,[0,0,10,10],screens(1));		screen(screens(1),'FillRect',0);		% quit?		if responses(trial) < 1			break;		end				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end				% save the data		currsd=questsd(trialsrc.q);		data=[trialsrc.trial,sequence(trial),responses(trial),correct,contrast,currsd,randnstate(1),randnstate(2)];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);		% pause for a break		%if rem(trial,maxtrials/4) == 0 & trial<maxtrials		%	[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. ',num2str(maxtrials-trial),' trials remaining.'],round(rects(1,4)*.4),210);		%	[newx,newy] = centertext(screens(1),rects(1,:),['Click the Mouse to Continue.'],round(rects(1,4)*.6),210);		%	[clicks,x,y] = getclicks(screens(1));		%	screen(screens(1),'FillRect',0);		%end			end	% close the screen.	sound(introsnd);	screen CloseAll;	% final threshold estimate	if isnan(trialsrc.final)		finalest=contrast;	else		finalest=trialsrc.final;	end	savecommand(fwid,['if exist(''finalest'',''var''), finalest = [finalest,',num2str(finalest),']; else, finalest = ',num2str(finalest),'; end']);	% save the trialsource	eval(['save ',sourcename,' trialsrc']);		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn