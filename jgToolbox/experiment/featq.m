function featq(name,stimtype,mainscrs,maxtrials)% function featq(name,stimtype,mainscrs,maxtrials)%% finds threshold to use in the feature experiment% 'name' is the name the subject, in intials% 'stimtype' is the type of stimulus to be shown % (e.g., 'Lbig1' = big letters set 1, 'Fbig1' = big faces set 1, 'Gbig' = big gratings).% default screen is 1. default number of trials is 500.%% July 18-19 1998  JMG  U of Toronto Vision Labif nargin >1 & exist('stimtype','var')	% change directories to the main folder	cf;	jg feature;		% default screen	if nargin < 3		mainscrs = 1;	end	% default trials	if nargin < 4		maxtrials = 500;	end		% constants	fileshareoff = 1;	calfile = 'AppleA.DDF';	duration = .5;	key1 = abs('1');	key2 = abs('2');	nzcn = .25;	nzvar = nzcn^2;	darktime = 120;	vd = 100;	filename = [name,'fq',stimtype,'.dat'];	sourcename = [name,'fq',stimtype,'src'];	% parameters for grating identification	smallsz = 128;	largesz = 256;	iscompound = 0;	freq1 = 2;	freq2 = 3*freq1;	phz1 = 0;	phz2 = 0;	deg1 = 0;	deg2 = 0;	% the names of the images shown are stroed as image1name and image2name	if ~strcmp(lower(stimtype(1)),'l') & ~strcmp(lower(stimtype(1)),'f')		if iscompound			image1name=['f+',num2str(freq2/freq1),'f/',num2str(phz1),'phz'];			image2name=['f+',num2str(freq2/freq1),'f/',num2str(phz2),'phz'];;		else			image1name='f';			image2name=[num2str(freq2/freq1),'f'];					end			end		% parameters for quest	guess = 2.5e-4;	guesssd = 5*guess;	pc = .81;	beta = 2.5;	delta = .01;	gamma = .5;	mulstep = 10^.01;	range = 10;	accuracy = 0;	id = 1; 			% make sounds	introsnd=makesnd(140,.2,.3);	corrsnd=makesnd(400,.09,.4);	wrongsnd=makesnd(200,.09,.4);	% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[1 1 1];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% load the stimuli & calibration files	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Dark Adaptation'); tic;	[cal1] = getddf(calfile);		% load the images if it is faces or letters.	if ~strcmp(lower(stimtype(1)),'g')			eval(['load ',stimtype]); 		else		if strcmp(lower(stimtype(2)),'b')			sz = largesz;		else			sz = smallsz;		end		if iscompound 			image1 = dosinimage(freq1,sz)+dosinimage(freq2,sz,deg1,phz1);			image2 = dosinimage(freq1,sz)+dosinimage(freq2,sz,deg2,phz2);		else			image1 = dosinimage(freq1,sz,deg1,phz1);			image2 = dosinimage(freq2,sz,deg2,phz2);		end				end	var1 = std(image1(:))^2;	var2 = std(image2(:))^2;	hidecursor;	% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'feature.quest experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),'];']);		savecommand(fwid,['stimtype = 'quotestring(stimtype),'; duration = ',num2str(duration),'; darktime = ',num2str(darktime),'; noisevar = ',num2str(nzvar),';']);		savecommand(fwid,['pc=',num2str(pc),'; initialalpha = ',num2str(guess),'; initialbeta = ',num2str(beta),'; gam = ',num2str(gamma),';']);		savecommand(fwid,['delta = ',num2str(delta),'; mulstep = ',num2str(mulstep),'; quitSD = ',num2str(accuracy),'; initialSD = ',num2str(guesssd),';']);		savecommand(fwid,['image1name = ',quotestring(image1name),'; image2name = ',quotestring(image2name),';']);		savecommand(fwid,'image1id = 1; image2id = 2;');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; currsd = 6; randnstate1 = 7; randnstate2 = 8;');		if strcmp(lower(stimtype(1)),'g')			savecommand(fwid,['imagesize = ',num2str(sz),';freq1 = ',num2str(freq1),';freq2 = ',num2str(freq2),';iscompound = ',num2str(iscompound),';phz1 = ',num2str(phz1),';phz2 = ',num2str(phz2),';deg1 = ',num2str(deg1),';deg2 = ',num2str(deg2),';']);		end				savedatetime(fwid);	else		fwid = fopen(filename,'a+');		savedatetime(fwid);		eval(['load ',sourcename]);			end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	flushevents('keyDown');	sound(introsnd);	hidecursor;	presentimage = [image1*sqrt(nzvar/var1),zeros(size(image1,1),size(image1,2)/4),image2*sqrt(nzvar/var2)];	[presentimage,CLUT]=makeimage(presentimage,cal1);	screen(screens(1),'SetClut',CLUT,0);	screen(screens(1),'PutImage',presentimage);	[newx,newy] = centertext(screens(1),rects(1,:),[image1name,' = 1           ',image2name,' = 2'],round(rects(1,4)*.15));	[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.9));	hit = getchar;	screen(screens(1),'FillRect',0);		% initialize	sequence = coinflip(maxtrials,.5)+1;	responses = sequence*0 + 1;	if ~exist('trialsrc','var')		trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);		s1r1 = zeros(size(image1));		s1r2 = s1r1;		s2r1 = s1r1;		s2r2 = s1r1;	end		% main loop	for trial = 1:maxtrials  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop				if isnan(contrast)			break;		end		% make the image		randnstate = randn('state');		nz=cliprandn(size(image1),2);		nz=nz*sqrt(nzvar/std(nz(:))^2);		eval(['currimage=image',num2str(sequence(trial)),'*sqrt(contrast/var',num2str(sequence(trial)),')+nz;']);		[currimage,CLUT]=makeimage(currimage,cal1);				% see if user wants to pause		key = pollpause(screens(1),'0',num2str(maxtrials-trial));		% present the image		screen(screens(1),'SetClut',CLUT,0);		screen(screens(1),'PutImage',currimage);		waitsecs(duration);		screen(screens(1),'FillRect',0);				% get the response		flushevents('keyDown');		resp = '9';		while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)			resp = getchar;		end		if abs(resp)==key2			responses(trial) = 2;		elseif isquitkey(resp)			break;		end				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end				% save the data		eval(['s',num2str(sequence(trial)),'r',num2str(responses(trial)),'= s',num2str(sequence(trial)),'r',num2str(responses(trial)),'+nz;']);		currsd=questsd(trialsrc.q);		data=[trialsrc.trial,sequence(trial),responses(trial),correct,contrast,currsd,randnstate(1),randnstate(2)];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);			end	% close the screen.	sound(introsnd);	screen CloseAll;	% final threshold estimate	if isnan(trialsrc.final)		finalest=contrast;	else		finalest=trialsrc.final;	end	savecommand(fwid,['if exist(''finalest'',''var''), finalest = [finalest,',num2str(finalest),']; else, finalest = ',num2str(finalest),'; end']);	% save the trialsource	eval(['save ',sourcename,' trialsrc s1r1 s1r2 s2r1 s2r2']);		% close the file	fclose(fwid);		% turn on filesharing	if fileshareoff		status=fs('On');	end	else		printstr('Not enough input arguments.')endreturn