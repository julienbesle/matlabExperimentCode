function ic(name,stimtype,mainscrs,maxtrials)% function ic(name,stimtype,mainscrs,maxtrials)%% continually finds threshold using quest in the% illusory contour experiment. makes classification% images and retains a running quest trial source.%% 'name' is the name of the subject, in initials% 'stimtype' is the type of stimulus to be shown % default screen is 1. default number of trials is 500.%% may 18 1999  JMG  U of Toronto Vision Labif nargin	% change directories to the main folder	cf;	jg feature;		% deafults	defarg('mainscrs',1);	defarg('maxtrials',500);	defarg('stimtype','kaniza');		% constants	fileshareoff = 1;			% flag for turning filesharing off	calfile = 'AppleA.DDF';		% calibration file name	duration = .5;				% stimulus duration	key1 = abs('1');			% key for response 1	key2 = abs('2');			% key for response 2	nzcn = .05;					% contrast of the external noise	nzvar = nzcn^2;				% variance of the external noise	darktime = 120;				% initial adaptation time	vd = 100;					% viewing distance (not necessary)	basefixation = ones(4)*70;	% fixation point	randfixation = ones(4)*120;	% load the images	% they are stored in a structure called 'images'	if strcmp(stimtype,'egg')			% the illusory 'egg' stimulus		load eggsmall2;						elseif strcmp(stimtype,'kaniza')	% the kaniza squares		load kanizasmall15;					else		return;	end		% names of the images	names = fieldnames(images);	image1name = names{1};	image2name = names{2};	eval(['image1 = images.',names{1},';']);	eval(['image2 = images.',names{2},';']);	var1 = std(image1(:))^2;	var2 = std(image2(:))^2;		% filenames	% text data file in "readdata" format (see "readdata.m")	filename = [name,stimtype,'.dat'];	% .mat file with the trialsource and summed noise field images.	sourcename = [name,stimtype,'src'];		% parameters for quest	guess = 1e-4;				% initial guess for threshold	guesssd = 5*guess;			% range over which to test; should be wide	pc = .76;					% perecent correct level to find	beta = 2.5;					% estimate of slope of psychometric function	delta = .01;				% error factor	gamma = .5;					% guessing rate	mulstep = 10^.01;			% grain	range = 10;					% range	accuracy = 0;				% halting accuracy (0 is infinite)	id = 1; 					% trial source id		% make sounds for feedback	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);	% open the screens	% make a high contrast clut for initial windows and fixation	HCCLUT =[0:255]'*ones(1,3);		% linear clut that coivers whole range  	HCCLUT(1,:)=[160 160 160];		% zero clut entry is average luminance	HCCLUT(2,:)=[190 190 190];		% second entry is moderate value for text display	[screens,rects] = openscreens(mainscrs,HCCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% adaptation	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Adaptation'); tic;	% load the stimuli & calibration files	[cal1] = getddf(calfile);	hidecursor;	% open the data file and write the header	% look for the file on the path first	if exist(filename) ~= 2			% if it is not on the path, make a new file.		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'kaniza experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),'];']);		savecommand(fwid,['duration = ',num2str(duration),'; darktime = ',num2str(darktime),'; noisevar = ',num2str(nzvar),';']);		savecommand(fwid,['pc=',num2str(pc),'; initialalpha = ',num2str(guess),'; initialbeta = ',num2str(beta),'; gam = ',num2str(gamma),';']);		savecommand(fwid,['delta = ',num2str(delta),'; mulstep = ',num2str(mulstep),'; quitSD = ',num2str(accuracy),'; initialSD = ',num2str(guesssd),';']);		savecommand(fwid,['image1name = ',quotestring(image1name),'; image2name = ',quotestring(image2name),';']);		savecommand(fwid,'image1id = 1; image2id = 2;');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; currsd = 6; randnstate1 = 7; randnstate2 = 8;');		savedatetime(fwid);	% if it is there, open it and save the current date and time.	% also, load the trial source to pick up where we left off.	else		fwid = fopen(filename,'a+');		savedatetime(fwid);		eval(['load ',sourcename]);			end	% turn off filesharing. (only for networks)	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	% clear screen	flushevents('keyDown');				% fluch keyboard	% show the intro screen which displays the stimuli to be selected,	% along with their names and the corresponding selection key	sound(introsnd);						hidecursor;	presentimage = [image1*sqrt(.2/var1),zeros(size(image1,1),size(image1,2)/4),image2*sqrt(.2/var2)];	[presentimage,tempCLUT]=makeimage(presentimage,cal1);	screen(screens(1),'SetClut',tempCLUT,0);	screen(screens(1),'PutImage',presentimage);	[newx,newy] = centertext(screens(1),rects(1,:),[image1name,' = 1           ',image2name,' = 2'],round(rects(1,4)*.15));	[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.9));	hit = getchar;	screen(screens(1),'FillRect',0);		% initialize	sequence = coinflip(maxtrials,.5)+1; % random sequence of images to be displayed	responses = sequence*0 + 1;			 % response vector	% if this is the first time, make a quest trial source (see the trial source	% toolbox by RFM)	% also, make image matrices to hold the classification images (summed noise fields)	if ~exist('trialsrc','var')		trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);		s1r1 = zeros(size(image1));		% stimulus 1, response 1		s1r2 = s1r1;					% stimulus 1, response 2		s2r1 = s1r1;					% stimulus 2, response 1		s2r2 = s1r1;					% stimulus 2, response 2	end		% main loop	for trial = 1:maxtrials  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop (only for non-zero accuracy parameter)				if isnan(contrast)			break;		end		% make the image		randnstate = randn('state');		% get the random number seed		nz=cliprandn(size(image1),2);		% make the noise field		nz=nz*sqrt(nzvar/std(nz(:))^2);		% set the variance of the noise		% set the variance of the stimulus		eval(['currimage=image',num2str(sequence(trial)),'*sqrt(contrast/var',num2str(sequence(trial)),')+nz;']);		[currimage,CLUT]=makeimage(currimage,cal1);	% make the image		% see if user wants to pause/fixation (see POLLPAUSE for details)		% looks for user to hit the '0' key. if so, the fixation point		% is replaced by the number of trials remaining. pressing '0' again		% resumes fixation after a 500 ms delay.		key = pollpause(screens(1),'0',num2str(maxtrials-trial),500,duration/2,1);		if trial == 1 | ~isempty(key)			screen(screens(1),'SetClut',HCCLUT,0);			screen(screens(1),'PutImage',basefixation);				waitsecs(duration/2);		end		% present the image		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',CLUT,0);		screen(screens(1),'PutImage',currimage);		waitsecs(duration);		screen(screens(1),'FillRect',0);				% get the response		% only responds to the designted response keys and		% the 'ESC" key, which quits out of the program (after saving		% the current data and trial source).		resp = '9';		while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)			resp = getchar;		end		if abs(resp)==key2			responses(trial) = 2;		elseif isquitkey(resp)			break;		end				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end			% resume fixation		screen(screens(1),'SetClut',HCCLUT,0);		screen(screens(1),'PutImage',basefixation);		% save the data		eval(['s',num2str(sequence(trial)),'r',num2str(responses(trial)),'= s',num2str(sequence(trial)),'r',num2str(responses(trial)),'+nz;']);		currsd=questsd(trialsrc.q);		data=[trialsrc.trial,sequence(trial),responses(trial),correct,contrast,currsd,randnstate(1),randnstate(2)];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);			end	% close the screen.	sound(introsnd);	screen CloseAll;	% save the current final threshold estimate	if isnan(trialsrc.final)		finalest=contrast;	else		finalest=trialsrc.final;	end	savecommand(fwid,['if exist(''finalest'',''var''), finalest = [finalest,',num2str(finalest),']; else, finalest = ',num2str(finalest),'; end']);	% save the trialsource	eval(['save ',sourcename,' trialsrc s1r1 s1r2 s2r1 s2r2']);		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn