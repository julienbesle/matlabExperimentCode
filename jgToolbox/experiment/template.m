function template(name,noiselevels,approxthresh,mainscrs,maxtrials,numsessions,numstimlevels,numshift,logrange)% function template(name,noiselevels,approxthresh,mainscrs,maxtrials,numsessions,numstimlevels,numshift,logrange)%% finds thresholds in the noise masking experiment% uses method of constant stimuli% 'name' is the name the subject, in initials%% Sept 18 1998  JMG  U of Toronto Vision Labif nargin > 2	% change directories to the main folder	cf;	jg feature;			% defaults	defarg('mainscrs',1);	defarg('maxtrials',40);	defarg('numsessions',1);	defarg('numstimlevels',5);	defarg('numshift',0);	defarg('logrange',2);	% number of conditions	numnoiselevels = length(noiselevels);		% constants	pauseduration = .5;	key1 = abs('1');	key2 = abs('2');	fileshareoff = 1;	calfile = 'AppleA.DDF';	darktime = 120;	basefixation = ones(4)*70;	randfixation = ones(4)*120;	msgcolor = 190;		% parameters for grating identification	framert = 67;	duration = 4/framert;	vd = 100;	screensz = [23 17];	res = [640  480];	hdisdeg = 2.3;	vdisdeg = 1.54;	hdiscm = vd*tan(deg2rad(hdisdeg));	vdiscm = vd*tan(deg2rad(vdisdeg));	hdis = round(cm2pix(hdiscm,screensz,res));	vdis = round(cm2pix(vdiscm,screensz,res));	cpd = 2.3;	gaborszdeg = 1.54;	gaborszcm = vd*tan(deg2rad(gaborszdeg));		gaborsz = round(cm2pix(gaborszcm,screensz,res));	freq = cpd2cpi(cpd,gaborszcm,vd);	phz = 0;	deg1 = 12;	deg2 = -12;	cpw = 3;		% location of the stimulus		imagerect = setrect([res(1)/2+hdis],[vdis+res(2)/2],[res(1)/2+hdis+gaborsz],[vdis+res(2)/2+gaborsz]);	% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);		% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[msgcolor msgcolor msgcolor];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Adaptation',rects(1,end)-50,1);	tic;	% get the calibration data	cal = getddf(calfile);	% hide the cursor;	hidecursor;	% stimuli are stored in the structure 'images'.	images.g1 = dogabor(freq,cpw,gaborsz,deg1,phz);	images.g2 = dogabor(freq,cpw,gaborsz,deg2,phz);	names = fieldnames(images);	numstim = length(names);	eval(['imagesz = size(images.',names{1},');']);	nzsz = imagesz;			% the variance of all images is the same	basevar = .1;	images.g1 = images.g1*sqrt(basevar/stdm(images.g1)^2);	images.g2 = images.g2*sqrt(basevar/stdm(images.g2)^2);		% make file names	found = 0;	loc = 1;	while ~found		if numsessions > 1			filename = [name,num2str(loc),'templatecon.dat'];		else			filename = [name,num2str(loc),'template.dat'];		end		if ~(exist(filename)==2)			found = 1;		else			loc = loc+1;		end	end		% the stimulus levels to test	for i=1:numnoiselevels		shiftfactor = numshift*(log10(approxthresh(i)*10^(logrange/2))-log10(approxthresh(i)/10^(logrange/2)))/(numstimlevels-1);		stimlevels(:,i) = logspace(log10(approxthresh(i)./10^(logrange/2))+shiftfactor,log10(approxthresh(i).*10^(logrange/2))+shiftfactor,numstimlevels)';	end	% make the selection window 	coords = getcoords(imagesz(1),numstim,rects,20);	select = mkselectwin(coords,1,rects,images);	[select,selectclut] = makeimage(select,cal);		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'eqnoise experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecomment(fwid,['image names: ',strcat(names{1:end})]);		savecommand(fwid,['orientations = [',num2str([deg1 deg2]),'];']);		savecommand(fwid,['cpi = ',num2str(freq),'; cpw = ',num2str(cpw),'; phase = ',num2str(phz),';']);		savecommand(fwid,['gaborszpix = ',num2str(gaborsz),'; gaborszcm = ',num2str(gaborszcm),'; gaborszdeg = ',num2str(gaborszdeg),';']);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),']; gam = ',num2str(1/numstim),';']);		savecommand(fwid,['duration = ',num2str(duration),'; darktime = ',num2str(darktime),';trials = ',num2str(maxtrials),';']);		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; condition = 6; rt = 7; randnstate1 = 8; randnstate2 = 9;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');					savedatetime(fwid);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	sound(introsnd);	screen(screens(1),'SetClut',selectclut,0);	screen(screens(1),'PutImage',select);	[newx,newy] = centertext(screens(1),rects(1,:),'1',130,msgcolor,20);	[newx,newy] = centertext(screens(1),rects(1,:),'2',rects(1,end)-110,msgcolor,20);	[newx,newy] = centertext(screens(1),rects(1,:),'Press Any Key To Start',rects(1,end)/2,msgcolor);	flushevents('keyDown');	dummy = getchar;	screen(screens(1),'FillRect',0);	% initialize	sequence = rands([1:numstim],[1,maxtrials*numstimlevels*numnoiselevels]);	conlevel = zeros(size(sequence));	id = zeros(size(sequence));		% for the responses	responses = zeros([length(sequence),numsessions]);	correct = responses;	totaltrials = maxtrials*numstimlevels*numnoiselevels*numsessions;	pausetrials = round(totaltrials/4);	counter = 1;	for session = 1:numsessions				% to store the random number seeds and make the trial source		if session == 1			seeds = {};			trialstring = '';			for i = 1:numnoiselevels				eval(['trialsrc',num2str(i),' = mkconstim(stimlevels(:,',num2str(i),'),inf,',num2str(i),');']);				trialstring = [trialstring,'trialsrc',num2str(i),','];			end			eval(['trialsrc = mktslist(',trialstring(1:end-1),');']);		else			savecomment(fwid,['session #',num2str(session)]);			savedatetime(fwid);		end				% main loop		for trial = 1:totaltrials/numsessions  					if session == 1				% get the next stimulus level				[trialsrc,conlevel(trial),id(trial)] = gettrial(trialsrc);			end						% make the image			if session == 1				seeds{trial} = randn('state');			else				randn('state',seeds{trial});			end						nz=cliprandn(nzsz);					nz=nz*sqrt(noiselevels(id(trial))/std(nz(:))^2);			eval(['currimage = images.',names{sequence(trial)},'.*sqrt(conlevel(trial)/basevar) + nz;']);			[currimage,CLUT]=makeimage(currimage,cal);			% see if user wants to pause			key = pollpause(screens(1),'0',num2str(totaltrials-counter));			% fixation			screen(screens(1),'SetClut',selectclut,0);			screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));						waitsecs(pauseduration);			screen(screens(1),'FillRect',0);							% present the image			screen(screens(1),'SetClut',CLUT,0);			screen(screens(1),'PutImage',currimage,imagerect);			waitsecs(duration);			screen(screens(1),'FillRect',0);			screen(screens(1),'SetClut',selectclut,0);			tic;							% repost fixation				screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));										% get the response			flushevents('keyDown');			resp = '9';			while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)				resp = getchar;			end			rt = toc;			if abs(resp)==key1				responses(trial,session) = 1;			elseif abs(resp)==key2				responses(trial,session) = 2;			elseif isquitkey(resp)				sound(introsnd);				closeall;				return;			end			flushevents('keyDown');							% accuracy			correct(trial,session)=sequence(trial)==responses(trial,session);			if correct(trial,session)				sound(corrsnd);			else				sound(wrongsnd);			end					% save the data			data=[trial,sequence(trial),responses(trial,session),correct(trial,session),conlevel(trial),noiselevels(id(trial)),rt,(seeds{trial})'];			fprintf(fwid,'%g\t',data); 			fprintf(fwid,'\n');			if session == 1				% update trial source				trialsrc = telltrial(trialsrc,conlevel(trial),correct(trial,session));			end						% pause for a break			if rem(trial,pausetrials) == 0 & trial*session<totaltrials				screen(screens(1),'FillRect',0);				[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. ',num2str(totaltrials-counter),' trials remaining.'],round(rects(1,4)*.4),msgcolor);				if numstim ~= 2					[newx,newy] = centertext(screens(1),rects(1,:),['Click the Mouse to Continue.'],round(rects(1,4)*.6),msgcolor);					[clicks,x,y] = getclicks(screens(1));				else					[newx,newy] = centertext(screens(1),rects(1,:),['Press Any Key To Continue.'],round(rects(1,4)*.6),msgcolor);					dummy = getchar;				end				screen(screens(1),'FillRect',0);			end					% increment			counter = counter+1;					end					end	% close the screen.	sound(introsnd);	screen CloseAll;		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn