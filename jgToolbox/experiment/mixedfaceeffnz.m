function filename = mixedfaceeffnz(name,mainscrs,maxtrials,numstim,noiselevels,approxthresh,numsessions,numstimlevels,numshift,logrange,showstim,rotation,polarity)% function filename = mixedfaceeffnz(name,mainscrs,maxtrials,numstim,noiselevels,approxthresh,numsessions,numstimlevels,numshift,logrange,showstim,rotation,polarity)%% finds thresholds in the noise masking experiment% uses method of constant stimuli% 'name' is the name the subject, in intials% default screen is 1. default number of trials is 35.%% Sept 18 1998  JMG  U of Toronto Vision Lab% the name of the file containing the initial thresholdif nargin > 1	% change directories to the main folder	cf;	jg home;			% defaults	defarg('mainscrs',2);	defarg('maxtrials',25);	defarg('numstim',10);	defarg('noiselevels',[0 0.0625]);	defarg('numsessions',1);	defarg('numstimlevels',4);	defarg('rotation',[1 1 -1 -1]);	defarg('polarity',[1 1 -1 -1]);	defarg('numshift',zeros(1,length(rotation)));	defarg('logrange',[2.5 2.5 2.5 2.5]);	defarg('showstim',[1:numstim]);			% defarg does not work with matrices	if ~exist('approxthresh','var');	    approxthresh = [1e-3 1e-2;1e-3 1e-2; 1e-3 1e-2; 1e-3 1e-2];	end	% get arguments	numnoiselevels = length(noiselevels);	numconds = length(rotation);		% check for the passed screen; if not there, use the highest one	screensAvail = screen('Screens');	if ~find(mainscrs==screensAvail)		mainscrs = screensAvail(end);	end		% error checking	if size(approxthresh,2) < numnoiselevels		printstr('number of noise levels and threshold estimates do not match.');		return;	end		% constants	pauseduration = .5;	key1 = abs('1');	key2 = abs('2');	fileshareoff = 1;	calfile = 'c3po12_29_99.ddf';	darktime = 120;	basefixation = ones(4)*70;	randfixation = ones(4)*120;	msgcolor = 190;	framert = 67;	frames = round(framert/2);	vd = 114;	screensz = [23 17];	res = [640  480];	gam = 1/numstim;		% make sounds	introsnd=makesnd(150,.2,.95);	corrsnd=makesnd(600,.09,.65);	wrongsnd=makesnd(200,.09,.8);		% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[msgcolor msgcolor msgcolor];	[screens,rects] = openscreens(mainscrs,tempCLUT);	screen(screens(1),'WindowToFront')	screen(screens(1),'Preference','SetClutWaitVBL',1);	screen(screens(1),'Preference','WaitForVBLInterrupt',1);		[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Adaptation',rects(1,end)-50,1);	tic;	% get the calibration data	[cal1] = getddf(calfile);	% hide the cursor;	hidecursor;	% load the stimulus file. stimuli are stored in the structure 'images'.	load('facestruct');	names = fieldnames(images);	numimages = length(names);		% error checking	if length(showstim) > numstim | sum(showstim>numimages)		printstr('number of stimuli and requested stimuli do not match.');		return;	end			% get requested images	if numimages ~= numstim				if numimages < numstim						error('Not enough images.')			return;		else			images = rmfield(images,names(setdiff([1:numimages],showstim)));		end	end	names = fieldnames(images);	eval(['imagesz = size(images.',names{1},');']);	nzsz = imagesz;		% the variance of all images is the same	eval(['basevar = std(images.',names{1},'(:))^2;']);	% duration and stimulus location	duration = .5;	imagerect = [];		% make file names	found = 0;	loc = 1;	while ~found		if numsessions > 1			filename = [name,num2str(loc),'mixedfaceENZcon.dat'];		else			filename = [name,num2str(loc),'mixedfaceENZ.dat'];		end		if ~(exist(filename)==2)			found = 1;		else			loc = loc+1;		end	end	approxthresh	logrange	% the stimulus levels to test	for i = 1:numconds		for j = 1:numnoiselevels			themin = approxthresh(i,j)/10^(logrange(i)/2);			themax = approxthresh(i,j)*10^(logrange(i)/2);			stimlevels(i,j,:) = logspaceshift(themin,themax,numstimlevels,numshift(i));		end	end	stimlevels		% open the off-screen windows	numwindows = numconds+2;	offscrptrs=zeros(numwindows,1);	for i=1:numwindows		offscrPtrs(i) = SCREEN(mainscrs,'OpenOffscreenWindow',0);		offscrCluts{i} = zeros(256,3);	end		% make the selection windows	thumbsz = 100;	coords = getcoords(thumbsz,numstim,rects,20);	for i = 1:numconds		tempimages = invertimages(images,rotation(i),polarity(i));	 	select = mkselectwin(coords,thumbsz/imagesz(1),rects,tempimages);		[select,selectclut] = makeimage(select,cal1);		screen(offscrPtrs(i),'PutImage',select);		offscrCluts{i} = selectclut;			end	% default high contrast clut 	defclut = [0:255]'*[1 1 1];	defclut(1,:) = selectclut(1,:);		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'eqnoise experiment');		savecomment(fwid,['image names: ',strcat(names{1:end})]);		savecommand(fwid,vars2str(numnoiselevels,numstimlevels,noiselevels));		savecommand(fwid,vars2str(showstim,key1,key2,calfile));		savecommand(fwid,vars2str(imagesz,thumbsz));		savecommand(fwid,vars2str(vd,duration,darktime,maxtrials,mainscrs));		savecommand(fwid,vars2str(screensz,res,framert,gam,frames));		savecommand(fwid,vars2str(rotation,polarity));					savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; condition = 6; stimrotation = 7; stimpolarity = 8; rt = 9; randnstate1 = 10; randnstate2 = 11;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');					savedatetime(fwid);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end			% initialize	sequence = rands([1:numstim],[1,maxtrials*numstimlevels*numnoiselevels*numconds]);	conlevel = zeros(size(sequence));	id = zeros(size(sequence));		% for the responses	response = [];	correct = [];	totaltrials = maxtrials*numstimlevels*numnoiselevels*numconds*numsessions;	counter = 1;		% make random permutation of conditions and stimulus levels	% constrain it so that the first four are high contrast versions of each stimulus type	condorder = shuffle([1:numconds]);		stimorder = ones(1,numconds).*numstimlevels;	noiselevelorder = ones(1,numconds);	tempcondorder = [];	tempstimorder = [];	tempnoiselevelorder = [];		for j = 1:numnoiselevels		if j == 1			currnumstimlevels = numstimlevels-1;		else			currnumstimlevels = numstimlevels;		end		for i = 1:numconds			tempcondorder = [tempcondorder,ones(1,currnumstimlevels)*i];		end		for i = 1:numconds			tempstimorder = [tempstimorder,[1:currnumstimlevels]];		end		tempnoiselevelorder = [tempnoiselevelorder,ones(1,currnumstimlevels*numconds)*j];	end		[tempcondorder,locs] = shuffle(tempcondorder);	tempstimorder = tempstimorder(locs);	tempnoiselevelorder = tempnoiselevelorder(locs);		condorder = [condorder,tempcondorder];	stimorder = [stimorder,tempstimorder];	noiselevelorder = [noiselevelorder,tempnoiselevelorder];		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		trial = 1;	for session = 1:numsessions				% to store the random number seeds		if session == 1			seeds = {};		else			savecomment(fwid,['session #',num2str(session)]);			savedatetime(fwid);		end				% main loop		for currlevel = 1:length(noiselevelorder)  					% get the current levels			currcond = condorder(currlevel);			currnoiselevel = noiselevels(noiselevelorder(currlevel));			currstimlevel = stimlevels(currcond,(noiselevelorder(currlevel)),stimorder(currlevel));			% change the images			tempimages = invertimages(images,rotation(currcond),polarity(currcond));			% show selection window before beginning			screen(screens(1),'SetClut',offscrCluts{currcond},0);			screen('CopyWindow',offscrPtrs(currcond),screens(1));			[newx,newy] = centertext(screens(1),rects(1,:),[num2str(totaltrials-trial+1),' trials remaining.'],round(rects(1,4)*.4),msgcolor);			[newx,newy] = centertext(screens(1),rects(1,:),'Click the Mouse Start',rects(1,end)*.6,msgcolor);			flushevents('mouseDown');			[clicks,x,y] = GetClicks(screens(1));			screen(screens(1),'SetClut',defclut,0);			screen(screens(1),'WaitVBL',1);			screen('CopyWindow',offscrPtrs(end),screens(1));						% start the trials			for currtrial = 1:maxtrials						% make the image				if session == 1					seeds{trial} = randn('state');				else					randn('state',seeds{trial});				end							nz=cliprandn(nzsz);						nz=nz*sqrt(currnoiselevel/std(nz(:))^2);							eval(['currimage = tempimages.',names{sequence(trial)},'.*sqrt(currstimlevel/basevar) + nz;']);				[currimage,CLUT]=makeimage(currimage,cal1);				screen(offscrPtrs(end-1),'PutImage',currimage);											% fixation				screen(screens(1),'SetClut',defclut,0);				screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));							% wait for mouse click							[clicks,x,y] = getclicks(screens(1));				if 0				% if the user double clicked, show the # of remaining trials				% wait for another click to proceed with next trial				if clicks > 1								screen(screens(1),'SetClut',deflut,0);					screen('CopyWindow',offscrPtrs(end),screens(1));					[newx,newy] = centertext(screens(1),rects(1,:),num2str(totaltrials-trial),rects(1,4)/2,210);					[clicks,x,y] = getclicks(screens(1));					screen('CopyWindow',offscrPtrs(end),screens(1));					screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));									waitsecs(1);				end				end							% present the image							screen(screens(1),'SetClut',CLUT,0);				screen('CopyWindow',offscrPtrs(end-1),screens(1));				screen(screens(1),'WaitVBL',frames);				screen(screens(1),'SetClut',offscrCluts{currcond},0);				screen('CopyWindow',offscrPtrs(currcond),screens(1));				tic;				response = selectimage(coords,[0,0,10,10],screens(1));				rt = toc;				screen(screens(1),'WaitVBL',1);				screen('CopyWindow',offscrPtrs(end),screens(1));				% quit?				if response < 1					% close the screen.					sound(introsnd);					screen CloseAll;					% close the file					fclose(fwid);										return;				end							% accuracy				correct = sequence(trial)==response;				if correct					sound(corrsnd);				else					sound(wrongsnd);				end						% save the data				data=[trial,showstim(sequence(trial)),showstim(response),correct,currstimlevel,currnoiselevel,rotation(currcond),polarity(currcond),rt];				fprintf(fwid,'%g\t',data); 				fprintf(fwid,'%.0f\t',(seeds{trial})');				fprintf(fwid,'\n');					% increment				trial = trial+1;							end			end		end		% close the screen.	sound(introsnd);	screen CloseAll;		% close the file	fclose(fwid);	else		printstr('Not enough input arguments.')endreturn