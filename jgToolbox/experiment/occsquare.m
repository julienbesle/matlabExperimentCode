function occsquare(name,stimtype,maxtrials,mainscrs,randpos,rotdeg)% function occsquare(name,stimtype,maxtrials,mainscrs,randpos)%% finds threshold to use in the feature experiment% 'name' is the name the subject, in initials% default screen is 1. default number of trials is 1500.%% July 18-19 1998  JMG  U of Toronto Vision Labif nargin	% change directories to the main folder	cf;	jg feature;		defarg('stimtype','occ');	defarg('rotdeg',0);		% default trials	if nargin < 3		maxtrials = 2000;	else		maxtrials = str2num(maxtrials);	end	% default screen	if nargin < 4		mainscrs = 1;	else		mainscrs = str2num(mainscrs);	end	% randomizing position	if nargin < 5		randpos = 0;	else		randpos = str2num(randpos);	end		% constants	fileshareoff = 1;	calfile = 'c3po.ddf';	duration = .5;	key1 = abs('1');	key2 = abs('2');	nzcn = .1414;	nzvar = nzcn^2;	darktime = 120;	vd = 100;	fixationcolor = 130;	basefixation = ones(4);	randfixation = ones(4)*120;	filename = [name,'square',lower(stimtype),'.dat'];	sourcename = [name,'square',lower(stimtype),'src'];	pausetrials = maxtrials/4;		% amodal condition	if strcmp(lower(stimtype),'frag')		p.occlum = 0;	else		p.occlum = -1;	end	% params for square	n = 100;	gapsizeP = floor(n/3);	occsizeP = floor((n-gapsizeP)/2);	rectthickP = 4;	basesizeP = floor(n-occsizeP-rectthickP);	pcoffset = 0.04;	offsetP = floor(basesizeP.*pcoffset);	rectwidthP = basesizeP;	rectheightP = basesizeP;	bglum = 0;	rectlum = 1;	maxdev = 10;	% for quick passage later	p.n = n;	p.bglum =bglum;	p.rectwidthP = rectwidthP;	p.rectheightP = rectheightP;	p.rectthickP = rectthickP;	p.rectlum = rectlum;	p.occsizeP = occsizeP;	p.gapsizeP = gapsizeP;			% uses RFM's square toolbox	% for initial stimulus display	image1name = 'fat';	image2name = 'thin';	image1 = mksimpleoccrectmat( p.n, p.bglum, ...		basesizeP+offsetP*3, basesizeP, p.rectthickP, 0, 0, p.rectlum, ...		p.occsizeP, p.gapsizeP, p.occlum , rotdeg);	image2 = mksimpleoccrectmat( p.n, p.bglum, ...		basesizeP, basesizeP+offsetP*3, p.rectthickP, 0, 0, p.rectlum, ...		p.occsizeP, p.gapsizeP, p.occlum , rotdeg);	var1 = std(image1(:))^2;	var2 = std(image2(:))^2;			% parameters for quest	guess = 1e-3;	guesssd = 5*guess;	pc = .75;	beta = 2.5;	delta = .01;	gamma = .5;	mulstep = 10^.01;	range = 10;	accuracy = 0;	id = 1; 			% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);	% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[190 190 190];	tempCLUT(256,:)=[190 190 190];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% load the stimuli & calibration files	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Dark Adaptation'); tic;	[cal1] = getddf(calfile);	hidecursor;	% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'kaniza experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecommand(fwid,vars2str(basesizeP,pcoffset,offsetP));		savecommand(fwid,vars2str(n,bglum,rectthickP,occsizeP,gapsizeP,maxdev));		savecommand(fwid,vars2str(stimtype));		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),'];']);		savecommand(fwid,['duration = ',num2str(duration),'; darktime = ',num2str(darktime),'; noisevar = ',num2str(nzvar),';']);		savecommand(fwid,['pc=',num2str(pc),'; initialalpha = ',num2str(guess),'; initialbeta = ',num2str(beta),'; gam = ',num2str(gamma),';']);		savecommand(fwid,['delta = ',num2str(delta),'; mulstep = ',num2str(mulstep),'; quitSD = ',num2str(accuracy),'; initialSD = ',num2str(guesssd),';']);		savecommand(fwid,['image1name = ',quotestring(image1name),'; image2name = ',quotestring(image2name),';']);		savecommand(fwid,'image1id = 1; image2id = 2;');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; currsd = 6; randnstate1 = 7; randnstate2 = 8; dxP = 9; dyP = 10;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');		savedatetime(fwid);		eval(['load ',sourcename]);			end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	flushevents('keyDown');	sound(introsnd);	hidecursor;	presentimage = [image1*sqrt(.2/var1),zeros(size(image1,1),size(image1,2)/4),image2*sqrt(.2/var2)];	[presentimage,HCCLUT]=makeimage(presentimage,cal1,fixationcolor);	screen(screens(1),'SetClut',HCCLUT,0);	screen(screens(1),'PutImage',presentimage);	[newx,newy] = centertext(screens(1),rects(1,:),[image1name,' = 1           ',image2name,' = 2'],round(rects(1,4)*.15));	[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.9));	hit = getchar;	screen(screens(1),'FillRect',0);		% initialize	sequence = coinflip(maxtrials,.5)+1;	responses = sequence*0 + 1;	if ~exist('trialsrc','var')		s1r1 = zeros(size(image1));		s1r2 = s1r1;		s2r1 = s1r1;		s2r2 = s1r1;		trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);	else		currtrial = trialsrc.trial;		trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);		trialsrc.trial = currtrial;	end		% main loop	for trial = 1:maxtrials  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop				if isnan(contrast)			break;		end			% choose image		if sequence(trial) == 1			p.rectwidthP = basesizeP+offsetP;			p.rectheightP = basesizeP;		else			p.rectwidthP = basesizeP;			p.rectheightP = basesizeP+offsetP;		end						% make the image		[currimage,CLUT,dxP,dyP,nz,randnstate] = makerandoccimage(cal1, maxdev, nzvar, ...		fixationcolor, contrast, p ,randpos, rotdeg);		fixRect=centrerect([0 0 size(currimage)],[ 0 0 size(basefixation)]);		currimage((fixRect(2)+1):fixRect(4),(fixRect(1)+1):fixRect(3))=basefixation;						% fixation		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',HCCLUT,0);		screen(screens(1),'PutImage',basefixation);					% see if user wants to pause/fixation		key = pollpause(screens(1),'0',num2str(maxtrials-trial),500,.4);		if trial == 1 | ~isempty(key)			screen(screens(1),'SetClut',HCCLUT,0);			screen(screens(1),'PutImage',basefixation);				waitsecs(duration/2);				end				% present the image		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',CLUT,0);		screen(screens(1),'WaitVBL',1);		screen(screens(1),'PutImage',currimage);		waitsecs(duration);		screen(screens(1),'WaitVBL',1);		screen(screens(1),'FillRect',0);				% get the response		flushevents('keyDown');		resp = '9';		while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)			resp = getchar;		end		if abs(resp)==key2			responses(trial) = 2;		elseif isquitkey(resp)			trialsrc.trial = trialsrc.trial-1;			break;		end				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end			% save the data		eval(['s',num2str(sequence(trial)),'r',num2str(responses(trial)),'= s',num2str(sequence(trial)),'r',num2str(responses(trial)),'+nz;']);		currsd=questsd(trialsrc.q);		data=[trialsrc.trial,sequence(trial),responses(trial),correct,contrast,currsd,randnstate(1),randnstate(2),dxP,dyP];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);				if ~rem(trial,pausetrials) & trial ~= maxtrials			screen(screens(1),'SetClut',HCCLUT,0);			[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. Only ',num2str(maxtrials-trial),' trials to go.'],round(rects(1,4)*.25));			[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.75));			hit = getchar;			screen(screens(1),'FillRect',0);			waitsecs(1);			end			end	% close the screen.	sound(introsnd);	screen CloseAll;	% final threshold estimate	if isnan(trialsrc.final)		finalest=contrast;	else		finalest=trialsrc.final;	end	savecommand(fwid,['if exist(''finalest'',''var''), finalest = [finalest,',num2str(finalest),']; else, finalest = ',num2str(finalest),'; end']);	% save the trialsource	eval(['save ',sourcename,' trialsrc s1r1 s1r2 s2r1 s2r2']);		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn