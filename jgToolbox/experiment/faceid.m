function faceid(name,maxtrials,mainscrs,orientation,imagesize)% function faceid(name,maxtrials,mainscrs,orientation,imagesize)%% finds threshold to use in the feature experiment% 'name' is the name the subject, in initials% default screen is 0. default number of trials is 1500.%% July 18-19 1998  JMG  U of Toronto Vision Labif nargin	% change directories to the main folder	cf;	jg home;		defarg('maxtrials',1500);	defarg('mainscrs',0);	defarg('orientation',0);	defarg('imagesize',128);		% type checking	if ischar(maxtrials)		maxtrials = str2num(maxtrials);	end			% constants	fileshareoff = 1;	calfile = 'c3po.ddf';	duration = .5;	keys = '1234';	nzcn = .1414;	nzvar = nzcn^2;	darktime = 120;	vd = 100;	msgcolor = 190;	fixationcolor = 130;	basefixation = ones(4);	randfixation = ones(4)*120;	filename = [name,'faceid',num2str(orientation),'.dat'];	sourcename = [name,'faceid',num2str(orientation),'src'];	pausetrials = maxtrials/4;		% load the images	% stored as the structure 'images'	load('FaceStruct.mat');	temp.richard = images.richard;	temp.paul = images.paul;	images = temp; 	imagenames = fieldnames(images);	numstim = length(imagenames);	keycodes = '12';		% rotate images	% right now, only works for 0,90,180, and 270	if orientation		if orientation == 90			for i = 1:numstim				eval(['images.',imagenames{i},' = rot90(images.',imagenames{i},');']);			end		elseif orientation == 180			for i = 1:numstim				eval(['images.',imagenames{i},' = rot90(rot90(images.',imagenames{i},'));']);			end		elseif orientation == 270			for i = 1:numstim				eval(['images.',imagenames{i},' = rot90(rot90(rot90(images.',imagenames{i},')));']);			end		else 			error('cannot handle orientation.')		end		end		% size	eval(['basesize = size(images.',imagenames{1},',1);']);		% resize ?	if basesize ~= imagesize		for i = 1:numstim			eval(['images.',imagenames{i},' = imresize(images.',imagenames{i},',imagesize/basesize);']);		end	end	% recompute average magnitude spectrum	basevar = .05;	images = avemag(images,basevar);	% parameters for quest	guess = 2e-3;	guesssd = 5*guess;	pc = .70;	beta = 2.5;	delta = .01;	gamma = 1/numstim;	mulstep = 1.1;	range = 10;	accuracy = 0;	id = 1; 		% load calibration file	[cal1] = getddf(calfile);		% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);	% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[190 190 190];	tempCLUT(256,:)=[190 190 190];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% adaptation	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Dark Adaptation'); tic;	hidecursor;	% make the selection window	thumbsz = imagesize; 	coords = getcoords(thumbsz,numstim,rects,20);	select = mkselectwin(coords,thumbsz/imagesize,rects,images);	[select,selectclut] = makeimage(select,cal1);		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'faceid experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecomment(fwid,['image names: ',strcat(imagenames{1:end})]);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),'];']);		savecommand(fwid,['duration = ',num2str(duration),'; darktime = ',num2str(darktime),'; noisevar = ',num2str(nzvar),';']);		savecommand(fwid,['pc=',num2str(pc),'; initialalpha = ',num2str(guess),'; initialbeta = ',num2str(beta),'; gam = ',num2str(gamma),';']);		savecommand(fwid,['delta = ',num2str(delta),'; mulstep = ',num2str(mulstep),'; quitSD = ',num2str(accuracy),'; initialSD = ',num2str(guesssd),';']);		savecommand(fwid,'image1id = 1; image2id = 2; image3id = 3; image4id = 4');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; currsd = 6; randnstate1 = 7; randnstate2 = 8;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');		savedatetime(fwid);		eval(['load ',sourcename]);			end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	flushevents('keyDown');	sound(introsnd);	hidecursor;	screen(screens(1),'SetClut',selectclut,0);	screen(screens(1),'PutImage',select);	[newx,newy] = centertext(screens(1),rects(1,:),[keycodes(1),'                                          ',keycodes(2)],rects(1,end)*.3,msgcolor);	[newx,newy] = centertext(screens(1),rects(1,:),[keycodes(3),'                                          ',keycodes(4)],rects(1,end)*.7,msgcolor);	[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',rects(1,end)/2,msgcolor);	hit = getchar;	screen(screens(1),'FillRect',0);		% initialize	sequence = rands([1:numstim],[1,maxtrials]);	if ~exist('trialsrc','var')		for i = 1:numstim			for j = 1:numstim				eval(['s',num2str(i),'r',num2str(j),' = zeros(imagesize);']);			end		end	end	% reset the trial source	trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);		% main loop	for trial = 1:maxtrials  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop				if isnan(contrast)			break;		end		% make the image		randnstate = randn('state');		nz=cliprandn(imagesize);		nz=nz*sqrt(nzvar/std(nz(:))^2);		eval(['currimage=images.',imagenames{sequence(trial)},'*sqrt(contrast/basevar)+nz;']);		[currimage,CLUT]=makeimage(currimage,cal1,fixationcolor);		% fixation		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',selectclut,0);		screen(screens(1),'PutImage',basefixation);					% see if user wants to pause/fixation		key = pollpause(screens(1),'0',num2str(maxtrials-trial),500,.4);		if trial == 1 | ~isempty(key)			screen(screens(1),'SetClut',selectclut,0);			screen(screens(1),'PutImage',basefixation);				waitsecs(duration/2);				end				% present the image		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',CLUT,0);		screen(screens(1),'WaitVBL',1);		screen(screens(1),'PutImage',currimage);		waitsecs(duration);		screen(screens(1),'WaitVBL',1);		screen(screens(1),'FillRect',0);		screen(screens(1),'SetClut',selectclut,0);		screen(screens(1),'PutImage',select);		[newx,newy] = centertext(screens(1),rects(1,:),keycodes(1),,rects(1,end)*.3,msgcolor);		[newx,newy] = centertext(screens(1),rects(1,:),keycodes(2),rects(1,end)*.7,msgcolor);% 		[newx,newy] = centertext(screens(1),rects(1,:),[keycodes(1),'                                          ',keycodes(2)],rects(1,end)*.3,msgcolor);% 		[newx,newy] = centertext(screens(1),rects(1,:),[keycodes(3),'                                          ',keycodes(4)],rects(1,end)*.7,msgcolor);			% get the response		flushevents('keyDown');		resp = '9';		while isempty(find(resp==keycodes)) & ~isquitkey(resp)			resp = getchar;		end				if isquitkey(resp)			break;		else			responses(trial) = str2num(keys(find(resp==keycodes)));		end				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end			% save the data		eval(['s',num2str(sequence(trial)),'r',num2str(responses(trial)),'= s',num2str(sequence(trial)),'r',num2str(responses(trial)),'+nz;']);		currsd=questsd(trialsrc.q);		data=[trialsrc.trial,sequence(trial),responses(trial),correct,contrast,currsd];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'%.0f\t',[randnstate(1),randnstate(2)]);		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);				if ~rem(trial,pausetrials) & trial ~= maxtrials			screen(screens(1),'SetClut',selectclut,0);			[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. Only ',num2str(maxtrials-trial),' trials to go.'],round(rects(1,4)*.25));			[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.75));			hit = getchar;			screen(screens(1),'FillRect',0);			waitsecs(1);			end			end	% close the screen.	sound(introsnd);	screen CloseAll;	% final threshold estimate	if isnan(trialsrc.final)		finalest=contrast;	else		finalest=trialsrc.final;	end	savecommand(fwid,['if exist(''finalest'',''var''), finalest = [finalest,',num2str(finalest),']; else, finalest = ',num2str(finalest),'; end']);	% save the trialsource	sourcestring = [' trialsrc '];	for i = 1:numstim		for j = 1:numstim			sourcestring = [sourcestring,'s',num2str(i),'r',num2str(j),' '];		end	end		eval(['save ',sourcename,sourcestring]);		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn