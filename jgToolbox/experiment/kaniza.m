function kaniza(name,maxtrials,stimtype,stimframes,mainscrs,dopostmask,dopostmaskDelay,angledeg)% function kaniza(name,stimtype,maxtrials,mainscrs,frames,postmask,angledeg)%% finds threshold to use in the feature experiment% 'name' is the name the subject, in initials% default screen is 1. default number of trials is 1500.%% July 18-19 1998  JMG  U of Toronto Vision Labif nargin	% change directories to the main folder	cf;	jg home;		defarg('stimtype','corner');	defarg('maxtrials',1500);	defarg('mainscrs',2);	defarg('stimframes',33);	defarg('dopostmask',0);	defarg('dopostmaskDelay',0);	defarg('angledeg',1.75);	checkstr(maxtrials,mainscrs,stimframes,dopostmask,angledeg);	% constants	framert = round(framerate(mainscrs));	durationms = (stimframes/framert)*1000;	fileshareoff = 1;	calfile = 'c3po12_29_99.DDF';	fixationframes = round(framert/2);	key1 = abs('1');	key2 = abs('2');	nzcn = 0.1414;	nzvar = nzcn^2;	darktime = 120;	vd = 100;	fixationcolor = 130;	basefixation = ones(4)*50;	randfixation = ones(4)*120;	filename = [name,'kaniza',lower(stimtype),'.dat'];	sourcename = [name,'kaniza',lower(stimtype),'src'];	pausetrials = maxtrials/4;	if dopostmaskDelay		postmaskframes = round(framert/4);	else		postmaskframes = 0;	end	postmaskcolor = 225;	cornerwidthP = 1;		% amodal condition	if strcmp(lower(stimtype),'amodal')		ringp = 0.2;	else		ringp = 0;	end	% just corners condition	if strcmp(lower(stimtype),'corner') | strcmp(lower(stimtype),'square') 		corneronly = 1;		else		corneronly = 0;		end	% control condition	if strcmp(lower(stimtype),'control')		control = 1;	else		control = 0;	end	% real condition	if strcmp(lower(stimtype),'real') | strcmp(lower(stimtype),'square')		real = 1;	else		real = 0;	end	% mask condition	if strcmp(lower(stimtype),'mask');		mask = 1;		sinfreq = 8;		sindeg = 45;  % 90		sinphz = 0; % 135		fixationcolor = 120;	else		mask = 0;	end		% uses RFM's kaniza toolbox	% angledeg = 1.75;	% 1.75	kansz = 100;		% 128 64	100	induceRad = 16;		% 21  10	16	support = .25;	image1name = 'fat';	image2name = 'thin';	if ~mask		image1 = mkfatthinmat(kansz, induceRad, support, angledeg*(-1),ringp, 1,-1,0,control,real,0,corneronly,cornerwidthP);		image2 = mkfatthinmat(kansz, induceRad, support, angledeg, ringp, 1, -1,0,control,real,0,corneronly,cornerwidthP);	else		image1 = mkfatthinmatgrating(kansz, induceRad, support, angledeg*(-1),ringp, 1,-1,0,control,real,0,sinfreq,sindeg,sinphz);		image2 = mkfatthinmatgrating(kansz, induceRad, support, angledeg, ringp, 1, -1,0,control,real,0,sinfreq,sindeg,sinphz);	end			image1 = scalearb(image1,-1,0);	image2 = scalearb(image2,-1,0);	var1 = std(image1(:))^2;	var2 = std(image2(:))^2;			% parameters for quest	guess = 5e-3;	guesssd = 5*guess;	pc = .75;	beta = 2;	delta = .01;	gamma = .5;	mulstep = 1.05;	range = 10;	accuracy = 0;	id = 1; 			% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);	% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[190 190 190];	tempCLUT(256,:)=[190 190 190];	[screens,rects] = openscreens(mainscrs,tempCLUT);	screen(screens(1),'Preference','SetClutWaitVBL',1);	screen(screens(1),'WindowToFront');	screen(screens(1),'Preference','WaitForVBLInterrupt',1);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	resolution = rects(1,3:4);		% create off-screen pointers	numwindows = 4;	offscrPtrs=zeros(numwindows,1);	for i=1:numwindows		offscrPtrs(i)=screen(screens(1),'OpenOffscreenWindow',0);	end	% load the stimuli & calibration files	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Dark Adaptation'); tic;	[cal1] = getddf(calfile);	hidecursor;	% create post-mask if necessary	if dopostmask		postmaskfield = ones(kansz).*postmaskcolor;		screen(offscrPtrs(3),'PutImage',postmaskfield);	end	% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,'kaniza experiment');		savecomment(fwid,['Data File Name: ',filename]);		savecommand(fwid,vars2str(filename));		savecommand(fwid,vars2str(calfile));		savecommand(fwid,vars2str(stimtype));		savecommand(fwid,vars2str(kansz));		savecommand(fwid,vars2str(induceRad));		savecommand(fwid,vars2str(support));		savecommand(fwid,vars2str(angledeg));		savecommand(fwid,vars2str(ringp));		savecommand(fwid,vars2str(real));		savecommand(fwid,vars2str(corneronly));		savecommand(fwid,vars2str(cornerwidthP));		savecommand(fwid,vars2str(vd));		savecommand(fwid,vars2str(resolution));		savecommand(fwid,vars2str(durationms));		savecommand(fwid,vars2str(darktime));		savecommand(fwid,vars2str(nzcn));		savecommand(fwid,vars2str(nzvar));		savecommand(fwid,vars2str(stimframes));		savecommand(fwid,vars2str(framert));		savecommand(fwid,vars2str(fixationframes));		savecommand(fwid,vars2str(delta));		savecommand(fwid,vars2str(mulstep));		savecommand(fwid,vars2str(accuracy));		savecommand(fwid,vars2str(guesssd));				savecommand(fwid,vars2str(pc));		savecommand(fwid,vars2str(mask));		savecommand(fwid,vars2str(dopostmask));		savecommand(fwid,vars2str(dopostmaskDelay));		if mask			savecommand(fwid,vars2str(sinfreq,sindeg,sinphz));		end		if dopostmask			savecommand(fwid,vars2str(postmaskframes,postmaskcolor));		end		savecommand(fwid,vars2str(image1name));		savecommand(fwid,vars2str(image2name));		savecommand(fwid,'image1id = 1; image2id = 2;');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; currsd = 6; randnstate1 = 7; randnstate2 = 8;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');		savedatetime(fwid);		eval(['load ',sourcename]);			end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	flushevents('keyDown');	sound(introsnd);	hidecursor;	presentimage = [image1*sqrt(.2/var1),zeros(size(image1,1),size(image1,2)/4),image2*sqrt(.2/var2)];	[presentimage,HCCLUT]=makeimage(presentimage,cal1,fixationcolor);	screen(screens(1),'SetClut',HCCLUT,0);	screen(screens(1),'PutImage',presentimage);	[newx,newy] = centertext(screens(1),rects(1,:),[image1name,' = 1           ',image2name,' = 2'],round(rects(1,4)*.15));	[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.9));	hit = getchar;	screen(screens(1),'FillRect',0);		% make a default clut	defclut = [1:256]'*[1 1 1];	defclut(1,:) = HCCLUT(1,:);	zeroclut = ones(256,1)*HCCLUT(1,:);		% initialize	sequence = coinflip(maxtrials,.5)+1;	responses = sequence*0 + 1;	if ~exist('trialcounter','var')		s1r1 = zeros(size(image1));		s1r2 = s1r1;		s2r1 = s1r1;		s2r2 = s1r1;		trialcounter = 0;	end	% reset the trial source every time	trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);	% write to off-screen window	screen(offscrPtrs(1),'PutImage',basefixation);		% main loop	for trial = 1:maxtrials  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop				if isnan(contrast)			break;		end		% make the image		randnstate = randn('state');		nz=cliprandn(size(image1),2);		nz=nz*sqrt(nzvar/std(nz(:))^2);		eval(['currimage=image',num2str(sequence(trial)),'*sqrt(contrast/var',num2str(sequence(trial)),')+nz;']);		[currimage,CLUT]=makeimage(currimage,cal1,fixationcolor);		fixRect=centrerect([0 0 kansz kansz],[ 0 0 size(basefixation)]);		currimage((fixRect(2)+1):fixRect(4),(fixRect(1)+1):fixRect(3))=basefixation;				% write to offscreen window				screen(offscrPtrs(2),'PutImage',currimage);		% loop for showing the movie		loop = 	['screen(screens(1),''SetClut'',defclut,0);',...				 'screen(screens(1),''FillRect'',0);',...				 'screen(''CopyWindow'',offscrPtrs(1),screens(1));',...				 'screen(screens(1),''WaitVBL'',fixationframes);',...				 'screen(screens(1),''FillRect'',0);',...				 'screen(screens(1),''WaitVBL'',1);',...				 'screen(screens(1),''SetClut'',CLUT,0);',...				 'screen(''CopyWindow'',offscrPtrs(2),screens(1));',...				 'screen(screens(1),''WaitVBL'',stimframes);',...				 'screen(screens(1),''FillRect'',0);',...				 'screen(screens(1),''WaitVBL'',1);',...				 'screen(screens(1),''SetClut'',defclut,0);',...				 'screen(''CopyWindow'',offscrPtrs(3),screens(1));',...				 'screen(screens(1),''WaitVBL'',postmaskframes);',...				 'screen(screens(1),''SetClut'',zeroclut,0);'];%				 'screen(screens(1),''WaitVBL'',1);',...				 %				 'screen(''CopyWindow'',offscrPtrs(4),screens(1));'];						% see if user wants to pause/fixation		key = pollpause(screens(1),'0',num2str(maxtrials-trial),500,.4);				% show the stimuli		eval(loop);				% get the response		flushevents('keyDown');		resp = '9';		while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)			resp = getchar;		end		if abs(resp)==key2			responses(trial) = 2;		elseif isquitkey(resp)			break;		end			% increment trial counter		trialcounter = trialcounter+1;				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end			% save the data		eval(['s',num2str(sequence(trial)),'r',num2str(responses(trial)),'= s',num2str(sequence(trial)),'r',num2str(responses(trial)),'+nz;']);		currsd=questsd(trialsrc.q);		data=[trialcounter,sequence(trial),responses(trial),correct,contrast,currsd];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'%.0f\t',[randnstate(1),randnstate(2)]);		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);				if ~rem(trial,pausetrials) & trial ~= maxtrials			screen(screens(1),'SetClut',HCCLUT,0);			[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. Only ',num2str(maxtrials-trial),' trials to go.'],round(rects(1,4)*.25));			[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.75));			hit = getchar;			screen(screens(1),'FillRect',0);			waitsecs(1);			end			end	% close the screen.	sound(introsnd);	screen CloseAll;	% final threshold estimate	if isnan(trialsrc.final)		finalest=contrast;	else		finalest=trialsrc.final;	end	savecommand(fwid,['if exist(''finalest'',''var''), finalest = [finalest,',num2str(finalest),']; else, finalest = ',num2str(finalest),'; end']);	% save the trialsource	eval(['save ',sourcename,' trialcounter s1r1 s1r2 s2r1 s2r2']);		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn