function filtnoise(name,stimtype,numstim,mainscrs,maxtrials,noiselevels,approxthresh,bandwidth,numstimlevels,rotation)% function filtnoise(name,stimtype,numstim,mainscrs,maxtrials,noiselevels,approxthresh,bandwidth,numstimlevels,noisetype)%% finds thresholds in the filtered noise masking experiment% uses method of constant stimuli% 'name' is the name the subject, in intials% 'stimtype' is the type of stimulus to be shown% ('f'=faces; 'l'=letters; 'g' = gratings) % default screen is 1. default number of trials is 35.%% Sept 18 1998  JMG  U of Toronto Vision Lab% the name of the file containing the initial thresholdif nargin > 2	% change directories to the main folder	cf;	jg feature;			% defaults	defarg('mainscrs',1);	defarg('maxtrials',35);	defarg('numstimlevels',6);	defarg('rotation','');	defarg('approxthresh',[]);	defarg('bandwidth',2);	defarg('nzcontrast',.0625);		% stimulus and noise levels	if ~exist('noiselevels','var')		printstr('noise center frequencies must be passed.');		break;	end	numnoiselevels = length(noiselevels);		if length(approxthresh) < numnoiselevels		printstr('number of noise levels and threshold estimates do not match.');		break;	end	% constants	fileshareoff = 1;	calfile = 'AppleA.DDF';	duration = .5;	darktime = 120;	vd = 100;	logrange = 2;	basefixation = ones(4);	randfixation = basefixation*210;	% parameters for grating identification	gaborsz = 256;	freq = 4;	phz = 0;	deg1 = -45;	deg2 = deg1+90;	cpw = 2.5;			% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);		% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[1 1 1];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% load the stimuli & calibration files	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Adaptation'); tic;	% get the calibration data	[cal1] = getddf(calfile);	% hide the cursor;	hidecursor;	% load the stimulus file. stimuli are stored in the structure 'images'.	if lower(stimtype(1)) == 'l'		load('LetterStruct');		names = fieldnames(images);	elseif lower(stimtype(1)) == 'f'		load('FaceStruct');		names = fieldnames(images);	elseif lower(stimtype(1)) == 'h'		load('HebrewStruct');		names = fieldnames(images);	elseif lower(stimtype(1)) == 't'		load('TPStruct');		names = fieldnames(images);	else		images.g1 = dogabor(freq,cpw,gaborsz,deg1,phz);		images.g2 = dogabor(freq,cpw,gaborsz,deg2,phz);		names = {'g1','g2'};	end	numstim = length(names);	eval(['imagesz = size(images.',names{1},');']);	nzsz = imagesz;			% the variance of all images is the same	eval(['basevar = std(images.',names{1},'(:))^2;']);	% rotation 	if strcmp(rotation,'rot')		for i = 1:numstim			eval(['images.',names{i},' = rot90(images.',names{i},',2);']);		end	end		% make file names	found = 0;	loc = 1;	while ~found		filename = [name,num2str(loc),'filtnoise',rotation,upper(stimtype(1)),num2str(numstim),'.dat'];		if ~(exist(filename)==2)			found = 1;		else			loc = loc+1;		end	end	% make the filters	for i = 1:numnoiselevels		if noiselevels(i) == 0			eval(['filter.f',num2str(i),' = ones(nzsz);']);			eval(['filter.f',num2str(i),'(1,1) = 0;']);		else			eval(['filter.f',num2str(i),' = fftunshift(makeGaussfilt(nzsz(1),noiselevels(i),bandwidth,''b'',0));']);		end	end		% the stimulus levels to test	for i=1:numnoiselevels		stimlevels(:,i) = logspace(log10(approxthresh(i)./10^(logrange/2)),log10(approxthresh(i).*10^(logrange/2)),numstimlevels)';	end	% make the selection window 	coords = getcoords(100,numstim,rects,20);	select = mkselectwin(coords,100/imagesz(1),rects,images,names);	[select,selectclut] = makeimage(select,cal1);		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'filtered noise experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecomment(fwid,['image names: ',strcat(names{1:end})]);		if strcmp(lower(stimtype),'g')			savecommand(fwid,['orientations = [',num2str([deg1 deg2]),'];']);			savecommand(fwid,['cpi = ',num2str(freq),'; cpw = ',num2str(cpw),'; phase = ',num2str(phz),';']);		end		savecommand(fwid,['bandwidth = ',num2str(bandwidth),'; centerfrequencies = [',num2str(noiselevels),'];']);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),']; gam = ',num2str(1/numstim),';']);		savecommand(fwid,['stimtype = 'quotestring(stimtype),'; duration = ',num2str(duration),'; darktime = ',num2str(darktime),';trials = ',num2str(maxtrials),';']);		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; condition = 6; randnstate1 = 7; randnstate2 = 8;');	else		fwid = fopen(filename,'a+');				end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	flushevents('mouseUp','mouseDown');	sound(introsnd);	screen(screens(1),'SetClut',selectclut,0);	screen(screens(1),'PutImage',select);	[newx,newy] = centertext(screens(1),rects(1,:),'Click Mouse To Start');	[clicks,x,y] = getclicks;	screen(screens(1),'FillRect',0);	% initialize	sequence = rands([1:numstim],[1,maxtrials*numstimlevels*numnoiselevels]);	conlevel = zeros(size(sequence));	responses = zeros([length(sequence)]);	correct = responses;	totaltrials = maxtrials*numstimlevels*numnoiselevels;	currsession = randperm(numnoiselevels);	counter = 1;	for session = 1:numnoiselevels				trialsrc = mkconstim(stimlevels(:,currsession(session)),inf,1);		savecomment(fwid,['session #',num2str(session)]);		savecomment(fwid,['noise center frequency: ',num2str(noiselevels(currsession(session)))]);		savedatetime(fwid);				% message for a break and current condition		if session > 1			[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. ',num2str(totaltrials-counter+1),' trials remaining.'],round(rects(1,4)*.4),210);		end		[newx,newy] = centertext(screens(1),rects(1,:),['Center Frequency of Noise = 'num2str(noiselevels(currsession(session))),'.'],round(rects(1,4)*.5),210);		[newx,newy] = centertext(screens(1),rects(1,:),['Click the Mouse to Continue.'],round(rects(1,4)*.6),210);		[clicks,x,y] = getclicks(screens(1));		screen(screens(1),'FillRect',0);				% main loop		for trial = 1:totaltrials/numnoiselevels  					% get the next stimulus level			[trialsrc,conlevel(counter),id] = gettrial(trialsrc);			% make the image			seeds{counter} = randn('state');			nz=cliprandn(nzsz,2);					nz=nz*sqrt(nzcontrast/std(nz(:))^2);						% filter the noise except in the all-pass (0) condition			if noiselevels(currsession(session))				eval(['nz = real(ifft2(fft2(nz).*filter.f',num2str(currsession(session)),'));']);			end					% make the image			eval(['currimage = images.',names{sequence(counter)},'.*sqrt(conlevel(counter)/basevar) + nz;']);			[currimage,CLUT]=makeimage(currimage,cal1);					% fixation			screen(screens(1),'SetClut',selectclut,0);			screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));			% wait for mouse click			[clicks,x,y] = getclicks(screens(1));					% if the user double clicked, show the # of remaining trials			% wait for another click to proceed with next trial			if clicks > 1				screen(screens(1),'SetClut',selectclut,0);				screen(screens(1),'FillRect',0);				[newx,newy] = centertext(screens(1),rects(1,:),num2str(totaltrials-counter),rects(1,4)/2,210);				[clicks,x,y] = getclicks(screens(1));				screen(screens(1),'FillRect',0);				screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));								waitsecs(1);			end					% present the image			screen(screens(1),'SetClut',CLUT,0);			screen(screens(1),'PutImage',currimage);			waitsecs(duration);			screen(screens(1),'FillRect',0);						% present the selection window			screen(screens(1),'SetClut',selectclut,0);			screen(screens(1),'PutImage',select);					% get the response			responses(counter) = selectimage(coords,[0,0,10,10],screens(1));			screen(screens(1),'FillRect',0);			% quit?			if responses(counter) < 1				% close the screen.				sound(introsnd);				screen CloseAll;				% close the file				fclose(fwid);									return;			end					% accuracy			correct(counter)=sequence(counter)==responses(counter);			if correct(counter)				sound(corrsnd);			else				sound(wrongsnd);			end					% save the data			data=[counter,sequence(counter),responses(counter),correct(counter),conlevel(counter),noiselevels(currsession(session)),(seeds{counter})'];			fprintf(fwid,'%g\t',data); 			fprintf(fwid,'\n');								% increment			counter = counter+1;					end			end	% close the screen.	sound(introsnd);	screen CloseAll;		% close the file	fclose(fwid);		else		printstr('Not enough input arguments.')endreturn