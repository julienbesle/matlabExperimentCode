function [filename] = nzloc(name,mainscrs,maxtrials,gaborszdeg,gaborcpd,gaborcpw,gaborphz,gabororient,noiselevels,approxthresh,numstimlevels,blocknz,numshift,logrange)% function nzloc(name,mainscrs,maxtrials,gaborszdeg,gaborcpd,gaborcpw,gaborphz,gabororient,noiselevels,approxthresh,numstimlevels,blocknz,numshift,logrange)%% finds thresholds in the noise location noise masking experiment% uses method of constant stimuli in 2IFC design%% uses '1' and '2' keys and 'esc' to quit%% Nov 5 1999  JMG  U of Toronto Vision Labif nargin	% change directories to the main folder	jg home;			% defaults	defarg('mainscrs',0);	defarg('maxtrials',35);	defarg('gaborszdeg',5);	defarg('gaborcpd',0.5);	defarg('gaborcpw',2);	defarg('gaborphz',0);	defarg('gabororient',0);	defarg('noiselevels',.02);	defarg('approxthresh',1e-3);	defarg('numstimlevels',5);	defarg('blocknz',1);	defarg('numshift',0);	defarg('logrange',2);			% error checking	numnoiselevels = length(noiselevels);	if length(approxthresh) < numnoiselevels		printstr('number of noise levels and threshold estimates do not match.');		break;	end	% constants & parameters													key1 = abs('1'); 									% response key for interval 1	key2 = abs('2');									% response key for interval 2		fileshareoff = 1;									% flag for file sharing (1=off)s	calfile = 'c3po.ddf';								% name of claibration file	darktime = 120;										% # of seconds for initial adaptation	msgcolor = 210;										% color of text	framert = framerate(mainscrs);						% frame rate	stimframes = round(framert/4);						% stimulus duration	fixationframes = round(framert/2);					% fixation duration	vd = 100;											% vewing distance								screensz = [23 17];									% size of screen in cm	res = screen(mainscrs,'Rect');	res = res(3:4);										% resolution of screen in pixels						gaborszcm = vd*tan(deg2rad(gaborszdeg));			% stimulus size in cm	gaborszpix = round(cm2pix(gaborszcm,screensz,res));	% stimulus size in pixels	gaborcpi = cpd2cpi(gaborcpd,gaborszcm,vd);			% stimulus frequency in cpi	clipnoisestd = 2; 									% # of sd's to include in clipped noise	bigfontsize = 26;									% size of text in points		% flags for noise type (same in two intervals or different)	diffnz = 0;	samenz = 1;		% fixation point	basefixation = ones(3)*120;	randfixation = basefixation-40;		% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(600,.09,.5);	wrongsnd=makesnd(200,.09,.5);	intervalsnd=makesnd(300,.09,.5);		% open the screens	defclut=[0:255]'*[1 1 1];	defclut(1,:)=[160 160 160];	defclut(2,:)=[msgcolor msgcolor msgcolor];	[screens,rects] = openscreens(mainscrs,defclut);	screen(screens(1),'WindowToFront')	screen(screens(1),'Preference','SetClutWaitVBL',1);	screen(screens(1),'Preference','WaitForVBLInterrupt',1);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',bigfontsize,1);	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Adaptation',rects(1,end)-50,1);	tic;	% hide the cursor;	hidecursor;	% get the calibration data	[cal] = getddf(calfile);	% open the off-screen windows	numwindows = 3;	offscrptrs=zeros(numwindows,1);	for i=1:numwindows		offscrPtrs(i)=SCREEN(mainscrs,'OpenOffscreenWindow',0);	end	% create the gabor	theimage = dogabor(gaborcpi,gaborcpw,gaborszpix,gabororient,gaborphz);	basevar = stdm(theimage)^2;	nzsz = gaborszpix;		% make file names	found = 0;	loc = 1;	while ~found		filename = [name,num2str(loc),'nzlocÄ',num2str(gaborcpd),'.dat'];		if ~(exist(filename)==2)			found = 1;		else			loc = loc+1;		end	end		% the stimulus levels to test	for i=1:numnoiselevels				% shifts the levels by 'numshift' in log space		shiftfactor = numshift*(log10(approxthresh(i)*10^(logrange/2))-log10(approxthresh(i)/10^(logrange/2)))/(numstimlevels-1);		% creates log spaces stimulus levels according to 'logrange'		stimlevels(:,i) = logspace(log10(approxthresh(i)./10^(logrange/2))+shiftfactor,log10(approxthresh(i).*10^(logrange/2))+shiftfactor,numstimlevels)';	end		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'noise location experiment');		savecommand(fwid,vars2str(mainscrs,maxtrials,noiselevels));		savecommand(fwid,vars2str(key1,key2,blocknz,numshift,logrange));		savecommand(fwid,vars2str(calfile,darktime,framert));		savecommand(fwid,vars2str(fixationframes,stimframes,clipnoisestd));		savecommand(fwid,vars2str(vd,screensz,res,bigfontsize));		savecommand(fwid,vars2str(gaborszdeg,gaborcpd,gaborcpw,gaborphz,gabororient));		savecommand(fwid,vars2str(gaborszcm,gaborszpix,gaborcpi));		savecommand(fwid,vars2str(diffnz,samenz));			savecommand(fwid,vars2str(noiselevels));		savecommand(fwid,['trial = 1; sequence = 2; response = 3;',...						  'correct = 4; stimlevel = 5; condition = 6;',...						  'randnstate1 = 7; randnstate2 = 8; rt = 9;',...						  'nztype = 10;']);		savedatetime(fwid);	else		fwid = fopen(filename,'a+');					savedatetime(fwid);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	sound(introsnd);	[newx,newy] = centertext(screens(1),rects(1,:),'Press Any Key To Start',rects(1,end)/2,msgcolor);	flushevents('keyDown');	dummy = getchar;	screen(screens(1),'FillRect',0);	% initialize	sequence = rands([1:2],[1,maxtrials*numstimlevels*numnoiselevels*2]);	totaltrials = maxtrials*numstimlevels*numnoiselevels;	pausetrials = round(totaltrials/4);	counter = 1;		% sequence for same or different noise	nztypesequence = [];	for i = 1:numnoiselevels		nztypesequence = [nztypesequence;shuffle([ones(maxtrials*numstimlevels,1);zeros(maxtrials*numstimlevels,1)])];	end				% if noise levels are to be blocked	if blocknz 		nzorder = randperm(numnoiselevels);	end		% to store the random number seeds and make the trial source	if ~blocknz		trialstring = '';		for i = 1:numnoiselevels			eval(['trialsrc',num2str(i),' = mkconstim(stimlevels(:,',num2str(i),'),inf,',num2str(i),');']);			trialstring = [trialstring,'trialsrc',num2str(i),','];		end		eval(['trialsrc = mktslist(',trialstring(1:end-1),');']);	end					% main loop	levelcounter = 0;		for trial = 1:totaltrials  			% if noise levels are to be blocked		if blocknz & rem(trial,maxtrials*numstimlevels) == 1			levelcounter = levelcounter+1;			eval(['trialsrc = mkconstim(stimlevels(:,',num2str(nzorder(levelcounter)),'),inf,',num2str(levelcounter),');']);		elseif rem(trial,maxtrials*numstimlevels) == 1			levelcounter = levelcounter+1;		end				% get the next stimulus level		[trialsrc,conlevel,id] = gettrial(trialsrc);		% get the current noise level		if blocknz 			currnoiselevel = noiselevels(nzorder(levelcounter));				else				currnoiselevel = noiselevels(id);		end			% get noise seed					seed = randn('state');							% make the the noise fields		currimage = theimage.*sqrt(conlevel/basevar);		nz1=cliprandn(nzsz,2);		nz1=nz1*sqrt(currnoiselevel/std(nz1(:))^2);		if nztypesequence(trial) == diffnz			nz2=cliprandn(nzsz,2);			nz2=nz2*sqrt(currnoiselevel/std(nz2(:))^2);		else			nz2 = nz1;		end		if sequence(trial) == 1			[nz1,clut1] = makeimage(nz1+currimage,cal,msgcolor);			[nz2,clut2] = makeimage(nz2,cal,msgcolor);		else			[nz1,clut1] = makeimage(nz1,cal,msgcolor);			[nz2,clut2] = makeimage(nz2+currimage,cal,msgcolor);		end		screen(offscrPtrs(1),'PutImage',nz1);		screen(offscrPtrs(2),'PutImage',basefixation + randfixation*coinflip(1,.5));		screen(offscrPtrs(3),'PutImage',nz2);		% loop for showing the movie		loop = 	['screen(screens(1),''SetClut'',defclut,0);',...				 'screen(screens(1),''FillRect'',0);',...				 'screen(''CopyWindow'',offscrPtrs(2),screens(1));',...				 'screen(screens(1),''WaitVBL'',fixationframes);',...				 'sndplay(intervalsnd);',...				 'screen(screens(1),''FillRect'',0);',...				 'screen(screens(1),''WaitVBL'',1);',...				 'screen(screens(1),''SetClut'',clut1,0);',...				 'screen(''CopyWindow'',offscrPtrs(1),screens(1));',...				 'screen(screens(1),''WaitVBL'',stimframes);',...				 'screen(screens(1),''SetClut'',defclut,0);',...				 'screen(''CopyWindow'',offscrPtrs(2),screens(1));',...				 'screen(screens(1),''WaitVBL'',fixationframes);',...				 'sndplay(intervalsnd);',...				 'screen(screens(1),''FillRect'',0);',...				 'screen(screens(1),''WaitVBL'',1);',...				 'screen(screens(1),''SetClut'',clut2,0);',...				 'screen(''CopyWindow'',offscrPtrs(3),screens(1));',...				 'screen(screens(1),''WaitVBL'',stimframes);',...				 'screen(screens(1),''SetClut'',defclut,0);',...				 'screen(screens(1),''FillRect'',0);'];					% see if user wants to pause		key = pollpause(screens(1),'0',num2str(totaltrials-counter),500,.25,1,1);				% show the stimuli		eval(loop);		tic;				% get response		[newx,newy] = centertext(screens(1),rects(1,:),'1                   2',rects(1,end)/2,1,45);		flushevents('keyDown');		resp = '9';		while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)			resp = getchar;		end		rt = toc;		if abs(resp)==key1			response = 1;		elseif abs(resp)==key2			response = 2;		elseif isquitkey(resp)			sound(introsnd);			closeall;			return;		end		flushevents('keyDown');							% accuracy		correct = response==sequence(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end			% clear screen		screen(screens(1),'FillRect',0);					% save the data		data = [trial,sequence(trial),response,correct,conlevel,currnoiselevel,seed',rt,nztypesequence(trial)];		fprintf(fwid,'%d\t',data); 		fprintf(fwid,'\n');		trialsrc = telltrial(trialsrc,conlevel,correct);				% pause for a break		if rem(trial,maxtrials*numstimlevels) == 0 & trial>1 & trial<totaltrials			[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. ',num2str(totaltrials-counter),' trials remaining.'],round(rects(1,4)*.4),1);			[newx,newy] = centertext(screens(1),rects(1,:),['Press Any Key To Continue.'],round(rects(1,4)*.6),1);			dummy = getchar;			screen(screens(1),'FillRect',0);		end			% increment		counter = counter+1;							end	% close the screen.	sound(introsnd);	screen CloseAll;		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn