function filename = texture(name,stimtype,mainscrs,maxtrials,numstim,noiselevels,approxthresh,numsessions,numstimlevels,numshift,logrange,nztype,learningfactor)% function texture(name,stimtype,mainscrs,maxtrials,numstim,noiselevels,approxthresh,numsessions,numstimlevels,numshift,logrange,nztype)%% finds thresholds in the noise masking experiment% uses method of constant stimuli% 'name' is the name the subject, in intials% 'stimtype' is the type of stimulus to be shown% ('t1'=texture set 1;'t2'=texture set 2;) % default screen is 1. default number of trials is 35.%% Sept 18 1998  JMG  U of Toronto Vision Lab% the name of the file containing the initial thresholdif nargin > 1	% change directories to the main folder	cf;	jg home;			% defaults	defarg('mainscrs',1);	defarg('maxtrials',35);	defarg('numstim',10);	defarg('noiserange',[1e-4 .0625]);	defarg('numsessions',1);	defarg('numstimlevels',6);	defarg('rotation','');	defarg('numshift',0);	defarg('logrange',2);	defarg('approxthresh',2.5e-4);	defarg('nztype','');	defarg('learningfactor',[]);		% stimulus and noise levels	if ~exist('noiselevels','var')		numnoiselevels = 7;	else		numnoiselevels = length(noiselevels);	end	% the stimulus levels to test	if ~exist('noiselevels','var')		noiselevels = logspace(log10(noiserange(1)),log10(noiserange(2)),numnoiselevels);		end	% error checking	if length(approxthresh) < numnoiselevels		printstr('number of noise levels and threshold estimates do not match.');		return;	end		% constants	pauseduration = .5;	key1 = abs('1');	key2 = abs('2');	fileshareoff = 1;	calfile = 'fred.ddf';	darktime = 120;	basefixation = ones(4)*70;	randfixation = ones(4)*120;	msgcolor = 190;	framert = 67;	vd = 114;	screensz = [24 18];	res = [640  480];			% make sounds	introsnd=makesnd(150,.2,.95);	corrsnd=makesnd(600,.09,.65);	wrongsnd=makesnd(200,.09,.8);		% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[msgcolor msgcolor msgcolor];	[screens,rects] = openscreens(mainscrs,tempCLUT);	screen(screens(1),'WindowToFront')	screen(screens(1),'Preference','SetClutWaitVBL',1);	screen(screens(1),'Preference','WaitForVBLInterrupt',1);		[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Adaptation',rects(1,end)-50,1);	tic;	% get the calibration data	[cal1] = getddf(calfile);	% hide the cursor;	hidecursor;	% load the stimulus file. stimuli are stored in the structure 'images'.	if lower(stimtype) == 'n1'		load('NoiseStruct1');	elseif lower(stimtype) == 'n2'		load('NoiseStruct2');	end	names = fieldnames(images);	numimages = length(names);		% error checking	if length(showstim) > numstim | sum(showstim>numimages)		printstr('number of stimuli and requested stimuli do not match.');		return;	end			% get requested images	if numimages ~= numstim				if numimages < numstim						error('Not enough images.')			return;		else			images = rmfield(images,names(setdiff([1:numimages],showstim)));		end	end	names = fieldnames(images);	eval(['imagesz = size(images.',names{1},');']);	nzsz = imagesz;		% the variance of all images is the same	eval(['basevar = std(images.',names{1},'(:))^2;']);	% duration and stimulus location	duration = .5;	imagerect = [];		% make file names	found = 0;	loc = 1;	while ~found		if numsessions > 1			filename = [name,num2str(loc),'texturecon',upper(nztype),upper(stimtype),'.dat'];		else			filename = [name,num2str(loc),'texture',upper(nztype),upper(stimtype),'.dat'];		end		if ~(exist(filename)==2)			found = 1;		else			loc = loc+1;		end	end		% the stimulus levels to test	for i=1:numnoiselevels		shiftfactor = numshift*(log10(approxthresh(i)*10^(logrange/2))-log10(approxthresh(i)/10^(logrange/2)))/(numstimlevels-1);		stimlevels(:,i) = logspace(log10(approxthresh(i)./10^(logrange/2))+shiftfactor,log10(approxthresh(i).*10^(logrange/2))+shiftfactor,numstimlevels)';	end	% make the selection window	thumbsz = 100; 	coords = getcoords(thumbsz,numstim,rects,20);	select = mkselectwin(coords,thumbsz/imagesz(1),rects,images);	[select,selectclut] = makeimage(select,cal1);		% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'eqnoise experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecomment(fwid,['image names: ',strcat(names{1:end})]);		savecommand(fwid,['learningfactor = [',num2str(learningfactor),'];']);		savecommand(fwid,['showstim = [',num2str(showstim),'];']);		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),']; gam = ',num2str(1/numstim),';']);		savecommand(fwid,['stimtype = 'quotestring(stimtype),'; duration = ',num2str(duration),'; darktime = ',num2str(darktime),';trials = ',num2str(maxtrials),';']);		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; condition = 6; rt = 7; randnstate1 = 8; randnstate2 = 9;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');					savedatetime(fwid);	end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	sound(introsnd);	screen(screens(1),'SetClut',selectclut,0);	screen(screens(1),'PutImage',select);	[newx,newy] = centertext(screens(1),rects(1,:),'Click the Mouse To Start',rects(1,end)/2,msgcolor);	flushevents('mouseDown');	[clicks,x,y] = GetClicks(screens(1));	screen(screens(1),'FillRect',0);	% initialize	sequence = rands([1:numstim],[1,maxtrials*numstimlevels*numnoiselevels]);	conlevel = zeros(size(sequence));	id = zeros(size(sequence));		% for the responses	responses = zeros([length(sequence),numsessions]);	correct = responses;	totaltrials = maxtrials*numstimlevels*numnoiselevels*numsessions;	pausetrials = round(totaltrials/4);	counter = 1;			for session = 1:numsessions				% to store the random number seeds and make the trial source		if session == 1			seeds = {};			trialstring = '';			for i = 1:numnoiselevels				eval(['trialsrc',num2str(i),' = mkconstim(stimlevels(:,',num2str(i),'),inf,',num2str(i),');']);				trialstring = [trialstring,'trialsrc',num2str(i),','];			end			eval(['trialsrc = mktslist(',trialstring(1:end-1),');']);		else			savecomment(fwid,['session #',num2str(session)]);			savedatetime(fwid);		end				% main loop		for trial = 1:totaltrials/numsessions  					if session == 1				% get the next stimulus level				[trialsrc,conlevel(trial),id(trial)] = gettrial(trialsrc);			end						% make the image			if session == 1				seeds{trial} = randn('state');			else				randn('state',seeds{trial});			end						nz=cliprandn(nzsz);					nz=nz*sqrt(noiselevels(id(trial))/std(nz(:))^2);						eval(['currimage = images.',names{sequence(trial)},'.*sqrt(conlevel(trial)/basevar) + nz;']);			[currimage,CLUT]=makeimage(currimage,cal1);			% fixation			screen(screens(1),'SetClut',selectclut,0);			screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));									% wait for mouse click						[clicks,x,y] = getclicks(screens(1));			% if the user double clicked, show the # of remaining trials			% wait for another click to proceed with next trial			if clicks > 1							screen(screens(1),'SetClut',selectclut,0);				screen(screens(1),'FillRect',0);				[newx,newy] = centertext(screens(1),rects(1,:),num2str(totaltrials-counter),rects(1,4)/2,210);				[clicks,x,y] = getclicks(screens(1));				screen(screens(1),'FillRect',0);				screen(screens(1),'PutImage',basefixation + randfixation*coinflip(1,.5));								waitsecs(1);			end								% present the image			screen(screens(1),'SetClut',CLUT,0);			screen(screens(1),'PutImage',currimage,imagerect);			waitsecs(duration);			screen(screens(1),'FillRect',0);			screen(screens(1),'SetClut',selectclut,0);			tic;							% present the selection window			screen(screens(1),'PutImage',select);			responses(trial,session) = selectimage(coords,[0,0,10,10],screens(1));			rt = toc;			screen(screens(1),'FillRect',0);			% quit?			if responses(trial,session) < 1				% close the screen.				sound(introsnd);				screen CloseAll;				% close the file				fclose(fwid);									return;			end						% accuracy			correct(trial,session)=sequence(trial)==responses(trial,session);			if correct(trial,session)				sound(corrsnd);			else				sound(wrongsnd);			end					% save the data			data=[trial,showstim(sequence(trial)),showstim(responses(trial,session)),correct(trial,session),conlevel(trial),noiselevels(id(trial)),rt];			fprintf(fwid,'%d\t',data); 			fprintf(fwid,'%g\t',data); 			fprintf(fwid,'%.0f\t',(seeds{trial})');			fprintf(fwid,'\n');			if session == 1				% update trial source				trialsrc = telltrial(trialsrc,conlevel(trial),correct(trial,session));			end						% pause for a break			if rem(trial,pausetrials) == 0 & trial*session<totaltrials				[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. ',num2str(totaltrials-counter),' trials remaining.'],round(rects(1,4)*.4),msgcolor);				[newx,newy] = centertext(screens(1),rects(1,:),['Click the Mouse to Continue.'],round(rects(1,4)*.6),msgcolor);				[clicks,x,y] = getclicks(screens(1));				screen(screens(1),'FillRect',0);			end					% increment			counter = counter+1;					end					end	% close the screen.	sound(introsnd);	screen CloseAll;		% close the file	fclose(fwid);	else		printstr('Not enough input arguments.')endreturn