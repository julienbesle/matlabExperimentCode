function domixedmet(showconds,pc,gam,delta,islog,plottitle,stimlabel,conditionlabel,file,folder)% function = dopsymet(showconds,pc,gam,delta,islog,plottitle,stimlabel,conditionlabel,file,folder)%% fit a psychometric function to data.% reads a data file that is of the format% expected by the function 'readdata'. some% of the variables referenced in the main program are% stored in the data file and put into the workspace upon% reading. They are:%% 	stimlevel: the stimulus levels%	correct:   the corresponding correct/incorrect booleans%	%   condition: the condition ( if multiple conditions are stored)%% other variables are also stored in the file, but% are given default values if not present. they are:%%	pc: 			percent correct threshold (default 75%)%   gam: 			guessing parameter for weibull fit (default .5)%	delta:			error parameter for weibull fit (default .01)%   initialalpha: 	threshold parameter for weibull fit%	initialbeta:	slope parameter for weibull fit%% a plot is made with error bars, fitted function, threshold % stimulus value, and the number of trials per stimulus level% the user is also given an option to save the fitted threshold% and paramters as comments and commands to the end of the data file.%% in cases where there are mutiple conditions (and the variable% 'condition' is stored in the data file), each condition is% plotted and a psychophysical function summarizes the thresholds% across conditions.%% September 18, 1998   JMG% look for file and folder namesif ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');endif ~exist('folder','var')	folder = pwd;endif file		% change working directory	cd(folder);		% the name of the x-axis	conditionlabel = 'Noise Contrast Variance';	stimlabel = 'Signal Contrast Variance';		% deafults	defarg('pc',.5);	defarg('gam',.5);	defarg('delta',.01);	defarg('islog',1);	defarg('stimlabel','Stimulus Level');	defarg('plottitle',upper(file(1:findstr('.',file)-1)));	defarg('conditionlabel','Condition');	defbeta = .5;	pooled = 'n';	nbins = 10;		% get data	alldata = readdata(file,folder);			% prompt the user for parameters 	resp=inputdlg({'Percent Correct: ','Gamma: ','Initial Beta:','Pool into bins (y/n)?','If so, # of bins:'},'Set Parameters',1,{pc,gam,defbeta,pooled,nbins});	if~isempty(resp),		pc=str2num(resp{1});		gam=str2num(resp{2});		defbeta=str2num(resp{3});		pooled = lower(resp{4});		nbins = str2num(resp{5});		end	% new file name	period=findstr(file,'.');	if isempty(period)==0,		newfile=file(1:period-1);	else		newfile=file;	end	[newfile,newfolder] = uiputfile([newfile,'.psy'],'Save Results As');		if ~newfile		return;	else		fwid = fopen([newfolder,newfile],'w+');		savedatetime(fwid);	end	% flag for pooling	if strcmp(pooled,'y')		pooled = 1;	else		pooled = 0;	end	% number of stimulus types	numstimtypes = length(rotation);		for stimtypecounter = 1:numstimtypes			% get relevant data		datalocs = find(alldata(:,stimrotation)==rotation(stimtypecounter) & alldata(:,stimpolarity)==polarity(stimtypecounter));		data = alldata(datalocs,:);		% strings for labels				if polarity(stimtypecounter)==1			polaritystring = 'pos';		else			polaritystring = 'neg';		end			if rotation(stimtypecounter)==1			rotationstring = '0';		else			rotationstring = '180';		end				% varstring		varstring = [file(1:4),polaritystring,rotationstring];		varstringcell{stimtypecounter} = varstring; 				% initialize		levelsmatrix =[];		pcmatrix = [];		wtmatrix = [];		ntrialsmatrix = [];		% the conditions		conditions = unique(data(:,condition));		numconditions = length(conditions);		defarg('showconds', [1:numconditions]);		showconds = sort(unique(showconds));				for i =1:length(showconds)						% Returns matrix with rows of form [ level proportion_correct ntrials stderr ]			locs = find(data(:,condition)==conditions(showconds(i)));						% get the emprical function. pool under certain circumstances			empfn = emppsymet([data(locs,stimlevel),data(locs,correct)],1,pooled,nbins);						% get data for later			eval(['levelsmatrix.s',num2str(i),' = empfn(:,1)'';']);			eval(['ntrialsmatrix.s',num2str(i),' = empfn(:,3)'';']);			eval(['pcmatrix.s',num2str(i),' = empfn(:,2)'';']);			eval(['wtmatrix.s',num2str(i),' = empfn(:,4)'';']);						% initial params and defaults				if exist('initialalpha','var') & exist('initialbeta','var')				init = [initialalpha,initialbeta];			else				init = [empfn(round(size(empfn,1)/2),1) defbeta];			end			% fit and plot			warning off;			[alpha(i), beta(i)] = fitpsymet(empfn,'weibull',init,gam,delta);			figure; [handle,thresh(i)] = plotpsymet(empfn,'weibull',[alpha(i), beta(i)],[],pc,gam,delta,islog);			warning on;			% rename x-axis and put a title on graph			xlabel(stimlabel);			title([varstring,'; ',conditionlabel,' = ',num2str(conditions(showconds(i)))]);			drawnow;					end			if 0		% plot psychophysical function		handle = figure;		handle = semilogy(conditions(showconds),thresh,'r*-');		xlabel(conditionlabel);		ylabel(['Threshold ',stimlabel]);		title(varstring);		drawnow;		end			% save all threshold estimates for final summary		allthresh(stimtypecounter,:) = thresh;				% get slope and intercept estimates if there are only 2 points		if length(thresh == 2)			[slope(stimtypecounter),intercept(stimtypecounter)] = lineparams(conditions,thresh);		end				% save data to file.		savecomment(fwid,' ');		savecomment(fwid,['stimulus type: ',rotationstring,' ',polaritystring]);				savecomment(fwid,'Data: level; ntrials;  pc; stderr');		for i = 1:length(showconds)			eval(['currlevels = levelsmatrix.s',num2str(i),';']);			eval(['currtrials = ntrialsmatrix.s',num2str(i),';']);			eval(['currpc = pcmatrix.s',num2str(i),';']);			eval(['currwt = wtmatrix.s',num2str(i),';']);			savecommand(fwid,[varstring,'levels',num2str(i),' = [',num2str(currlevels),'];']);			savecommand(fwid,[varstring,'trials',num2str(i),' = [',num2str(currtrials),'];']);			savecommand(fwid,[varstring,'pc',num2str(i),' = [',num2str(currpc),'];']);			savecommand(fwid,[varstring,'wt',num2str(i),' = [',num2str(currwt),'];']);		end		savecomment(fwid,['Fitted params and ',num2str(100*pc),'%% correct threshold.']);		savecommand(fwid,[varstring,'threshpc = ',num2str(pc),';']);		savecommand(fwid,[varstring,'conditions = [',num2str(conditions(showconds')'),'];'])		savecommand(fwid,[varstring,'thresh = [',num2str(thresh),'];'])		savecommand(fwid,[varstring,'fitalpha = [',num2str(alpha),'];'])		savecommand(fwid,[varstring,'fitbeta = [',num2str(beta),'];'])		if length(thresh)==2				savecommand(fwid,[varstring,'slope = [',num2str(slope(stimtypecounter)),'];']);				savecommand(fwid,[varstring,'intercept = [',num2str(intercept(stimtypecounter)),'];']);		end		end	% plot all thresholds	figure;	% initialize variables holding information for legend	leg=putlegend;	for i = 1:numstimtypes		handle = semilogy(conditions,allthresh(i,:),[symbolcolor(i),plotsymbol(i),'-']);		leg=putlegend(leg,handle,varstringcell{i});		hold on;	end	putlegend(leg,2);	tilefigs;	% plot slopes and intercepts	figure;	bar(slope);	set(gca,'XTickLabel',varstringcell);	xlabel('Condition');	ylabel('Slope');	figure;		bar(intercept);	set(gca,'XTickLabel',varstringcell);	xlabel('Condition');	ylabel('Intercept');	fclose(fwid);	dat2igor(newfile,newfolder);	edit([newfolder,newfile]);	endreturn