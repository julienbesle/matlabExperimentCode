function [fits] = empboot(trials,type,threshlev,gamma,delta,numits,plotfits)% function [fits] = empboot(trials,type,threshlev,gamma,delta,numits,plotfits)%% bootstrap to find confidence intervals for the parameters and threshold% estimate from dat fit to a psychometric function.%% trials 	-- data matrix of the form [ level proportion_correct ntrials stderr ]% 			   (computed from raw trials and stimulus levels from emppsymet.m)%              if raw trials are passed (i.e., [levels correct]), emppsymet is%              used to compute empircal psychometric function.% type      -- the type of fit ('weibull' or 'norm') (default: 'weibull') % threshlev -- threshold percent correct level to be estimated (default: .75)% gamma 	-- guessing rate (default: .5)% delta		-- error parameter (default: .01)% numits	-- number of simulated functions in bootstrap (default: 500)%% statistics are returned as a struct%% March 09 2000 JMG% defaultsdefarg('type','weibull');defarg('threshlev',.75);defarg('gamma',.5);defarg('delta',.01);defarg('numits',500);defarg('plotfits',1);if nargin,		% raw trials?	if size(trials,2) == 2,		empfn = emppsymet(trials);	else		empfn = trials;	end			% initial estimates	defbeta = 1;	defalpha = empfn(round(size(empfn,1)/2),1);	init = [defalpha defbeta];		% initial minimum fit and plot	[fits.alphamin, fits.betamin] = fitpsymet(empfn,type,init,gamma,delta);	figure;[handle,fits.threshmin] = plotpsymet(empfn,type,[fits.alphamin, fits.betamin],[],threshlev,gamma,delta);	hold on;			% simulations	fprintf(1,'\n\n\n\n\n')	for i = 1:numits,		samples = binornd(empfn(:,3),empfn(:,2))./empfn(:,3);		tempempfn = [empfn(:,1),samples,empfn(:,3:4)];		[simalpha(i), simbeta(i)] = fitpsymet(tempempfn,type,[fits.alphamin, fits.betamin],gamma,delta);			simthresh(i) = getthresh( threshlev, type,[simalpha(i), simbeta(i)], gamma, delta );		if plotfits,			handle = plotpsymet(tempempfn,type,[simalpha(i), simbeta(i)],[],threshlev,gamma,delta);		end		drawnow;		fprintf(1,'\b\b\b\b%4d',i);	end	fprintf(1,'\n');	% return statistics; remove outliers (+/- 2.5 percent)		% alpha	[glocs,blocs] = findoutliers(simalpha,5,2);	fits.alphamean = mean(simalpha(glocs));	fits.alphastd = std(simalpha(glocs),0);	% beta	[glocs,blocs] = findoutliers(simbeta,5,2);	fits.betamean = mean(simbeta(glocs));	fits.betastd = std(simbeta(glocs),0);	% threshold	[glocs,blocs] = findoutliers(simthresh,5,2);	fits.threshmean = mean(simthresh(glocs));	fits.threshstd = std(simthresh(glocs),0);	else	fits = nan;	endreturn%   old code for generating samples from a Gaussian distribution%   binomial distribution is used instead (above)%% 	% create random vectors based on error estimates for each stimulus level% 	samples = randn(size(empfn,1),numits);% 	for i = 1:size(empfn,1),% 		% 		% set variance to that of the standard error of the estimate% 		samples(i,:) = samples(i,:)*sqrt(empfn(i,4)^2/std(samples(i,:))^2);% % 		% set the mean to the emprical percent correct% 		samples(i,:) = samples(i,:)+(empfn(i,2)-mean(samples(i,:)));% % 	end