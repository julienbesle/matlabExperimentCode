function dopsymet(file,folder,skipdlg,doboot,dolinfit,linfittype,numits,pc,gam,delta,showconds,newfile,newfolder)% function dopsymet(file,folder,skipdlg,doboot,dolinfit,numits,pc,gam,delta,showconds,newfile,newfolder)%% fit a psychometric function to data.% reads a data file that is of the format% expected by the function 'readdata'. some% of the variables referenced in the main program are% stored in the data file and put into the workspace upon% reading. They are:%% 	stimlevel: the stimulus levels%	correct:   the corresponding correct/incorrect booleans%	%   condition: the condition%% other variables are also stored in the file, but% are given default values if not present. they are:%%	pc: 			percent correct threshold (default 50%)%   gam: 			guessing parameter for weibull fit (default .5)%	delta:			error parameter for weibull fit (default .01)%   initialalpha: 	threshold parameter for weibull fit%	initialbeta:	slope parameter for weibull fit%% a plot is made with error bars, fitted function, threshold % stimulus value, and the number of trials per stimulus level% the user is also given an option to save the fitted threshold% and paramters as comments and commands to the end of the data file.%% in cases where there are mutiple conditions (and the variable% 'condition' is stored in the data file), each condition is% plotted and a psychophysical function summarizes the thresholds% across conditions.%% September 18, 1998   JMG% look for file and folder namesif ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');	if ~file,		return;	endendif ~exist('folder','var')	folder = pwd;end% convert to cell arrayif ~iscell(file),	temp{1} = file;	file = temp;end% change directoriescd(folder);% deafultsdefarg('skipdlg',0);defarg('gam',.1);defarg('delta',.01);defarg('islog',1);defarg('stimlabel','Stimulus Level');defarg('plottitle',replacechar(rmextension(file{1}),'_','-'));defarg('conditionlabel','Condition');defarg('doboot',1);defarg('numits',250);defarg('dolinfit',1);defarg('linfittype','s');defbeta = 1;% set pc basd on gammaif gam == 0.1;	defarg('pc',0.5);else	defarg('pc',0.75);end% get dataif iscell(file),	data = [];	for i = 1:size(file,2),		temp = readdata(file{i},folder);		data = [data;temp];	endelse	data = readdata(file,folder);end% some data do not have a condition columnif ~exist('condition','var'),	if exist('noisevar','var'),		conditions = noisevar;	else		conditions = 1;	endend% prompt the user for parametersif ~skipdlg,	if ~exist('condition','var'),		if exist('noisevar','var'),			conditions = noisevar;		else			conditions = 1;		end		numconds = 1;	else		numconds = length(unique(data(:,condition)));	end	constrainconds = [];	removeconds = [];	showconds = [];	for i = 1:numconds,		showconds = [showconds,num2str(i)];		if i ~= numconds,			showconds = [showconds,','];		end	end		 	resp=inputdlg({'Percent Correct:','Gamma:','Initial Beta','Bootstraps to thresholds?',...	               'If so, number of iterations:','Linear fit to thresholds?','If so, bootstraps (b) or simple regression (s) ?','Show which conditions (separate by commas)?',...				   'Constrain linear fit to go through points? (separate by commas)',...				   'Remove points from linear fit? (separate by commas)'},...				   'Set Parameters',1,{pc,gam,defbeta,'y',numits,'y','s',showconds,constrainconds,removeconds});	if~isempty(resp),		pc=str2num(resp{1});		gam=str2num(resp{2});		defbeta=str2num(resp{3});		doboot=strcmp(resp{4},'y');		numits=str2num(resp{5});		dolinfit=strcmp(resp{6},'y');		linfittype=lower(resp{7});		showconds=[str2num(resp{8})];		constrainconds=[str2num(resp{9})];		removeconds=[str2num(resp{10})];	else		return;	end		end% initializelevelsmatrix =[];pcmatrix = [];wtmatrix = [];ntrialsmatrix = [];% the conditionsif exist('condition','var'),	conditions = unique(data(:,condition));endnumconditions = length(conditions);defarg('showconds', [1:numconditions]);defarg('constrainconds', []);defarg('removeconds', []);showconds = sort(unique(showconds));		for i =1:length(showconds)		% conditions?	if length(conditions) >1,		locs = find(data(:,condition)==conditions(showconds(i)));	else		locs = [1:size(data,1)]';	end			% get the emprical function	% returns data of form [ level proportion_correct ntrials stderr ]	%if length(locs) <= 1000,	%else	%	empfn = emppsymet([data(locs,stimlevel),data(locs,correct)],1,round(length(locs)/10));	%end			empfn = emppsymet([data(locs,stimlevel),data(locs,correct)]);		% save data for later	eval(['levelsmatrix.s',num2str(i),' = empfn(:,1)'';']);	eval(['ntrialsmatrix.s',num2str(i),' = empfn(:,3)'';']);	eval(['pcmatrix.s',num2str(i),' = empfn(:,2)'';']);	eval(['wtmatrix.s',num2str(i),' = empfn(:,4)'';']);		% fit and plot	warning off;	if doboot,		fits = empboot(empfn,'weibull',pc,gam,delta,numits,0);					alpha(i) = fits.alphamin;		beta(i) = fits.betamin;		thresh(i) = fits.threshmin;		alphamean(i) = fits.alphamean;		betamean(i) = fits.betamean;		threshmean(i) = fits.threshmean;		alphastd(i) = fits.alphastd;		betastd(i) = fits.betastd;		threshstd(i) = fits.threshstd;	else		init = [empfn(round(size(empfn,1)/2),1) defbeta];		[alpha(i), beta(i)] = fitpsymet(empfn,'weibull',init,gam,delta);		thresh(i) = getthresh( pc, 'weibull', [ alpha(i) beta(i) ], gam, delta );		figure; 		handle = plotpsymet(empfn,'weibull',[alpha(i), beta(i)],[],pc,gam,delta,islog);	end			warning on;		% rename x-axis and put a title on graph	xlabel(stimlabel);	title([plottitle,'; ',conditionlabel,' = ',num2str(conditions(showconds(i)))]);	drawnow;	end% plot psychophysical functionif dolinfit,	if doboot,				% constrain fits?			if ~isempty(constrainconds) | ~isempty(removeconds)				% set constrained fit std to small number			tempthreshstd = threshstd;			tempthresh = threshmean;			tempconds = conditions(showconds);			if ~isempty(constrainconds)				tempthreshstd(constrainconds) = threshmean(constrainconds).*(1e-10);			end					% remove unwanted points from fit			if ~isempty(removeconds)				keeplocs = setdiff(showconds,removeconds);				tempthreshstd = tempthreshstd(keeplocs);				tempconds = conditions(keeplocs);				tempthresh = tempthresh(keeplocs);			end					if linfittype == 's',				% get r and F statistics				[ slope, intercept, slopestd, interceptstd, r, F, Fstat ] = linreg(tempconds,tempthresh');				else					% get linear fits by bootstrap and least-squares, weighted by threshold standard errors				[fits] = linboot([tempconds,tempthresh',tempthreshstd'],2500);				slope = fits.slopemean;				slopestd = fits.slopestd;				intercept = fits.interceptmean;				interceptstd = fits.interceptstd;			end		else			if linfittype == 's',				% get r and F statistics				[ slope, intercept, slopestd, interceptstd, r, F, Fstat ] = linreg(conditions(showconds),threshmean');			else				% get linear fits by bootstrap and least-squares, weighted by threshold standard errors				[fits] = linboot([conditions(showconds),threshmean',threshstd'],2500);				slope = fits.slopemean;				slopestd = fits.slopestd;				intercept = fits.interceptmean;				interceptstd = fits.interceptstd;			end		end						% plot		fitcondition = linspace(min(conditions(showconds)),max(conditions(showconds)),1000);		fitdata =  intercept + slope.*fitcondition;		handle = figure;		mainaxis=axes('position',[0.1,0.1,0.8,0.8]);		handle = errorbar(conditions(showconds),threshmean,threshstd,'r*');		set(mainaxis,'XScale','log');		set(mainaxis,'YScale','log');	else		% get r and F statistics		[ slope, intercept, slopestd, interceptstd, r, F, Fstat ] = linreg(conditions(showconds),thresh');					% plot		fitcondition = linspace(min(conditions(showconds)),max(conditions(showconds)),1000);		fitdata =  intercept + slope.*fitcondition;		handle = figure;		mainaxis=axes('position',[0.1,0.1,0.8,0.8]);		handle = loglog(conditions(showconds),thresh,'r*');	end		% plot	hold on;	loglog(fitcondition,fitdata,'b-');	xlabel(conditionlabel);	ylabel(['Threshold ',stimlabel]);	title(plottitle);	else			handle = figure;	mainaxis=axes('position',[0.1,0.1,0.8,0.8]);	if doboot,		handle = errorbar(conditions(showconds),threshmean,threshstd,'r*-');		set(mainaxis,'XScale','log');		set(mainaxis,'YScale','log');	else		handle = loglog(conditions(showconds),thresh,'r*-');		set(mainaxis,'XScale','log');		set(mainaxis,'YScale','log');	end	xlabel(conditionlabel);	ylabel(['Threshold ',stimlabel]);	title(plottitle);end% organize figurestilefigs;% % save data to file.			% if skipdlg & ~exist('newfile','var')% elseif ~exist('newfile','var')% 	[newfile,newfolder] = uiputfile([rmextension(file{1}),'.psy'],'Save Results As');% end% save datanewfile = [rmextension(file{1}),'.psy'];newfolder = folder;if newfile	fwid = fopen([newfolder,newfile],'w+');	savedatetime(fwid);	savecomment(fwid,'Data: level; ntrials;  pc; stderr');	for i = 1:length(showconds)		eval(['currlevels = levelsmatrix.s',num2str(i),';']);		eval(['currtrials = ntrialsmatrix.s',num2str(i),';']);		eval(['currpc = pcmatrix.s',num2str(i),';']);		eval(['currwt = wtmatrix.s',num2str(i),';']);		savecommand(fwid,['levels',num2str(i),' = [',num2str(currlevels),'];']);		savecommand(fwid,['trials',num2str(i),' = [',num2str(currtrials),'];']);		savecommand(fwid,['pc',num2str(i),' = [',num2str(currpc),'];']);		savecommand(fwid,['wt',num2str(i),' = [',num2str(currwt),'];']);	end	savecomment(fwid,['Fitted params and ',num2str(100*pc),'%% correct threshold.']);	savecommand(fwid,['threshpc = ',num2str(pc),';']);	savecommand(fwid,['conditions = [',num2str(conditions(showconds')'),'];'])	savecommand(fwid,['thresh = [',num2str(thresh),'];'])	savecommand(fwid,['fitalpha = [',num2str(alpha),'];'])	savecommand(fwid,['fitbeta = [',num2str(beta),'];'])	if doboot,		savecomment(fwid,['# of iterations for bootstraps: ',num2str(numits)]);		savecommand(fwid,['threshmean = [',num2str(threshmean),'];'])		savecommand(fwid,['fitalphamean = [',num2str(alphamean),'];'])		savecommand(fwid,['fitbetamean = [',num2str(betamean),'];'])		savecommand(fwid,['threshstd = [',num2str(threshstd),'];'])		savecommand(fwid,['fitalphastd = [',num2str(alphastd),'];'])		savecommand(fwid,['fitbetastd = [',num2str(betastd),'];'])	else		savecomment(fwid,['warning: threshmean and threshstd are not based on bootstraps.']);		savecommand(fwid,['threshmean = [',num2str(thresh),'];'])		savecommand(fwid,['threshstd = [',num2str(zeros(size(thresh))),'];'])	end		if dolinfit,		if ~doboot,			savecomment(fwid,'Warning: linear fits are unreliable without threshold bootstraps.');		end				savecommand(fwid,vars2str(slope));		savecommand(fwid,vars2str(intercept));		savecommand(fwid,vars2str(slopestd));		savecommand(fwid,vars2str(interceptstd));		savecommand(fwid,vars2str(r));		savecommand(fwid,vars2str(F));		savecommand(fwid,vars2str(Fstat));	end			fclose(fwid);endreturn