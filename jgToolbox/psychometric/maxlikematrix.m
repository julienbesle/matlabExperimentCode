function [likelihood,alphavector,betavector] = MaxLikeMatrix(values,iscorrect,alpha,beta,gamma,pCorrect,estalpha,estbeta,numPoints)% function [likelihood,alphavector,betavector] = MaxLikeMatrix(values,iscorrect,alpha,beta,gamma,pCorrect,estalpha,estbeta,numPoints)% % returns the log likelihood matrix produced by a range of% alpha and beta in a weibull fit, given the data passed.% user must provide the values of the indepedant variable (values)% and the dependant variable (iscorrect). alpha and beta as% parameters are the maximum likelihood estimate. gamma is the guessing% rate. pCorrect is the percent correct threshold desired. numPoints% is the number of samples for alpha and beta in the likelihood matrix.%% June 1997  JMG  U of T Vision Lab% For computing probabilities. iscorrect = 1-iscorrect;% Caluculate the Likelihood for each combination of alpha and beta.if beta < estbeta	betavector = linspace(beta/10,estbeta*2,numPoints);else	betavector = linspace(estbeta/10,beta*2,numPoints);endif alpha < estalpha	alphavector = linspace(alpha/5,estalpha*5,numPoints);else	alphavector = linspace(estalpha/5,alpha*5,numPoints);end	likelihood = zeros(length(alphavector),length(betavector));for i = 1:length(alphavector)	for k = 1:length(betavector)				% Take the product of the probabilities for each input and alpha-beta-gamma comibination.		%likelihood(i,k) = prod(abs(iscorrect - (1.0 - (1-gamma)*exp(-(values./alphavector(i)).^betavector(k)))));		% This takes the log likelihood. Better for small values. Have to check for log(0).		x = abs(iscorrect - (1.0 - (1-gamma)*exp(-(values./alphavector(i)).^betavector(k))));		zerolocs = find(x==0);		x(zerolocs) = x(zerolocs)+(1e-4);		likelihood(i,k) = sum(log(x));			endendreturn