function dual(showconds,pc,gam,delta,islog,plottitle,stimlabel,conditionlabel,file,folder)% function = dopsymet(showconds,pc,gam,delta,islog,plottitle,stimlabel,conditionlabel,file,folder)%% fit a psychometric function to data.% reads a data file that is of the format% expected by the function 'readdata'. some% of the variables referenced in the main program are% stored in the data file and put into the workspace upon% reading. They are:%% 	stimlevel: the stimulus levels%	correct:   the corresponding correct/incorrect booleans%	%   condition: the condition ( if multiple conditions are stored)%% other variables are also stored in the file, but% are given default values if not present. they are:%%	pc: 			percent correct threshold (default 75%)%   gam: 			guessing parameter for weibull fit (default .5)%	delta:			error parameter for weibull fit (default .01)%   initialalpha: 	threshold parameter for weibull fit%	initialbeta:	slope parameter for weibull fit%% a plot is made with error bars, fitted function, threshold % stimulus value, and the number of trials per stimulus level% the user is also given an option to save the fitted threshold% and paramters as comments and commands to the end of the data file.%% in cases where there are mutiple conditions (and the variable% 'condition' is stored in the data file), each condition is% plotted and a psychophysical function summarizes the thresholds% across conditions.%% September 18, 1998   JMG% look for file and folder namesif ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');endif ~exist('folder','var')	folder = pwd;endif file		% the name of the x-axis	if findstr('samp',file)		if findstr('eff',file)			conditionlabel = 'Proportion of Most Informative Pixels';			stimlabel = 'Contrast Variance';		else			stimlabel = 'Proportion of Most Informative Pixels';		end	elseif findstr('sr',file)		conditionlabel = 'Noise Contrast Variance';		stimlabel = 'Signal Contrast Variance';	elseif findstr('unfilt',file) | findstr('fq',file)		stimlabel = 'Contrast Variance';	end		% deafults	defarg('pc',.793);	defarg('gam',.5);	defarg('delta',.01);	defarg('islog',1);	defarg('stimlabel','Stimulus Level');	defarg('plottitle',upper(file(1:findstr('.',file)-1)));	defarg('conditionlabel','Condition');	defbeta = .5;			% get data	data = readdata(file,folder);		% prompt the user for parameters 	resp=inputdlg({'Percent Correct: ','Gamma: ','Initial Beta'},'Set Parameters',1,{pc,gam,defbeta});	if~isempty(resp),		pc=str2num(resp{1});		gam=str2num(resp{2});		defbeta=str2num(resp{3});	end	% initialize	levelsmatrix =[];	pcmatrix = [];	wtmatrix = [];	ntrialsmatrix = [];	% do this if there is only 1 condition	if ~exist('condition','var')		% Returns matrix with rows of form [ level proportion_correct ntrials stderr ]		empfn = emppsymet([data(:,stimlevel),data(:,correctg)]);		% RT data		timeg = sum(data(:,rtg))/size(data,1);		timec = sum(data(:,rtc))/size(data,1);		timet = sum(data(:,rtc))/size(data,1);		% pc data		pcc = sum(data(:,correctc))/size(data,1);		pct = sum(data(:,correctt))/size(data,1);			% get data for later		i = 1;		eval(['levelsmatrix.s',num2str(i),' = empfn(:,1)'';']);		eval(['ntrialsmatrix.s',num2str(i),' = empfn(:,3)'';']);		eval(['pcmatrix.s',num2str(i),' = empfn(:,2)'';']);		eval(['wtmatrix.s',num2str(i),' = empfn(:,4)'';']);				%levelsmatrix = [levelsmatrix,empfn(:,1)];		%ntrialsmatrix = [ntrialsmatrix,empfn(:,3)];		%pcmatrix = [pcmatrix,empfn(:,2)];		%wtmatrix = [wtmatrix,empfn(:,4)];				% initial params and defaults			if exist('initialalpha','var') & exist('initialbeta','var')			init = [initialalpha,initialbeta];		end		defarg('init',[empfn(round(size(empfn,1)/2),1) defbeta]);		% fit and plot		warning off;		[alpha, beta] = fitpsymet(empfn,'weibull',init,gam,delta);		[handle,thresh] = plotpsymet(empfn,'weibull',[alpha, beta],[],pc,gam,delta,islog);		warning on;			% rename x-axis and put a title on graph		xlabel(stimlabel);		title(plottitle);			% save data to file.		period=findstr(file,'.');		if isempty(period)==0,			file=file(1:period-1);		end		[file,folder] = uiputfile([file,'.psy'],'Save Results As');		if file			fwid = fopen([folder,file],'a+');			savedatetime(fwid);			savecomment(fwid,['Fitted params and ',num2str(100*pc),'%% correct threshold.']);			savecommand(fwid,['threshpc = ',num2str(pc),'; thresh = ',num2str(thresh),'; fitalpha = ',num2str(alpha),';fitbeta = ',num2str(beta),';'])			fclose(fwid);			end		showconds = 1;		% if there are several conditions, plot functions and summary psychophysical function	else		% the conditions		conditions = unique(data(:,condition));		numconditions = length(conditions);		defarg('showconds', [1:numconditions]);		showconds = sort(unique(showconds));				for i =1:length(showconds)						% Returns matrix with rows of form [ level proportion_correct ntrials stderr ]			locs = find(data(:,condition)==conditions(showconds(i)));						% get the emprical function. pool under certain circumstances			if findstr('sr',file)				empfn = emppsymet([data(locs,stimlevel),data(locs,correctg)],1,1);			else				empfn = emppsymet([data(locs,stimlevel),data(locs,correctg)]);			end					% RT data			timeg(i) = sum(data(locs,rtg))/size(locs,1);			timec(i) = sum(data(locs,rtc))/size(locs,1);			timet(i) = sum(data(locs,rtc))/size(locs,1);			% pc data			pcc(i) = (sum(data(locs,correctc))/size(locs,1))*100;			pct(i) = (sum(data(locs,correctt))/size(locs,1))*100;					% get data for later			eval(['levelsmatrix.s',num2str(i),' = empfn(:,1)'';']);			eval(['ntrialsmatrix.s',num2str(i),' = empfn(:,3)'';']);			eval(['pcmatrix.s',num2str(i),' = empfn(:,2)'';']);			eval(['wtmatrix.s',num2str(i),' = empfn(:,4)'';']);						% initial params and defaults				if exist('initialalpha','var') & exist('initialbeta','var')				init = [initialalpha,initialbeta];			else				init = [empfn(round(size(empfn,1)/2),1) defbeta];			end			% fit and plot			warning off;			[alpha(i), beta(i)] = fitpsymet(empfn,'weibull',init,gam,delta);			figure; [handle,thresh(i)] = plotpsymet(empfn,'weibull',[alpha(i), beta(i)],[],pc,gam,delta,islog);			warning on;			% rename x-axis and put a title on graph			xlabel(stimlabel);			title([plottitle,'; ',conditionlabel,' = ',num2str(conditions(showconds(i)))]);			drawnow;					end			% zero condition case		dispconditions = conditions(showconds);		zeroloc = find(dispconditions == 0);		if zeroloc			dispconditions(zeroloc) =10000000;			dispconditions(zeroloc) = min(dispconditions)/10;		end			%data = [conditions',thresh];		%errfn = inline('sum( ((x(1)*(P1(:,1) + x(2))) - P1(:,2)).^2)',1);		%options=foptions;		%options(14)=10000;		%fit = fmins(errfn,initparams,options,[],data);		% fit psychophysical function		if 0		init(1) = (max(thresh)-min(thresh))/(max(conditions)-min(conditions));		init(2) = init(1)*min(thresh);		fit = noisefitfn([conditions',thresh], init );				k=fit(1);		Ni=fit(2);		Ne = linspace(dispconditions(1),dispconditions(end),1000);		E = k*(Ne + Ni);		end			% plot psychophysical function		handle = figure;		handle = loglog(dispconditions,thresh,'bo-');		xlabel(conditionlabel);		ylabel(['Threshold ',stimlabel]);		title(plottitle);				% plot RT functions		hRT = figure;		legRT=putlegend;		color = 'rgb';		for j = 1:3			if ~ismember(responseorder(j),responsesuppress)				eval(['hRT=semilogx(dispconditions,time',responseorder(j),'(showconds),''',color(j),'*-'');']);				legRT=putlegend(legRT,hRT,responseorder(j));			end			hold on;		end		xlabel(conditionlabel);		ylabel('RT (seconds)');		graphrange(min(dispconditions),max(dispconditions),0,3);		title(plottitle);		putlegend(legRT,2);				% plot pc functions		if ~ismember('c',responsesuppress) | ~ismember('t',responsesuppress)			hPC = figure;			legPC=putlegend;			set(axes,'XScale','log');			color = 'rgb';			for j = 1:3				if ~ismember(responseorder(j),responsesuppress) & responseorder(j)~= 'g'					eval(['hPC=semilogx(dispconditions,pc',responseorder(j),'(showconds),''',color(j),'*-'');']);					legPC=putlegend(legPC,hPC,responseorder(j));					hold on;				end			end			xlabel(conditionlabel);			ylabel('Percent Correct');			graphrange(min(dispconditions),max(dispconditions),0,100);			title(plottitle);			putlegend(legPC,2);		end				tilefigs;				% save data to file.					period=findstr(file,'.');		if isempty(period)==0,			newfile=file(1:period-1);		else			newfile=file;		end		[newfile,newfolder] = uiputfile([newfile,'.psy'],'Save Results As');		if newfile			fwid = fopen([newfolder,newfile],'w+');			savedatetime(fwid);			savecomment(fwid,'Data: level; ntrials;  pc; stderr');			for i = 1:length(showconds)				eval(['currlevels = levelsmatrix.s',num2str(i),';']);				eval(['currtrials = ntrialsmatrix.s',num2str(i),';']);				eval(['currpc = pcmatrix.s',num2str(i),';']);				eval(['currwt = wtmatrix.s',num2str(i),';']);				savecommand(fwid,['levels',num2str(i),' = [',num2str(currlevels),'];']);				savecommand(fwid,['trials',num2str(i),' = [',num2str(currtrials),'];']);				savecommand(fwid,['pc',num2str(i),' = [',num2str(currpc),'];']);				savecommand(fwid,['wt',num2str(i),' = [',num2str(currwt),'];']);			end						savecomment(fwid,['Reaction times.']);			for j = 1:3				if ~ismember(responseorder(j),responsesuppress)					eval(['currRT = time',responseorder(j),';']);					savecommand(fwid,['rt',responseorder(j),' = [',num2str(currRT),'];']);				end			end					savecomment(fwid,['Dual task accuracy.']);			for j = 1:3				if ~ismember(responseorder(j),responsesuppress) & responseorder(j) ~= 'g'					eval(['currPC = pc',responseorder(j),';']);					savecommand(fwid,['pc',responseorder(j),' = [',num2str(currPC),'];']);				end			end						savecomment(fwid,['Fitted params and ',num2str(100*pc),'%% correct threshold.']);			savecommand(fwid,['threshpc = ',num2str(pc),';']);			savecommand(fwid,['conditions = [',num2str(conditions(showconds')'),'];'])			savecommand(fwid,['thresh = [',num2str(thresh),'];'])			savecommand(fwid,['fitalpha = [',num2str(alpha),'];'])			savecommand(fwid,['fitbeta = [',num2str(beta),'];'])			fclose(fwid);			dat2igor(newfile,newfolder);			edit([newfolder,newfile]);			end	end	endreturn