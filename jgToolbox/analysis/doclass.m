function [class,classtol,rawclass] = doclass(file,folder,filesuppress,dispsuppress,inducesuppress,tol)% function [class,classtol,rawclass] = doclass(file,folder,filesuppress,dispsuppress,inducesuppress,tol)defarg('folder',pwd);defarg('filesuppress',0);defarg('dispsuppress',0);defarg('inducesuppress',1);defarg('tol',0.01);		% tol = 1.96 --> p =.05; tol = 2.58 --> p = .01% compute number of standard deviationtol = abs(norminv(tol/2,0,1));if ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');end% main loopif file		% get the data	data = readdata(file,folder);	period=findstr(file,'.');	if isempty(period)==0,		file=[file(1:period-1),'src.mat'];	end	cd(folder);	eval(['load ',file]);	kernal = [1 2 3 2 1];	kernal = kernal'*kernal;	% summed noise files s1r1 s1r2 s2r1 s2r2 are stored in 'src.mat' file	s1r1trials = sum(data(:,sequence)==1 & data(:,response)==1);	s1r2trials = sum(data(:,sequence)==1 & data(:,response)==2);	s2r1trials = sum(data(:,sequence)==2 & data(:,response)==1);	s2r2trials = sum(data(:,sequence)==2 & data(:,response)==2);	fprintf(1,['Total trials = ',num2str(size(data,1)),'.\n']);		% divide by # of trials	s1r1 = s1r1/s1r1trials;	s1r2 = s1r2/s1r2trials;	s2r1 = s2r1/s2r1trials;	s2r2 = s2r2/s2r2trials;	% reverse polarity ?	if exist('polarity','var'),		if strcmp(polarity,'neg'),			s1r1 = s1r1.*(-1);			s1r2 = s1r2.*(-1);			s2r1 = s2r1.*(-1);			s2r2 = s2r2.*(-1);					end	end	% flip ?	if exist('orientation','var'),		if orientation == 180,			s1r1 = rot90(rot90(s1r1));			s1r2 = rot90(rot90(s1r2));			s2r1 = rot90(rot90(s2r1));			s2r2 = rot90(rot90(s2r2));					end	end		% smoothed image	rawclass = s1r2-s1r1+s2r2-s2r1;	class = conv2(rawclass,kernal,'same');	% statistical image	classtol = class;	squarekernal = sqrt(sum(sum(kernal.^2)));	s1r1var = noisevar/s1r1trials;	s1r2var = noisevar/s1r2trials;	s2r1var = noisevar/s2r1trials;	s2r2var = noisevar/s2r2trials;	classvar = s1r1var + s1r2var + s2r1var + s2r2var;	rawstd = sqrt(classvar);	smoothstd = squarekernal*sqrt(classvar);	classmaxval = tol*smoothstd;			%classmaxval = tol*std(classtol(:));			tollocs = find(abs(classtol)<classmaxval);	postollocs = find(classtol>classmaxval);	negtollocs = find(classtol<-classmaxval);	classtol(tollocs) = .5;	classtol(postollocs) = 1;	classtol(negtollocs) = 0;	% compute # of significant pixels	numsigpix = length(postollocs) + length(negtollocs);	printstr(['Percentage significant pixels = ',num2str(numsigpix/length(s1r1(:))*100),'.']); 		% scale	numstd = 6; 	classmean = mean(class(:)); 	classstd = std(class(:));	normclass = class/classstd;% 	pclass = normpdf(class([postollocs(:);negtollocs(:)])/smoothstd,0,1); 	pclass = normcdf(-abs(class([postollocs(:);negtollocs(:)])/smoothstd),0,1);  	class = (class-classmean)./(numstd*classstd) + .5; 		class(find(class > 1)) = 1;	class(find(class < 0)) = 0;	normclass(find(class > 1)) = 1;	normclass(find(class < 0)) = 0;% 	classmean = mean(class(:));% 	class = scale(class-classmean + .5);		% for kaniza	if exist('stimtype','var'),		if strcmp(stimtype,'amodal')			ringp = .2;		else			ringp = 0;		end				if ~inducesuppress			kaniza = mkfatthinmat(kansz, induceRad, support,0,ringp, .5,-1,0,control,0,0);			classvar = .025;			tolvar = .01;			kanvar = std(kaniza(:))^2;			kaniza = kaniza*sqrt(classvar/kanvar);			kanizatol = kaniza*sqrt(tolvar/kanvar);		else			kaniza = zeros(kansz);			kanizatol = zeros(kansz);		end				% display		class = scale(class+kaniza);		classtol = scale(classtol+kanizatol);	end	% correlation w/ ideal?	if exist('imagename1','var') & exist('imagename2','var'),		if findstr('face',file),			load facestruct;		elseif findstr('letter',file),			load letterstruct;		end		names = fieldnames(images);		eval(['imagesize = size(images.',names{1},',1);']);		if size(rawclass,1) ~= imagesize			for i = 1:length(names)				eval(['images.',names{i},' = imresize(images.',names{i},',size(rawclass,1)/imagesize);']);			end			images = avemag(images);		end		eval(['image1 = images.',imagename1,';']);		eval(['image2 = images.',imagename2,';']);				% ideal template		idealtemp = image2-image1;				% normalize		% set template to unit energy		idealtemp = idealtemp./sqrt(sum(sum(idealtemp.^2)));				% set raw classification image to unit variance		rawclassvar = (stdm(rawclass))^2;		normrawclass = rawclass.*sqrt(1/rawclassvar);		crosscorr = sum(sum(idealtemp.*normrawclass));		crosscorrp = normcdf(-crosscorr,0,1);				% display		printstr(['cross-correlation = ',num2str(crosscorr),' ;  p = ',num2str(crosscorrp),'.']);			end	% display	figure;	subplot(2,2,1);	imshow(scale(rawclass));	subplot(2,2,2);		imshow(class);	subplot(2,2,3);	imshow(classtol); 	subplot(2,2,4); 	hist(pclass(:),100);	xlabel('P-Level');	ylabel('Number of Pixels');	graphrange(1e-6, 0.01);	%set(gca,'XScale','log');		drawnow;	% save ?	if ~filesuppress			% write to file		period=findstr(file,'.');		newfile=[file(1:period-4),'class'];		if exist('crosscorr','var'),			save([folder,newfile],'s1r1','s1r2','s2r1','s2r2','data','class','classtol','rawclass','numsigpix','normclass','pclass','normrawclass','idealtemp','crosscorr','crosscorrp');		else			save([folder,newfile],'s1r1','s1r2','s2r1','s2r2','data','class','classtol','rawclass','numsigpix','normclass','pclass');		end		%[newfile,newfolder] = uiputfile([file,'class.mat'],'Save File As');		%if newfile				%save([newfolder,newfile],'class','classtol');		%end	end	end