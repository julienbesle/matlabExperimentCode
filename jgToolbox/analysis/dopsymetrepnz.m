function dopsymetrepnz(file,folder,skipdlg,doboot,dolinfit,numits,pc,gam,delta,showconds,newfile,newfolder)% function dopsymetrepnz(file,folder,skipdlg,doboot,dolinfit,numits,pc,gam,delta,showconds,newfile,newfolder)%% fit a psychometric function to data.% reads a data file that is of the format% expected by the function 'readdata'. some% of the variables referenced in the main program are% stored in the data file and put into the workspace upon% reading. They are:%% 	stimlevel: the stimulus levels%	correct:   the corresponding correct/incorrect booleans%	%   condition: the condition%% other variables are also stored in the file, but% are given default values if not present. they are:%%	pc: 			percent correct threshold (default 50%)%   gam: 			guessing parameter for weibull fit (default .5)%	delta:			error parameter for weibull fit (default .01)%   initialalpha: 	threshold parameter for weibull fit%	initialbeta:	slope parameter for weibull fit%% a plot is made with error bars, fitted function, threshold % stimulus value, and the number of trials per stimulus level% the user is also given an option to save the fitted threshold% and paramters as comments and commands to the end of the data file.%% in cases where there are mutiple conditions (and the variable% 'condition' is stored in the data file), each condition is% plotted and a psychophysical function summarizes the thresholds% across conditions.%% September 18, 1998   JMG% look for file and folder namesif ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');	if ~file,		return;	endendif ~exist('folder','var')	folder = pwd;end% convert to cell arrayif ~iscell(file),	temp{1} = file;	file = temp;end% change directoriescd(folder);% deafultsdefarg('skipdlg',0);defarg('pc',.5);defarg('gam',.1);defarg('delta',.01);defarg('islog',1);defarg('stimlabel','Stimulus Level');defarg('plottitle',replacechar(rmextension(file{1}),'_','-'));defarg('conditionlabel','Condition');defarg('doboot',1);defarg('numits',250);defarg('numlinits',500);defarg('dolinfit',1);defbeta = 1;	% get dataif iscell(file),	alldata = [];	for i = 1:size(file,2),		temp = readdata(file{i},folder);		alldata = [alldata;temp];	endelse	alldata = readdata(file,folder);end% loof for flag for same vs different noises% *diffnz = [0];samenz = [1];% *nztype = [10];% if it is not there, send data to regular dopsymet functionif ~exist('nztype','var'),	dopsymet(file,folder,skipdlg,doboot,dolinfit,numits,pc,gam,delta,showconds,newfile,newfolder);	return;end	% prompt the user for parametersif ~skipdlg,	numconds = length(unique(alldata(:,condition)));	showconds = [];	for i = 1:numconds,		showconds = [showconds,num2str(i)];		if i ~= numconds,			showconds = [showconds,','];		end	end 	resp=inputdlg({'Percent Correct:','Gamma:','Initial Beta','Bootstraps to thresholds?',...	               'If so, number of iterations:','Linear fit to thresholds?','Show which conditions?'},...				   'Set Parameters',1,{pc,gam,defbeta,'y',numits,'y',showconds});	if~isempty(resp),		pc=str2num(resp{1});		gam=str2num(resp{2});		defbeta=str2num(resp{3});		doboot=strcmp(resp{4},'y');		numits=str2num(resp{5});		dolinfit=strcmp(resp{6},'y');		showconds=[str2num(resp{7})];	endend% the two conditionsfor condcounter = 1:2,			% get the subdata	% *diffnz = [0];samenz = [1];	% *nztype = [10];		if condcounter == 1,		currcondition = 'diff';		datalocs = find(alldata(:,nztype)==0);		data = alldata(datalocs,:);	else		datalocs = find(alldata(:,nztype)==1);		data = alldata(datalocs,:);		currcondition = 'same';	end		% initialize	levelsmatrix =[];	pcmatrix = [];	wtmatrix = [];	ntrialsmatrix = [];		% the conditions	conditions = unique(data(:,condition));	numconditions = length(conditions);	defarg('showconds', [1:numconditions]);	showconds = sort(unique(showconds));			for i = 1:length(showconds)				% Returns matrix with rows of form [ level proportion_correct ntrials stderr ]		locs = find(data(:,condition)==conditions(showconds(i)));				% get the emprical function		empfn = emppsymet([data(locs,stimlevel),data(locs,correct)]);			% save data for later		eval(['levelsmatrix.s',num2str(i),' = empfn(:,1)'';']);		eval(['ntrialsmatrix.s',num2str(i),' = empfn(:,3)'';']);		eval(['pcmatrix.s',num2str(i),' = empfn(:,2)'';']);		eval(['wtmatrix.s',num2str(i),' = empfn(:,4)'';']);				% fit and plot		warning off;		if doboot,			fits = empboot(empfn,'weibull',pc,gam,delta,numits,0);						alpha(i) = fits.alphamin;			beta(i) = fits.betamin;			thresh(i) = fits.threshmin;			alphamean(i) = fits.alphamean;			betamean(i) = fits.betamean;			threshmean(i) = fits.threshmean;			alphastd(i) = fits.alphastd;			betastd(i) = fits.betastd;			threshstd(i) = fits.threshstd;		else			init = [empfn(round(size(empfn,1)/2),1) defbeta];			[alpha(i), beta(i)] = fitpsymet(empfn,'weibull',init,gam,delta);			thresh(i) = getthresh( pc, 'weibull', [ alpha(i) beta(i) ], gam, delta );			figure; 			handle = plotpsymet(empfn,'weibull',[alpha(i), beta(i)],[],pc,gam,delta,islog);		end				warning on;				% rename x-axis and put a title on graph		xlabel(stimlabel);		title([plottitle,'; ',conditionlabel,' = ',num2str(conditions(showconds(i)))]);		drawnow;			end		% plot psychophysical function	if dolinfit,			% convert into energy and noise spectral density		if exist('vd','var') & exist('screensz','var') & exist('res','var') & (exist('szpix','var') | exist('gaborszpix','var')) 			if exist('szpix','var'),				numpix = szpix.^2;				%sigma =  (cpw*(szpix/cpi))/4;							elseif exist('gaborszpix','var'),				numpix = gaborszpix^2;				%sigma =  (gaborcpw*(gaborszpix/gaborcpi))/4;							end		conditions = var2nsd(conditions,screensz,res,vd);		[threshmean] = var2energy(threshmean,numpix,screensz,res,vd);		[threshstd] = var2energy(threshstd,numpix,screensz,res,vd);		end					% get r and F statistics		[ slope, intercept, slopestd, interceptstd, r, F, Fstat ] = linreg(conditions(showconds),threshmean');				% get linear fits by bootstrap and least-squares, weighted by threshold standard errors		[fits] = linboot([conditions(showconds),threshmean',threshstd'],numlinits);		slope = fits.slopemean;		slopestd = fits.slopestd;		intercept = fits.interceptmean;		interceptstd = fits.interceptstd;			% plot		fitcondition = linspace(min(conditions(showconds)),max(conditions(showconds)),1000);		fitdata =  intercept + slope.*fitcondition;		handle = figure;		mainaxis=axes('position',[0.1,0.1,0.8,0.8]);		handle = errorbar(conditions(showconds),threshmean,threshstd,'r*-');		set(mainaxis,'XScale','log');		set(mainaxis,'YScale','log');		hold on;		loglog(fitcondition,fitdata,'b-');		xlabel(conditionlabel);		ylabel(['Threshold ',stimlabel]);		title(plottitle);	else				handle = figure;		mainaxis=axes('position',[0.1,0.1,0.8,0.8]);		if doboot,			handle = errorbar(conditions(showconds),threshmean,threshstd,'r*-');			set(mainaxis,'XScale','log');			set(mainaxis,'YScale','log');		else			handle = loglog(conditions(showconds),threshmean,'r*-');			set(mainaxis,'XScale','log');			set(mainaxis,'YScale','log');		end		xlabel(conditionlabel);		ylabel(['Threshold ',stimlabel]);		title(plottitle);	end	% organize figures	tilefigs;		% save data	newfile = [rmextension(file{1}),'.psy'];	newfolder = folder;	if newfile		if condcounter == 1,			fwid = fopen([newfolder,newfile],'w+');				savedatetime(fwid);			savecomment(fwid,'Data: level; ntrials;  pc; stderr');		else			fwid = fopen([newfolder,newfile],'a+');			end		for i = 1:length(showconds)			eval(['currlevels = levelsmatrix.s',num2str(i),';']);			eval(['currtrials = ntrialsmatrix.s',num2str(i),';']);			eval(['currpc = pcmatrix.s',num2str(i),';']);			eval(['currwt = wtmatrix.s',num2str(i),';']);			savecommand(fwid,[currcondition,'levels',num2str(i),' = [',num2str(currlevels),'];']);			savecommand(fwid,[currcondition,'trials',num2str(i),' = [',num2str(currtrials),'];']);			savecommand(fwid,[currcondition,'pc',num2str(i),' = [',num2str(currpc),'];']);			savecommand(fwid,[currcondition,'wt',num2str(i),' = [',num2str(currwt),'];']);		end		savecomment(fwid,[currcondition,' Noise Fitted params and ',num2str(100*pc),'%% correct threshold.']);		savecommand(fwid,[currcondition,'threshpc = ',num2str(pc),';']);		savecommand(fwid,[currcondition,'conditions = [',num2str(conditions(showconds')'),'];'])		savecommand(fwid,[currcondition,'thresh = [',num2str(thresh),'];'])		savecommand(fwid,[currcondition,'fitalpha = [',num2str(alpha),'];'])		savecommand(fwid,[currcondition,'fitbeta = [',num2str(beta),'];'])		if doboot,			savecomment(fwid,['# of itererations in consistency fits: ',num2str(numlinits)]);			savecommand(fwid,[currcondition,'threshmean = [',num2str(threshmean),'];'])			savecommand(fwid,[currcondition,'fitalphamean = [',num2str(alphamean),'];'])			savecommand(fwid,[currcondition,'fitbetamean = [',num2str(betamean),'];'])			savecommand(fwid,[currcondition,'threshstd = [',num2str(threshstd),'];'])			savecommand(fwid,[currcondition,'fitalphastd = [',num2str(alphastd),'];'])			savecommand(fwid,[currcondition,'fitbetastd = [',num2str(betastd),'];'])		end		if dolinfit,			savecommand(fwid,[currcondition,'slope = [',num2str(slope),'];'])			savecommand(fwid,[currcondition,'intercept = [',num2str(intercept),'];'])			savecommand(fwid,[currcondition,'slopestd = [',num2str(slopestd),'];'])			savecommand(fwid,[currcondition,'interceptstd = [',num2str(interceptstd),'];'])						savecommand(fwid,[currcondition,'r = [',num2str(r),'];'])			savecommand(fwid,[currcondition,'F = [',num2str(F),'];'])			savecommand(fwid,[currcondition,'Fstat = [',num2str(Fstat),'];'])		end				fclose(fwid);	end	endreturn