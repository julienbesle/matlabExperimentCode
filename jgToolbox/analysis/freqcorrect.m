function [freqstruct] = freqcorrect(file,folder);% look for file and folder namesif ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose First File');endif ~exist('folder','var')	folder = pwd;endif file	% for mutiple files	cd(folder)	currfiles = dir('*.dat');	[selectfiles,ok] = dolistdlg(currfiles,'name','Select All Files To Merge:',[160 300],'multiple');	if ~ok		selectfiles = {file};	end	data = [];	for i = 1:size(selectfiles,2)					tempdata = readdata(selectfiles{i},folder);		data = [data;tempdata];	end					% find out the stimulus type	if findstr('f10',lower(selectfiles{1}))		stimtype = 'f10';	elseif findstr('l10',lower(selectfiles{1}))		stimtype = 'l10';	elseif findstr('t10',lower(selectfiles{1}))		stimtype = 't10';	elseif findstr('h10',lower(selectfiles{1}))		stimtype = 'h10';	elseif findstr('g2',lower(selectfiles{1}))		stimtype = 'g2';	elseif findstr('l2',lower(selectfiles{1}))		stimtype = 'l210';	end		% data file	%period=findstr(file,'.');	%if isempty(period)==0,	%	file=file(1:period-1);	%end	%defarg('newfile',[file,'.freq']);	%defarg('newfolder',folder);	% tags in the data file	% trial = 1; sequence = 2; response = 3;	% correct = 4; stimlevel = 5; condition = 6;	% randnstate1 = 7; randnstate2 = 8;		freqstruct.diffstim = unique(data(:,sequence))';	numdiffstim = length(freqstruct.diffstim);	for j = 1:numdiffstim		imagelocs = find(data(:,sequence) == freqstruct.diffstim(j));		freqstruct.numcorrect(j) = sum(data(imagelocs,correct));		freqstruct.numshown(j) = length(imagelocs);			end	freqstruct.confusematrix = zeros(numdiffstim); 	for i =1:size(data,1)		freqstruct.confusematrix(data(i,sequence),data(i,response)) = freqstruct.confusematrix(data(i,sequence),data(i,response))+1;	end	%freqstruct.normconfusematrix = freqstruct.confusematrix./(freqstruct.numshown'*(ones(1,numdiffstim)))	freqstruct.pc = freqstruct.numcorrect./freqstruct.numshown;	% additional analysis for ideal observer	temp = selectfiles{1};	if strcmp(temp(1:5),'ideal')		[freqstruct.sortedconfuse,freqstruct.sortindex] = sort(freqstruct.confusematrix,2);	else		load idealconfuse;		eval(['freqstruct.idealconfuse = idealconfuse.',stimtype,';']);		[freqstruct.idealsortedconfuse,freqstruct.sortindex] = sort(freqstruct.idealconfuse,2);		freqstruct.sortedconfuse = sortbyindex(freqstruct.confusematrix,freqstruct.sortindex,2);		freqstruct.sortedratio = freqstruct.sortedconfuse./freqstruct.idealsortedconfuse;		figure; imshow(scale(imresize(freqstruct.sortedratio,30)));	end	else	freqstruct = [];endreturn;	