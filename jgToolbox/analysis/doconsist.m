function doconsist(selectfiles,folder,skipdlg,idealfitfun,idealparams,newfile,newfolder)% flag to suppress the promptsdefarg('skipdlg',0);defarg('folder',pwd);if ~skipdlg & ~nargin,	[selectfiles,folder] = selectfiles('*.dat','Select files to merge:');elseif ~iscell(selectfiles),	selectfiles = {selectfiles};endnumpsyits = 250;numconsistits = 500;	% prompt the user for parametersif ~skipdlg, 	resp=inputdlg({'Number of psychometric iterations:','Number of consistency interations:'},...				   'Set Parameters',1,{numpsyits,numconsistits});	if~isempty(resp),		numpsyits=str2num(resp{1});		numconsistits=str2num(resp{2});	else		return;	end		end% main loopif iscell(selectfiles),		% Ideal observer	if ~exist('idealfitfn','var')		idealfitfn = inline('params(1) + params(2).*exp(-params(3).*data) + params(4).*exp(-params(5).*data)','params','data');		idealparams = [0.3717 6.2423 0.0154 -48.6475 0.0585];		printstr('warning: using parameters meant only for 1-of-10 identification tasks.')	end		% fit the psychometric functions if only 1 file is chosen	dopsymet(selectfiles,folder,1,1,0,'s',numpsyits);		% switch to target folder	cd(folder);		data1 = [];	data2 = [];	for i = 1:size(selectfiles,2)					% find out if there are repititions		tempdata = readdata(selectfiles{i},folder);		minlocs = find(tempdata(:,trial)==1);		if length(minlocs) == 1 & ~exist('newresponse','var')			printstr('One or more files do not have repeated trials');			return;		end		if ~exist('newresponse','var'),			maxtrial = tempdata(end,trial);			maxlocs = find(tempdata(:,trial)==maxtrial);			data1 = [data1;tempdata(1:maxlocs(1),1:condition)];			data2 = [data2;tempdata(minlocs(2):end,1:condition)];		else			tempdata1 = tempdata(:,setdiff([1:size(tempdata,2)],newresponse));			tempdata2 = tempdata;			tempdata2(:,response) = tempdata2(:,newresponse);			tempdata2 = tempdata2(:,setdiff([1:size(tempdata2,2)],newresponse));			data1 = [data1;tempdata1];			data2 = [data2;tempdata2];		end				end		data = [data1;data2];	data(:,trial) = [1:size(data,1)/2,1:size(data,1)/2]';		% separate data	maxtrials = max(data(:,trial));	data1 = data(1:maxtrials,:);	data2 = data(maxtrials+1:end,:);	conds = unique(data1(:,condition));	pccorrect = [];	pcagreematrix = [];		pccorrectSE = [];						% e=sqrt(p*(1-p)/n);  standard error	pcagreeSEmatrix = [];		INCpcagreematrix = [];		CORpcagreematrix = [];			% compute pa, pc, pase, pcse, & ntrials for each condition 	for currcond = 1:length(conds)		condlocs = find(data1(:,condition)==conds(currcond));		conddata1 = data1(condlocs,:);		conddata2 = data2(condlocs,:);		levels = unique(conddata1(:,stimlevel));		levelsmatrix(:,currcond) = levels;		for currlevel = 1:length(levels)			levellocs = find(conddata1(:,stimlevel)==levels(currlevel));			leveldata1 = conddata1(levellocs,:);			leveldata2 = conddata2(levellocs,:);			ntrials(currlevel,currcond) = size(leveldata1,1)*2;			pccorrect(currlevel,currcond) = [((sum(leveldata1(:,correct))+sum(leveldata2(:,correct)))/(size(leveldata1,1)*2))*100];			pccorrectSE(currlevel,currcond) = sqrt(pccorrect(currlevel,currcond)*(100-pccorrect(currlevel,currcond))/(size(leveldata1,1)*2));			pcagreematrix(currlevel,currcond) = [(sum(leveldata1(:,response)==leveldata2(:,response))/size(leveldata1,1))*100];			pcagreeSEmatrix(currlevel,currcond) = sqrt(pcagreematrix(currlevel,currcond)*(100-pcagreematrix(currlevel,currcond))/size(leveldata1,1));			INClocs = find(leveldata1(:,correct)==0);				INCleveldata1 = leveldata1(INClocs,:);			INCleveldata2 = leveldata2(INClocs,:);						INCpcagreematrix(currlevel,currcond) = [(sum(INCleveldata1(:,response)==INCleveldata2(:,response))/size(INCleveldata1,1))*100];						CORlocs = find(leveldata1(:,correct)==1);				CORleveldata1 = leveldata1(CORlocs,:);			CORleveldata2 = leveldata2(CORlocs,:);			CORpcagreematrix(currlevel,currcond) = [(sum(CORleveldata1(:,response)==CORleveldata2(:,response))/size(CORleveldata1,1))*100];		end			% bootstrap		[fits] = consistboot([pcagreematrix(:,currcond),pccorrect(:,currcond),ntrials(:,currcond)],numconsistits,1);		fitslope(currcond) = fits.slopemean;		fitslopestd(currcond) = fits.slopestd;				end	% get i/e and confidence intervals from slope data	fitie = idealfitfn(idealparams,fitslope);	fitiestd = abs(idealfitfn(idealparams,fitslope+fitslopestd)-fitie);	% save data to file; append to threshold data file if present	if exist([rmextension(selectfiles{1}),'.psy'],'file'),		newfile = [rmextension(selectfiles{1}),'.psy'];		fwid = fopen([folder,newfile],'a+');	else		newfile = [rmextension(selectfiles{1}),'.cst'];		fwid = fopen([folder,newfile],'w+');	end	% save data	if newfile,		% save i/e ratio, slope means, slope std		savecomment(fwid,['# of itererations in consistency fits: ',num2str(numconsistits)]);		savecommand(fwid,vars2str(fitslope));		savecommand(fwid,vars2str(fitslopestd));		savecommand(fwid,vars2str(fitie));		savecommand(fwid,vars2str(fitiestd));		% save the raw data				savecommand(fwid,['cond = [',num2str(conds'),'];']);		commandstring = [];		counter = 1;		for i = 1:length(conds)			commandstring = [commandstring,'cond',num2str(i),'pc=',num2str(counter),';'];			counter = counter + 1;		end		for i = 1:length(conds)			commandstring = [commandstring,'cond',num2str(i),'pcSE=',num2str(counter),';'];			counter = counter + 1;		end		for i = 1:length(conds)			commandstring = [commandstring,'cond',num2str(i),'pa=',num2str(counter),';'];			counter = counter + 1;		end		for i = 1:length(conds)			commandstring = [commandstring,'cond',num2str(i),'paSE=',num2str(counter),';'];			counter = counter + 1;		end		for i = 1:length(conds)			commandstring = [commandstring,'cond',num2str(i),'trials=',num2str(counter),';'];			counter = counter + 1;		end			savecommand(fwid,commandstring);		finalmatrix = [pccorrect,pccorrectSE,pcagreematrix,pcagreeSEmatrix,ntrials];		for i = 1:size(finalmatrix,1)			fprintf(fwid,'%g\t',finalmatrix(i,:)); 			fprintf(fwid,'\n');		end		fclose(fwid);		% 		% add psychometric fit data to consistency data file% 		if exist([rmextension(selectfiles{1}),'.psy'],'file'),% 			mergefiles({[rmextension(selectfiles{1}),'.psy'],newfile},newfolder,[rmextension(selectfiles{1}),'.cst']);% 			del(newfile);% 		end	end			end