function dopsymetconsist(file,folder,showconds,pc,gam,delta,islog,plottitle,stimlabel,conditionlabel)% function = dopsymet(showconds,pc,gam,delta,islog,plottitle,stimlabel,conditionlabel)%% fit a psychometric function to data.% reads a data file that is of the format% expected by the function 'readdata'. some% of the variables referenced in the main program are% stored in the data file and put into the workspace upon% reading. They are:%% 	stimlevel: the stimulus levels%	correct:   the corresponding correct/incorrect booleans%	%   condition: the condition ( if multiple conditions are stored)%% other variables are also stored in the file, but% are given default values if not present. they are:%%	pc: 			percent correct threshold (default 75%)%   gam: 			guessing parameter for weibull fit (default .5)%	delta:			error parameter for weibull fit (default .01)%   initialalpha: 	threshold parameter for weibull fit%	initialbeta:	slope parameter for weibull fit%% a plot is made with error bars, fitted function, threshold % stimulus value, and the number of trials per stimulus level% the user is also given an option to save the fitted threshold% and paramters as comments and commands to the end of the data file.%% in cases where there are mutiple conditions (and the variable% 'condition' is stored in the data file), each condition is% plotted and a psychophysical function summarizes the thresholds% across conditions.%% September 18, 1998   JMG% set pathjg setp fred;% look for file and folder namesif ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');endif ~exist('folder','var')	folder = pwd;endif file		% the name of the x-axis	if findstr('samp',file)		if findstr('eff',file)			conditionlabel = 'Proportion of Most Informative Pixels';			stimlabel = 'Contrast Variance';		else			stimlabel = 'Proportion of Most Informative Pixels';		end	elseif findstr('sr',file)		conditionlabel = 'Noise Contrast Variance';		stimlabel = 'Signal Contrast Variance';	elseif findstr('unfilt',file) | findstr('fq',file)		stimlabel = 'Contrast Variance';	end		% deafults	defarg('pc',.5);	defarg('gam',.5);	defarg('delta',.01);	defarg('islog',1);	defarg('stimlabel','Stimulus Level');	defarg('plottitle',upper(file(1:findstr('.',file)-1)));	defarg('conditionlabel','Condition');	defbeta = 0.25;			% get data	data = readdata(file,folder);		% prompt the user for parameters 	resp=inputdlg({'Percent Correct: ','Gamma: ','Initial Beta'},'Set Parameters',1,{pc,gam,defbeta});	if isempty(resp)		return;	else		pc=str2num(resp{1});		gam=str2num(resp{2});		defbeta=str2num(resp{3});	end	% initialize	levelsmatrix =[];	pcmatrix = [];	wtmatrix = [];	ntrialsmatrix = [];		% the conditions		conditions = unique(data(:,condition));		numconditions = length(conditions);		defarg('showconds', [1:numconditions]);		showconds = sort(unique(showconds));				noisetypes=unique(data(:,nztype))	% new line for noise type		numnoises = length(noisetypes);		defarg('shownoises', [1:numnoises]);		shownoises = sort(unique(shownoises))				for i =1:length(showconds)			for kk=1:length(shownoises)				nt=noisetypes(shownoises(kk));				% Returns matrix with rows of form [ level proportion_correct ntrials stderr ]				locs = find( (data(:,condition)==conditions(showconds(i))) & (data(:,nztype)==nt));								% get the emprical function. pool under certain circumstances				if findstr('sr',file)					%empfn = emppsymet([data(locs,stimlevel),data(locs,correct)],1,1);					s1 = [data(locs,stimlevel),data(locs,correct)];					s2 = [data(locs,stimlevel),data(locs,newresponse)==data(locs,sequence)];					empfn = emppsymet([s1;s2],1,1);				else					s1 = [data(locs,stimlevel),data(locs,correct)];					s2 = [data(locs,stimlevel),data(locs,newresponse)==data(locs,sequence)];					empfn = emppsymet([s1;s2]);					%empfn = emppsymet([data(locs,stimlevel),data(locs,correct)]);				end							% get data for later				if nt==0					eval(['levelsmatrix.s',num2str(i),' = empfn(:,1)'';']);					eval(['ntrialsmatrix.s',num2str(i),' = empfn(:,3)'';']);					eval(['pcmatrix.s',num2str(i),' = empfn(:,2)'';']);					eval(['wtmatrix.s',num2str(i),' = empfn(:,4)'';']);					if exist('newresponse','var')						eval(['agreematrix(',num2str(i),') = sum(data(locs,newresponse)==data(locs,response))/length(locs);']);					end				else					eval(['levelsmatrixfixed.s',num2str(i),' = empfn(:,1)'';']);					eval(['ntrialsmatrixfixed.s',num2str(i),' = empfn(:,3)'';']);					eval(['pcmatrixfixed.s',num2str(i),' = empfn(:,2)'';']);					eval(['wtmatrixfixed.s',num2str(i),' = empfn(:,4)'';']);					if exist('newresponse','var')						eval(['agreematrixfixed(',num2str(i),') = sum(data(locs,newresponse)==data(locs,response))/length(locs);']);					end				end;						% initial params and defaults					if exist('initialalpha','var') & exist('initialbeta','var')					init = [initialalpha,initialbeta];				else					init = [empfn(round(size(empfn,1)/2),1) defbeta];				end					% fit and plot				warning off;				if nt==0					[alpha(i), beta(i)] = fitpsymet(empfn,'weibull',init,gam,delta);					figure; [handle,thresh(i)] = plotpsymet(empfn,'weibull',[alpha(i), beta(i)],[],pc,gam,delta,islog);					warning on;					% rename x-axis and put a title on graph					xlabel(stimlabel);					title([plottitle,'; ',conditionlabel,' = ',num2str(conditions(showconds(i))),', noisetype = different']);					drawnow;				else					[alphafixed(i), betafixed(i)] = fitpsymet(empfn,'weibull',init,gam,delta);					figure; [handle,threshfixed(i)] = plotpsymet(empfn,'weibull',[alphafixed(i), betafixed(i)],[],pc,gam,delta,islog);					warning on;					% rename x-axis and put a title on graph					xlabel(stimlabel);					title([plottitle,'; ',conditionlabel,' = ',num2str(conditions(showconds(i))),', noisetype = fixed']);					drawnow;				end; % if nt==0								end;		end				% plot psychophysical function		handle = figure;		thresh		handle = loglog(conditions(showconds),thresh,'r*-',conditions(showconds),threshfixed,'g+-');		xlabel(conditionlabel);		ylabel(['Threshold ',stimlabel]);		title(plottitle);		tilefigs;		% plot percent agreement		handle = figure;		handle = semilogx(conditions(showconds),agreematrix,'r*-',conditions(showconds),agreematrixfixed,'g+-');		xlabel(conditionlabel);		ylabel(['Percent Agreement']);		title(plottitle);		tilefigs;				% save data to file.					period=findstr(file,'.');		if isempty(period)==0,			newfile=file(1:period-1);		else			newfile=file;		end		[newfile,newfolder] = uiputfile([newfile,'.psy'],'Save Results As');		if newfile			fwid = fopen([newfolder,newfile],'w+');			savedatetime(fwid);			savecomment(fwid,'Data: level; ntrials;  pc; stderr');			for i = 1:length(showconds)				for kk=1:length(shownoises)					nt=noisetypes(shownoises(kk));					if nt==0						eval(['currlevels = levelsmatrix.s',num2str(i),';']);						eval(['currtrials = ntrialsmatrix.s',num2str(i),';']);						eval(['currpc = pcmatrix.s',num2str(i),';']);						eval(['currwt = wtmatrix.s',num2str(i),';']);						savecommand(fwid,['levels',num2str(i),' = [',num2str(currlevels),'];']);						savecommand(fwid,['trials',num2str(i),' = [',num2str(currtrials),'];']);						savecommand(fwid,['pc',num2str(i),' = [',num2str(currpc),'];']);						savecommand(fwid,['wt',num2str(i),' = [',num2str(currwt),'];']);					else						eval(['currlevelsfixed = levelsmatrixfixed.s',num2str(i),';']);						eval(['currtrialsfixed = ntrialsmatrixfixed.s',num2str(i),';']);						eval(['currpcfixed = pcmatrixfixed.s',num2str(i),';']);						eval(['currwtfixed = wtmatrixfixed.s',num2str(i),';']);						savecommand(fwid,['levelsfixed',num2str(i),' = [',num2str(currlevelsfixed),'];']);						savecommand(fwid,['trialsfixed',num2str(i),' = [',num2str(currtrialsfixed),'];']);						savecommand(fwid,['pcfixed',num2str(i),' = [',num2str(currpcfixed),'];']);						savecommand(fwid,['wtfixed',num2str(i),' = [',num2str(currwtfixed),'];']);					end; % if nt==0				end; %for kk=1:length(shownoises)			end % for i = 1:length(showconds)			savecomment(fwid,['Fitted params and ',num2str(100*pc),'%% correct threshold.']);			savecommand(fwid,['threshpc = ',num2str(pc),';']);			savecommand(fwid,['conditions = [',num2str(conditions(showconds')'),'];'])			savecommand(fwid,['thresh = [',num2str(thresh),'];'])			savecommand(fwid,['fitalpha = [',num2str(alpha),'];'])			savecommand(fwid,['fitbeta = [',num2str(beta),'];'])			savecommand(fwid,['agree = [',num2str(agreematrix),'];'])			savecommand(fwid,['threshfixed = [',num2str(threshfixed),'];'])			savecommand(fwid,['fitalphafixed = [',num2str(alphafixed),'];'])			savecommand(fwid,['fitbetafixed = [',num2str(betafixed),'];'])			savecommand(fwid,['agreefixed = [',num2str(agreematrix),'];'])			fclose(fwid);			dat2igor(newfile,newfolder);			edit([newfolder,newfile]);			end	end% reset old pathjg setp odlpath;return