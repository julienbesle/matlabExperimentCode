function plotthreshrepnz(files,folder)defarg('folder',pwd);if ~nargin,	[files,folders] = selectmanyfiles('psy');endif iscell(files),	% first make 	% set up figure	stretch = 4;	figure;	mainaxis1=axes('position',[0.1,0.1,0.8,0.8]);	set(mainaxis1,'XScale','log');	set(mainaxis1,'YScale','log');	hold on;		% initialize variables holding information for legend	leg=putlegend;	% flag for sesion-wise data plot	sessionplot = 1;	sessionCondition = [];	sessionThresh = [];	sessionStd = [];	colorcounter = 0;	symbolcounter = 0;	for i = 1:length(files),						% get data		data = readdata(files{i},folders{i});		% for zero condition display in log space		% zeroval = min([min(pos0conditions(find(pos0conditions~=0))),min(pos180conditions(find(pos0conditions~=0))),min(neg0conditions(find(pos0conditions~=0))),min(pos0conditions(find(neg180conditions~=0)))]);		zeroval = min([diffintercept sameintercept]);		zeroval = zeroval/10;				% plot thresholds		tempdiffconditions = diffconditions;		if diffconditions(1) == 0,			 tempdiffconditions(1) = diffintercept/10;		end	 		colorcounter = colorcounter+1;		symbolcounter = symbolcounter+1;		e = errorbar(tempdiffconditions,diffthreshmean,diffthreshstd,[plotsymbol(symbolcounter),symbolcolor(colorcounter)]);							% figure legend		leg=putlegend(leg,e(2),[replacechar(files{i},'_','-'),' different noises']); 		% plot fits, if present		if exist('diffslope','var'),			fitdiffconditions = linspace(tempdiffconditions(1),tempdiffconditions(end),1000);			fitdiffdata = diffintercept + diffslope.*(fitdiffconditions);			f = loglog(fitdiffconditions,fitdiffdata,[symbolcolor(colorcounter),'-']);			alldiffslopes(i) = diffslope;			alldiffintercepts(i) = diffintercept/diffslope;			alldiffslopesstd(i) = diffslopestd;			alldiffinterceptsstd(i) = alldiffintercepts(i).*sqrt((diffinterceptstd./diffintercept)^2 + (diffslopestd./diffslope)^2);		end			% plot thresholds		tempsameconditions = sameconditions;		if sameconditions(1) == 0,			 tempsameconditions(1) = sameintercept/10;		end	 		colorcounter = colorcounter+1;		symbolcounter = symbolcounter+1;		e = errorbar(tempsameconditions,samethreshmean,samethreshstd,[plotsymbol(symbolcounter),symbolcolor(colorcounter)]);							% figure legend		leg=putlegend(leg,e(2),[replacechar(files{i},'_','-'),' same noises']); 		% plot fits, if present		if exist('sameslope','var'),			fitsameconditions = linspace(tempsameconditions(1),tempsameconditions(end),1000);			fitsamedata = sameintercept + sameslope.*(fitsameconditions);			f = loglog(fitsameconditions,fitsamedata,[symbolcolor(colorcounter),'-']);			allsameslopes(i) = sameslope;			allsameintercepts(i) = sameintercept/sameslope;			allsameslopesstd(i) = sameslopestd;			allsameinterceptsstd(i) = allsameintercepts(i).*sqrt((sameinterceptstd./sameintercept)^2 + (sameslopestd./sameslope)^2);		end				threshmax(i) = max([diffthreshmean,samethreshmean]);		threshmin(i) = min([diffthreshmean,samethreshmean]);						end	% alter x-axis to range of data	axis([tempdiffconditions(1)/stretch tempdiffconditions(end)*stretch min(threshmin)/stretch,max(threshmax)*stretch]);	% labels	warning off; 	putlegend(leg,2);	titlenamestring = files{1};	title([titlenamestring(1:3),' Thresholds']);	xlabel('Condition (NSD)');	ylabel('Threshold (Energy)');	warning on;		% consistency ?	if exist('samepa1','var'),		figure;		mainaxis1=axes('position',[0.1,0.1,0.8,0.8]);		hold on;				% initialize variables holding information for legend		leg=putlegend;		minpa = [];		maxpa = [];		minpc = [];		maxpc = [];		for i = 1:length(files),								% get data			data = readdata(files{i},folders{i});				% # of conditions			nconds = length(diffconditions);			for j = 1:nconds,				eval(['currdiffpa = diffpa',num2str(j),'.*100;']); 				eval(['currsamepa = samepa',num2str(j),'.*100;']); 				eval(['currdiffpc = diffpc',num2str(j),'.*100;']); 				eval(['currsamepc = samepc',num2str(j),'.*100;']); 				e = plot(currdiffpa,currdiffpc,[symbolcolor(i),plotsymbol(j)]);				leg=putlegend(leg,e,[replacechar(files{i},'_','-'),' different noises ',num2str(j)]);				e = plot(currsamepa,currsamepc,[symbolcolor(i+1),plotsymbol(j)]);				leg=putlegend(leg,e,[replacechar(files{i},'_','-'),' same noises ',num2str(j)]);				minpa = [minpa,min([currdiffpa,currsamepa])];				maxpa = [maxpa,max([currdiffpa,currsamepa])];				minpc = [minpc,min([currdiffpc,currsamepc])];				maxpc = [maxpc,max([currdiffpc,currsamepc])];			end				end			% alter x-axis to range of data		graphrange(min(minpa),max(maxpa),min(minpc),max(maxpc));			% labels		warning off;	 	putlegend(leg,2);		set(mainaxis1,'XScale','log');		set(mainaxis1,'YScale','linear');		titlenamestring = files{1};		title('Consistency plot');		xlabel('Percent Agreement');		ylabel('Percent Correct');		warning on;			end		% plot slopes and intercepts		figure;	mainaxis1=axes('position',[0.1,0.1,0.8,0.8]);	hold on;		% initialize variables holding information for legend	subplot(1,2,1);	hold on;	leg=putlegend;		% plot slopes	h = errorbar([1:length(alldiffslopes)],alldiffslopes,alldiffslopesstd,'k-*');				leg=putlegend(leg,h(2),[titlenamestring(1:3),' slopes: different noises']);	h = errorbar([1:length(allsameslopes)],allsameslopes,allsameslopesstd,'r-*');				leg=putlegend(leg,h(2),[titlenamestring(1:3),' slopes: same noises']);		% labels	warning off; 	putlegend(leg,2);	xlabel('Condition');	ylabel('Slope');	title([titlenamestring(1:3),' Slopes']);	% alter axies to range of data	axis([0 length(allsameslopes)+1 min([allsameslopes,alldiffslopes])/stretch max([allsameslopes,alldiffslopes])*stretch]);	set(gca,'YScale','log');	axis square;	warning on;				% initialize variables holding information for legend	subplot(1,2,2);	hold on;	h = errorbar([1:length(alldiffintercepts)],alldiffintercepts,alldiffinterceptsstd,'k-*');				h = errorbar([1:length(allsameintercepts)],allsameintercepts,allsameinterceptsstd,'r-*');				% labels	warning off; 	% putlegend(leg,2);	xlabel('Condition');	if exist('threshenegy','var'),				ylabel('X-intercept (Energy)');	else		ylabel('X-intercept');	end	title([titlenamestring(1:3),' X-intercepts']);	axis([0 length(alldiffintercepts)+1 min([alldiffintercepts,allsameintercepts])/stretch max([alldiffintercepts,allsameintercepts])*stretch']);	set(gca,'YScale','log');	axis normal;	warning on;			end