function [s,stol] = respclassmovie(tol,file,folder)% function [s,stol] = respclassmovie(tol,file,folder)%% computes response classification images based on Ahumada & Beard(1998).% defaultsjg feat;defarg('folder',pwd);defarg('tol',1.96);		%1.96if ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');endif isstr(tol)	tol = str2num(tol);endfiltbeforetol = 1;% main loopif file		% get the data	data = readdata(file,folder);	period=findstr(file,'.');	if isempty(period)==0,		file=[file(1:period-1),'src.mat'];	end	eval(['load ',file]);	frames = size(s1r1,3);		% the convolution kernal to be used later	kernal = [1 2 3 2 1];	kernal = kernal'*kernal;	% summed noise files s1r1 s1r2 s2r1 s2r2 are stored in 'src.mat' file	s1r1trials = sum(data(:,sequence)==1 & data(:,response)==1);	s1r2trials = sum(data(:,sequence)==1 & data(:,response)==2);	s2r1trials = sum(data(:,sequence)==2 & data(:,response)==1);	s2r2trials = sum(data(:,sequence)==2 & data(:,response)==2);	fprintf(1,['Total trials = ',num2str(size(data,1)),'.\n']);		% divide by # of trials	s1r1 = s1r1/s1r1trials;	s1r2 = s1r2/s1r2trials;	s2r1 = s2r1/s2r1trials;	s2r2 = s2r2/s2r2trials;	 	% filter the images	for i = 1:frames		fts1r1(:,:,i) = conv2(s1r1(:,:,i),kernal,'same');		fts1r2(:,:,i) = conv2(s1r2(:,:,i),kernal,'same');		fts2r1(:,:,i) = conv2(s2r1(:,:,i),kernal,'same');		fts2r2(:,:,i) = conv2(s2r2(:,:,i),kernal,'same');		corr12(:,:,i) = conv2(s1r2(:,:,i)-s1r1(:,:,i),kernal,'same');		corr21(:,:,i) = conv2(s2r2(:,:,i)-s2r1(:,:,i),kernal,'same');		class(:,:,i) = conv2(s1r2(:,:,i)-s1r1(:,:,i)+s2r2(:,:,i)-s2r1(:,:,i),kernal,'same');	end		s=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class);	% remove outliers based on [tol] number of std's	if tol		% find maximum value to keep in each image		s1r1maxval = tol*std(s1r1(:));		s1r2maxval = tol*std(s1r2(:));		s2r1maxval = tol*std(s2r1(:));		s2r2maxval = tol*std(s2r2(:));		locs = find(abs(s1r1)<s1r1maxval); s1r1(locs) = zeros(size(locs));		locs = find(abs(s1r2)<s1r2maxval); s1r2(locs) = zeros(size(locs));		locs = find(abs(s2r1)<s2r1maxval); s2r1(locs) = zeros(size(locs));		locs = find(abs(s2r2)<s2r2maxval); s2r2(locs) = zeros(size(locs));		fts1r1maxval = tol*std(fts1r1(:));		fts1r2maxval = tol*std(fts1r2(:));		fts2r1maxval = tol*std(fts2r1(:));		fts2r2maxval = tol*std(fts2r2(:));		corr12maxval = tol*std(corr12(:));		corr21maxval = tol*std(corr21(:));		classmaxval = tol*std(class(:));				locs = find(abs(fts1r1)<fts1r1maxval); fts1r1(locs) = zeros(size(locs));		locs = find(abs(fts1r2)<fts1r2maxval); fts1r2(locs) = zeros(size(locs));		locs = find(abs(fts2r1)<fts2r1maxval); fts2r1(locs) = zeros(size(locs));		locs = find(abs(fts2r2)<fts2r2maxval); fts2r2(locs) = zeros(size(locs));		locs = find(abs(corr12)<corr12maxval); corr12(locs) = zeros(size(locs));		locs = find(abs(corr21)<corr21maxval); corr21(locs) = zeros(size(locs));		locs = find(abs(class)<classmaxval); class(locs) = zeros(size(locs));					stol=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class);			else		stol = [];	endendreturn