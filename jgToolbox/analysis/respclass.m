function [s,stol] = respclass(tol,smoothtype,file,folder)% function s = respclass(tol,file,smoothtype,folder)%% computes response classification images based on Ahumada & Beard(1998).% defaultsjg feat;defarg('folder',pwd);defarg('tol',1.96);		%1.96defarg('smoothtype','c');if ~exist('file','var');	[file,folder] = uigetfile('*.dat','Choose File');endif isstr(tol)	tol = str2num(tol);endfiltbeforetol = 1;lofreq = 1;hifreq = 2;% main loopif file		% get the data	data = readdata(file,folder);	period=findstr(file,'.');	if isempty(period)==0,		file=[file(1:period-1),'src.mat'];	end	cd(folder);	if exist(file,'file')		eval(['load ',file]);	else		[s1r1,s1r2,s2r1,s2r2] = avenoise(data,kansz,noisevar,sequence,response,randnstate1,randnstate2);	end		thefilt = fftunshift(makegaussfilt(max(size(s1r1)),lofreq,hifreq,'L'));		% the convolution kernal to be used later	%kernal = [1 2 1];	%kernal = [1 2 3 4 3 2 1];	kernal = [1 2 3 2 1];	kernal = kernal'*kernal;	% summed noise files s1r1 s1r2 s2r1 s2r2 are stored in 'src.mat' file	s1r1trials = sum(data(:,sequence)==1 & data(:,response)==1);	s1r2trials = sum(data(:,sequence)==1 & data(:,response)==2);	s2r1trials = sum(data(:,sequence)==2 & data(:,response)==1);	s2r2trials = sum(data(:,sequence)==2 & data(:,response)==2);	fprintf(1,['Total trials = ',num2str(size(data,1)),'.\n']);		% divide by # of trials	s1r1 = s1r1/s1r1trials;	s1r2 = s1r2/s1r2trials;	s2r1 = s2r1/s2r1trials;	s2r2 = s2r2/s2r2trials;	% scale	 	s1r1 = scale(s1r1);	s1r2 = scale(s1r2);	s2r1 = scale(s2r1);	s2r2 = scale(s2r2);	% for lp filtering	if lower(smoothtype(1)) == 'f'		% make the low-pass filter		% filter the images		fts1r1 = real(ifft2(fft2(s1r1).*thefilt));		fts1r2 = real(ifft2(fft2(s1r2).*thefilt));		fts2r1 = real(ifft2(fft2(s2r1).*thefilt));		fts2r2 = real(ifft2(fft2(s2r2).*thefilt));		% make the correlation and classification images		corr12 = real(ifft2(fft2(s1r2-s1r1).*thefilt));		corr21 = real(ifft2(fft2(s2r2-s2r1).*thefilt));		class = real(ifft2(fft2(s1r2-s1r1+s2r2-s2r1).*thefilt));	% for convolution			else		% filter the images		fts1r1 = conv2(s1r1,kernal,'same');		fts1r2 = conv2(s1r2,kernal,'same');		fts2r1 = conv2(s2r1,kernal,'same');		fts2r2 = conv2(s2r2,kernal,'same');		% make the correlation and classification images		corr12 = conv2(s1r2-s1r1,kernal,'same');		corr21 = conv2(s2r2-s2r1,kernal,'same');		class = conv2(s1r2-s1r1+s2r2-s2r1,kernal,'same');	end						% show some figures	% the raw images	s1=figure;	hold on;	subplot (2,2,1), imshow(scale(s1r1));xlabel(['s=',image1name,'/r=',image1name]);title([num2str(s1r1trials),' trials']);	subplot (2,2,2), imshow(scale(s1r2));xlabel(['s=',image1name,'/r=',image2name]);title([num2str(s1r2trials),' trials']);	subplot (2,2,3), imshow(scale(s2r1));xlabel(['s=',image2name,'/r=',image1name]);title([num2str(s2r1trials),' trials']);	subplot (2,2,4), imshow(scale(s2r2));xlabel(['s=',image2name,'/r=',image2name]);title([num2str(s2r2trials),' trials']);	drawnow;		% the filtered raw images	s2=figure;	text(1,1,['Filltered Images (total trials = ',num2str(size(data,1)),')']);	hold on;	subplot (2,2,1), imshow(scale(fts1r1));xlabel(['s=',image1name,'/r=',image1name]);title([num2str(s1r1trials),' trials']);	subplot (2,2,2), imshow(scale(fts1r2));xlabel(['s=',image1name,'/r=',image2name]);title([num2str(s1r2trials),' trials']);	subplot (2,2,3), imshow(scale(fts2r1));xlabel(['s=',image2name,'/r=',image1name]);title([num2str(s2r1trials),' trials']);	subplot (2,2,4), imshow(scale(fts2r2));xlabel(['s=',image2name,'/r=',image2name]);title([num2str(s2r2trials),' trials']);	drawnow;		% the correlation and classification images	s3=figure;	text(1,1,['Filtered Correlation and Classification Images (total trials = ',num2str(size(data,1)),')']);	hold on;	subplot (2,2,1), imshow(scale(corr12));xlabel(['Correlation Image s',image1name,'r',image2name,'-s',image1name,'r',image1name]);	subplot (2,2,2), imshow(scale(corr21));xlabel(['Correlation Image s',image2name,'r',image2name,'-s',image2name,'r',image1name]);	subplot (2,2,3), imshow(scale(class));xlabel('Classification Image');	drawnow;		if findstr('kaniza',file)		% fmat = mkfatthinmat( n, radiusP, supportk, alpha, ringp, bglum, indcst, noisestd, control, realcontour, fixpt )		if strcmp(stimtype,'amodal')			ringp = .2;		else			ringp = 0;		end				kanizafat = scale(mkfatthinmat(kansz, induceRad, support,0,ringp, 1,-1,0,control,0,0));		varfat = std(kanizafat(:))^2;		kanizafat = kanizafat*sqrt(.0075/varfat);% 		kanizathin = scale(mkfatthinmat(kansz, induceRad, support, angledeg, 0, 1, -1,0,control,0,0));% 		varthin = std(kanizathin(:))^2;% 		kanizathin = kanizathin*sqrt(.0075/varthin);		kanizaclass1=figure;		% 		text(1,1,['Kaniza classification image with inducers.']);% 		hold on;% 		subplot (1,2,1),		imshow(scale(class)+kanizafat);% 		title('Fat');% 		subplot (1,2,2), imshow(scale(class)+kanizathin);title('thin');		drawnow;		s=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class,'kanizaclass',scale(class)+kanizafat);	elseif findstr('square',file)		% *n = [100];bglum = [0];rectthickP = [4];occsizeP = [33];gapsizeP = [33];maxdev = [10];		% *basesizeP = [63];pcoffset = [0.04];offsetP = [2];		occluders = mksimpleoccrectmat( n, bglum, ...		basesizeP+offsetP*3, basesizeP, rectthickP, 0, 0, bglum, ...		occsizeP, gapsizeP, -1 , 0);		varoccluders = std(occluders(:))^2;		occluders = occluders*sqrt(.0075/varoccluders);		squareclass1=figure;				imshow(scale(class)+occluders);		drawnow;		s=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class,'squareclass',scale(class)+occluders);		else				% stuff the images into a struct for return		s=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class);	end	% remove outliers based on [tol] number of std's	if tol		% find maximum value to keep in each image		s1r1maxval = tol*std(s1r1(:));		s1r2maxval = tol*std(s1r2(:));		s2r1maxval = tol*std(s2r1(:));		s2r2maxval = tol*std(s2r2(:));% 		locs = find(abs(s1r1)<s1r1maxval); s1r1(locs) = zeros(size(locs));% 		locs = find(abs(s1r2)<s1r2maxval); s1r2(locs) = zeros(size(locs));% 		locs = find(abs(s2r1)<s2r1maxval); s2r1(locs) = zeros(size(locs));% 		locs = find(abs(s2r2)<s2r2maxval); s2r2(locs) = zeros(size(locs));		locs = find(abs(s1r1)<s1r1maxval); s1r1(locs) = mean(s1r1(:));		locs = find(abs(s1r2)<s1r2maxval); s1r2(locs) = mean(s1r2(:));		locs = find(abs(s2r1)<s2r1maxval); s2r1(locs) = mean(s2r1(:));		locs = find(abs(s2r2)<s2r2maxval); s2r2(locs) = mean(s2r2(:));		if filtbeforetol			fts1r1maxval = tol*std(fts1r1(:));			fts1r2maxval = tol*std(fts1r2(:));			fts2r1maxval = tol*std(fts2r1(:));			fts2r2maxval = tol*std(fts2r2(:));			corr12maxval = tol*std(corr12(:));			corr21maxval = tol*std(corr21(:));			classmaxval = tol*std(class(:));		% 			locs = find(abs(fts1r1)<fts1r1maxval); fts1r1(locs) = zeros(size(locs));% 			locs = find(abs(fts1r2)<fts1r2maxval); fts1r2(locs) = zeros(size(locs));% 			locs = find(abs(fts2r1)<fts2r1maxval); fts2r1(locs) = zeros(size(locs));% 			locs = find(abs(fts2r2)<fts2r2maxval); fts2r2(locs) = zeros(size(locs));% % 			locs = find(abs(corr12)<corr12maxval); corr12(locs) = zeros(size(locs));% 			locs = find(abs(corr21)<corr21maxval); corr21(locs) = zeros(size(locs));% 			locs = find(abs(class)<classmaxval); class(locs) = zeros(size(locs));			locs = find(abs(fts1r1)<fts1r1maxval); fts1r1(locs) = mean(fts1r1(:));			locs = find(abs(fts1r2)<fts1r2maxval); fts1r2(locs) = mean(fts1r2(:));			locs = find(abs(fts2r1)<fts2r1maxval); fts2r1(locs) = mean(fts2r1(:));			locs = find(abs(fts2r2)<fts2r2maxval); fts2r2(locs) = mean(fts2r2(:));			locs = find(abs(corr12)<corr12maxval); corr12(locs) = mean(corr12(:));			locs = find(abs(corr21)<corr21maxval); corr21(locs) = mean(corr21(:));			locs = find(abs(class)<classmaxval); class(locs) = mean(class(:));				% this is for filering after removing outliers.				else				% for lp filtering			if lower(smoothtype(1)) == 'f'					% make the low-pass filter				%thefilt = fftunshift(makegaussfilt(max(size(s1r1)),1,2,'L'));					% filter the images				fts1r1 = real(ifft2(fft2(s1r1).*thefilt));				fts1r2 = real(ifft2(fft2(s1r2).*thefilt));				fts2r1 = real(ifft2(fft2(s2r1).*thefilt));				fts2r2 = real(ifft2(fft2(s2r2).*thefilt));				% make the correlation and classification images				corr12 = real(ifft2(fft2(s1r2-s1r1).*thefilt));				corr21 = real(ifft2(fft2(s2r2-s2r1).*thefilt));				class = real(ifft2(fft2(s1r2-s1r1+s2r2-s2r1).*thefilt));			% for convolution					else				% filter the images				fts1r1 = conv2(s1r1,kernal,'same');				fts1r2 = conv2(s1r2,kernal,'same');				fts2r1 = conv2(s2r1,kernal,'same');				fts2r2 = conv2(s2r2,kernal,'same');				% make the correlation and classification images				corr12 = conv2(s1r2-s1r1,kernal,'same');				corr21 = conv2(s2r2-s2r1,kernal,'same');				class = conv2(s1r2-s1r1+s2r2-s2r1,kernal,'same');			end				end				% the raw images		s4=figure;		hold on;		subplot (2,2,1), imshow(scale(s1r1));xlabel(['s=',image1name,'/r=',image1name]);title([num2str(s1r1trials),' trials']);		subplot (2,2,2), imshow(scale(s1r2));xlabel(['s=',image1name,'/r=',image2name]);title([num2str(s1r2trials),' trials']);		subplot (2,2,3), imshow(scale(s2r1));xlabel(['s=',image2name,'/r=',image1name]);title([num2str(s2r1trials),' trials']);		subplot (2,2,4), imshow(scale(s2r2));xlabel(['s=',image2name,'/r=',image2name]);title([num2str(s2r2trials),' trials']);		drawnow;					% the filtered raw images		s5=figure;		hold on;		subplot (2,2,1), imshow(scale(fts1r1));xlabel(['s=',image1name,'/r=',image1name]);title([num2str(s1r1trials),' trials']);		subplot (2,2,2), imshow(scale(fts1r2));xlabel(['s=',image1name,'/r=',image2name]);title([num2str(s1r2trials),' trials']);		subplot (2,2,3), imshow(scale(fts2r1));xlabel(['s=',image2name,'/r=',image1name]);title([num2str(s2r1trials),' trials']);		subplot (2,2,4), imshow(scale(fts2r2));xlabel(['s=',image2name,'/r=',image2name]);title([num2str(s2r2trials),' trials']);		drawnow;			% the correlation and classification images		s6=figure;		hold on;		subplot (2,2,1), imshow(scale(corr12));xlabel(['Correlation Image s',image1name,'r',image2name,'-s',image1name,'r',image1name]);		subplot (2,2,2), imshow(scale(corr21));xlabel(['Correlation Image s',image2name,'r',image2name,'-s',image2name,'r',image1name]);		subplot (2,2,3), imshow(scale(class));xlabel('Classification Image');		drawnow;			if findstr('kaniza',file)			if strcmp(stimtype,'amodal')				ringp = .2;			else				ringp = 0;			end					kanizafat = scale(mkfatthinmat(kansz, induceRad, support, 0,ringp, 1,-1,0,control,0,0));			varfat = std(kanizafat(:))^2;			kanizafat = kanizafat*sqrt(.0025/varfat);% 			kanizathin = scale(mkfatthinmat(kansz, induceRad, support, angledeg, 0, 1, -1,0,control,0,0));% 			varthin = std(kanizathin(:))^2;% 			kanizathin = kanizathin*sqrt(.001/varthin);			kanizaclass2=figure;		% 			text(1,1,['Kaniza classification image with inducers.']);% 			hold on;% 			subplot (1,2,1), 			imshow(scale(class)+kanizafat);% 			title('Fat');% 			subplot (1,2,2), imshow(scale(class)+kanizathin);title('thin');			drawnow;			stol=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class,'kanizaclass',scale(class)+kanizafat);		elseif findstr('square',file)			% *n = [100];bglum = [0];rectthickP = [4];occsizeP = [33];gapsizeP = [33];maxdev = [10];			% *basesizeP = [63];pcoffset = [0.04];offsetP = [2];			occluders = mksimpleoccrectmat( n, bglum, ...			basesizeP+offsetP*3, basesizeP, rectthickP, 0, 0, bglum, ...			occsizeP, gapsizeP, -1 , 0);			varoccluders = std(occluders(:))^2;			occluders = occluders*sqrt(.0025/varoccluders);			squareclass2=figure;					imshow(scale(class)+occluders);			drawnow;			stol=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class,'squareclass',scale(class)+occluders);		else			% stuff the images into a struct for return			stol=struct('s1r1',s1r1,'s1r2',s1r2,'s2r1',s2r1,'s2r2',s2r2,'fts1r1',fts1r1,'fts1r2',fts1r2,'fts2r1',fts2r1,'fts2r2',fts2r2,'corr12',corr12,'corr21',corr21,'class',class);		end			else		stol = [];	end	period=findstr(file,'.');	file=file(1:period-4);	[newfile,newfolder] = uiputfile([file,'class.mat'],'Save File As');	if newfile				if findstr(file,'kaniza') | findstr(file,'square')			if findstr(file,'kaniza') 				smooth = s.kanizaclass;				tol = stol.kanizaclass;			elseif findstr(file,'square')				smooth = s.squareclass;				tol = stol.squareclass;			end							save([newfolder,newfile],'smooth','tol');		else			save([newfolder,newfile],'s','stol');		end		endendreturn