function phzmotion(name,maxtrials,mainscrs)% function phzmotion(name,maxtrials,mainscrs)%% finds threshold to use in the feature experiment% 'name' is the name the subject, in initials% default screen is 1. default number of trials is 1500.%% July 18-19 1998  JMG  U of Toronto Vision Labif nargin	% change directories to the main folder	cf;	jg feature;			% default trials	if nargin < 2		maxtrials = 2000;	else		maxtrials = str2num(maxtrials);	end	% default screen	if nargin < 3		mainscrs = 1;	else		mainscrs = str2num(mainscrs);	end		% constants	fileshareoff = 1;	calfile = 'c3po.ddf';	duration = .5;	key1 = abs('1');	key2 = abs('2');	nzvar = .1;	nzcn = sqrt(nzvar);	darktime = 120;	vd = 100;	fixationcolor = 130;	basefixation = ones(2)*120;	%randfixation = ones(4)*120;	filename = [name,'phzmotion.dat'];	sourcename = [name,'phzmotionsrc'];	pausetrials = maxtrials/4;		% params for motion stimulus	sz = 64;	cpd = 4;	screensz = [23 17];	res = [640  480];	gaborszcm = pix2cm(sz,screensz,res);	cpi = cpd2cpi(cpd,gaborszcm,vd);	sddeg = cpd/4;	sdpix =  round(cm2pix(vd*tan(deg2rad(sddeg)),screensz,res));	cpw = round(sdpix*cpi/sz);	cps = 6;	deg = 0;	svar = .1;	durationms = 200;	framert = 67;	image1name = 'left';	image2name = 'right';	image1 = mkphzmovie(durationms,framert,sz,cpi,cpw,cps,deg,svar);	image2 = flipdim(image1,3);			% parameters for quest	guess = 1e-2;	guesssd = 5*guess;	pc = .75;	beta = 2.5;	delta = .01;	gamma = .5;	mulstep = 10^.01;	range = 10;	accuracy = 0;	id = 1; 			% make sounds	introsnd=makesnd(140,.2,.5);	corrsnd=makesnd(400,.09,.5);	wrongsnd=makesnd(200,.09,.5);	% open the screens	tempCLUT=ones(256,3)*160;	tempCLUT(2,:)=[190 190 190];	tempCLUT(256,:)=[190 190 190];	[screens,rects] = openscreens(mainscrs,tempCLUT);	[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);	% load the stimuli & calibration files	[newx,newy] = centertext(screens(1),rects(1,:),'Pause For Adaptation'); tic;	[cal1] = getddf(calfile);	hidecursor;		% open the off-screen windows	numwindows = size(image1,3)+1;	offscrptrs=zeros(numwindows,1);	for i=1:numwindows		offscrPtrs(i)=SCREEN(mainscrs,'OpenOffscreenWindow',0);	end	% open the data file and write the header	if exist(filename) ~= 2		fwid = fopen(filename,'a+');					savecomment(fwid,['Data File Name: ',filename]);		savecomment(fwid,'phase motion experiment');		savecomment(fwid,['calibration file: ',calfile]);		savecommand(fwid,vars2str(durationms,framert,cpi,cpw,cps,deg,svar));		savecommand(fwid,['viewingdistance = ',num2str(vd),'; resolution = [',num2str(rects(1,3)),',',num2str(rects(4)),'];']);		savecommand(fwid,['duration = ',num2str(duration),'; darktime = ',num2str(darktime),'; noisevar = ',num2str(nzvar),';']);		savecommand(fwid,['pc=',num2str(pc),'; initialalpha = ',num2str(guess),'; initialbeta = ',num2str(beta),'; gam = ',num2str(gamma),';']);		savecommand(fwid,['delta = ',num2str(delta),'; mulstep = ',num2str(mulstep),'; quitSD = ',num2str(accuracy),'; initialSD = ',num2str(guesssd),';']);		savecommand(fwid,['image1name = ',quotestring(image1name),'; image2name = ',quotestring(image2name),';']);		savecommand(fwid,'image1id = 1; image2id = 2;');		savecommand(fwid,'trial = 1; sequence = 2; response = 3; correct = 4; stimlevel = 5; currsd = 6; randnstate1 = 7; randnstate2 = 8;');		savedatetime(fwid);	else		fwid = fopen(filename,'a+');		savedatetime(fwid);		eval(['load ',sourcename]);			end	% turn off filesharing	if fileshareoff		status=fs('Off');	end		% continue dark adptation	hidecursor;	done=toc;	togo=darktime-done;	passed=0;	start=GetSecs;	hit='9';	while getsecs-start < togo & abs(hit)~=48  	% zero key skips adaptation		if CharAvail			hit=getchar;		end	end		% keypress to continue	screen(screens(1),'FillRect',0);	flushevents('keyDown');	sound(introsnd);	hidecursor;	HCCLUT = [0:255]'*[1 1 1];	HCCLUT(1,:) = [160 160 160];	% 	presentimage = [image1*sqrt(.2/var1),zeros(size(image1,1),size(image1,2)/4),image2*sqrt(.2/var2)];% 	[presentimage,HCCLUT]=makeimage(presentimage,cal1,fixationcolor);% 	screen(screens(1),'SetClut',HCCLUT,0);% 	screen(screens(1),'PutImage',presentimage);% 	[newx,newy] = centertext(screens(1),rects(1,:),[image1name,' = 1           ',image2name,' = 2'],round(rects(1,4)*.15));	[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.9));	hit = getchar;	screen(screens(1),'FillRect',0);		% initialize	sequence = coinflip(maxtrials,.5)+1;	responses = sequence*0 + 1;	if ~exist('trialsrc','var')		trialsrc = mkpquest(guess,guesssd,pc,beta,delta,gamma,mulstep,range,accuracy,id);		s1r1 = zeros(size(image1));		s1r2 = s1r1;		s2r1 = s1r1;		s2r2 = s1r1;	end		% main loop	nz=zeros(size(image1));	for trial = 1:maxtrials  				% get the next stimulus level		[trialsrc,contrast,id] = gettrial(trialsrc);		% if criterion sd has been met break the loop				if isnan(contrast)			break;		end			% fixation		screen(screens(1),'SetClut',HCCLUT,0);		screen(screens(1),'PutImage',basefixation);				% make the image		randnstate = randn('state');		cluts = [];		for i = 1:numwindows-1			% clear the current window			screen(offscrPtrs(i),'FillRect',0);						eval(['currimage=image',num2str(sequence(trial)),'(:,:,i)*sqrt(contrast/svar);']);			nz(:,:,i)=cliprandn(size(currimage),2);			nz(:,:,i)=nz(:,:,i)*sqrt(nzvar/stdm(nz(:,:,i))^2);			[currimage,tempclut]=makeimage(currimage+nz(:,:,i),cal1);			cluts = [cluts,tempclut];			screen(offscrPtrs(i),'PutImage',currimage);					end			% dummy clut for last window (blank)		cluts = [cluts,tempclut];		% loop for showing the movie		loop = 	['for i = 1:length(offscrPtrs),',... 					'screen(screens(1),''SetClut'',cluts(:,(i-1)*3+1:i*3),0);',...					'screen(''CopyWindow'',offscrPtrs(i),screens(1));',...					'screen(screens(1),''WaitVBL'',1);',...				'end;'];					% see if user wants to pause		%key = pollpause(screens(1),'0',num2str(maxtrials-trial),500,.4);			% show the movie		screen(screens(1),'FillRect',0);		eval(loop);		screen(screens(1),'WaitVBL',1);		screen(screens(1),'FillRect',0);				% get the response		flushevents('keyDown');		resp = '9';		while abs(resp)~= key1 & abs(resp)~=key2 & ~isquitkey(resp)			resp = getchar;		end		if abs(resp)==key2			responses(trial) = 2;		elseif isquitkey(resp)			break;		end				% accuracy		correct=sequence(trial)==responses(trial);		if correct			sound(corrsnd);		else			sound(wrongsnd);		end			% save the data		eval(['s',num2str(sequence(trial)),'r',num2str(responses(trial)),'= s',num2str(sequence(trial)),'r',num2str(responses(trial)),'+nz;']);		currsd=questsd(trialsrc.q);		data=[trialsrc.trial,sequence(trial),responses(trial),correct,contrast,currsd,randnstate(1),randnstate(2)];		fprintf(fwid,'%g\t',data); 		fprintf(fwid,'\n');		% update trial source		trialsrc = telltrial(trialsrc,contrast,correct);				if ~rem(trial,pausetrials) & trial ~= maxtrials			screen(screens(1),'SetClut',HCCLUT,0);			[newx,newy] = centertext(screens(1),rects(1,:),['Take a break. Only ',num2str(maxtrials-trial),' trials to go.'],round(rects(1,4)*.25));			[newx,newy] = centertext(screens(1),rects(1,:),'Hit Any Key To Start',round(rects(1,4)*.75));			hit = getchar;			screen(screens(1),'FillRect',0);			waitsecs(1);			end			end	% close the screen.	sound(introsnd);	screen CloseAll;	% final threshold estimate	if isnan(trialsrc.final)		finalest=contrast;	else		finalest=trialsrc.final;	end	savecommand(fwid,['if exist(''finalest'',''var''), finalest = [finalest,',num2str(finalest),']; else, finalest = ',num2str(finalest),'; end']);	% save the trialsource	eval(['save ',sourcename,' trialsrc s1r1 s1r2 s2r1 s2r2']);		% close the file	fclose(fwid);		% turn on filesharing	%if fileshareoff	%	status=fs('On');	%end	else		printstr('Not enough input arguments.')endreturn