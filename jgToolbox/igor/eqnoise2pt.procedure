#pragma rtGlobals=1		// Use modern global access method.macro doallfits()					| load data file	loadwave /T/D/O		| get the file name, etc.	string initials session imagetype;	if (cmpstr(lowerstr(S_filename[0,4]),"ideal") == 0) 			initials = S_filename[0,4];		session = S_filename[5];	else		initials = S_filename[0,2];	       session = S_filename[3];	endif		if (cmpstr(S_filename[strlen(S_filename)-11,strlen(S_filename)-9],"rot") == 0)		initials = initials + "ROT";	endif		if (strsearch(S_filename,"L2",0) > -1)		imagetype = S_filename[strlen(S_filename)-9,strlen(S_filename)-6];		else 		imagetype = S_filename[strlen(S_filename)-8,strlen(S_filename)-6];		endif			print imagetype	wavestats conditions;	variable index numconds guessrt,imagesz;	numconds = V_npnts;	index = 1;	make /o/n=(numconds) thresh threshSE alpha beta alphaSE betaSE;	string pcstring contraststring trialstring wtstring	conditions = conditions/(1/degconstant[0]);		wavestats conditions;	make /o/n=1000 tempnsdfit;	tempnsdfit = conditions[0]/5+(p)*(5*conditions[v_npnts]-conditions[0]/5)/1000;	|tempnsdfit = 5*v_max*(p)/1000;	|tempnsdfit = tempnsdfit-tempnsdfit[0];		if (strsearch(S_filename,"G2",0) > -1)		imagetype = S_filename[strlen(S_filename)-7,strlen(S_filename)-6];			imagesz = 76;		guessrt = .5;	else		imagesz = 256;		guessrt = .1;	endif		| do the fits first	do		pcstring = "pc" + num2str(index);		contraststring = "levels" + num2str(index);		trialstring = "trials" + num2str(index);		wtstring = "wt" + num2str(index);		wavestats $contraststring;		make /o/n = (V_npnts) contrast pc trials		pc = $pcstring;		contrast = $contraststring;		trials = $trialstring;		doFit(guessrt);		alpha[index -1] = coeffs[1];		beta[index-1] = coeffs[2];		alphaSE[index-1] = coeffSE[1];		betaSE[index-1] = coeffSE[2];		thresh[index-1] =getweibthresh(coeffs,threshpc);		threshSE[index-1] = thresh[index-1]*sqrt((coeffSE[1]/coeffs[1])^2+(coeffSE[2]/coeffs[2])^2);		killWaves $pcstring $contraststring $trialstring $wtstring;		index+= 1;	while (index <numconds+1);		| the linear fit	if (cmpstr(lowerstr(S_filename[0,4]),"ideal") == 0) 			idealeqnoise(imagesz);	else		humaneqnoise(imagesz);	endif		|rename the variables	string coeffstring coeffSEstring threshstring threshSEstring	string alphastring alphaSEstring betastring betaSEstring	string threshEstring threshESEstring fitstring	string eqnoisestring eqnoiseSEstring calceffstring calceffSEstring	string idealstring idealSEstring sessionstring corrstring 	string conditionsstring nsdfitstring	coeffstring = initials + imagetype+"coeffs" + session;	coeffSEstring = initials + imagetype+"coeffSE" +session;	threshstring = initials+imagetype+"thresh"+session;	threshSEstring = initials+imagetype+"threshSE"+session;	alphastring = initials+imagetype+"alpha"+session;	alphaSEstring = initials+imagetype+"alphaSE"+session;	betastring = initials+imagetype+"beta"+session;	betaSEstring = initials+imagetype+"betaSE"+session;	threshEstring = initials+imagetype+"threshE"+session;	threshESEstring = initials+imagetype+"threshESE"+session;	fitstring = initials+imagetype+"fit"+session;	eqnoisestring = initials+imagetype+"eqnoise";	eqnoiseSEstring = initials+imagetype+"eqnoiseSE";	calceffstring = initials+imagetype+"calceff";	calceffSEstring = initials+imagetype+"calceffSE";	idealstring = "ideal"+imagetype+"coeffs1";	idealSEstring = "ideal"+imagetype+"coeffSE1";		sessionstring = initials+imagetype+"session";	corrstring = initials+imagetype+"corr";	conditionsstring = initials+imagetype+"NSD"+session;	nsdfitstring = initials+imagetype+"NSDfit"+session;		duplicate /o coeffs $coeffstring;	duplicate /o coeffSE $coeffSEstring	duplicate /o thresh $threshstring	duplicate /o threshSE $threshSEstring	duplicate /o alpha $alphastring	duplicate /o alphaSE $alphaSEstring	duplicate /o beta $betastring	duplicate /o betaSE $betaSEstring	duplicate /o threshE $threshEstring	duplicate /o threshESE $threshESEstring	duplicate /o fit $fitstring	duplicate /o conditions $conditionsstring	duplicate /o tempnsdfit $nsdfitstring		| compute efficiency	if (cmpstr(lowerstr(S_filename[0,4]),"ideal") != 0) 			if (exists(eqnoisestring)==0)			make /n=1 $eqnoisestring $eqnoiseSEstring $calceffstring $calceffSEstring $sessionstring $corrstring; 			$sessionstring[0] = str2num(session);			$corrstring[0] = corr[0];			$eqnoisestring[0] = coeffs[1];			$eqnoiseSEstring[0] = coeffSE[1];			$calceffstring[0] = ($idealstring[0]/coeffs[0])*100;			$calceffSEstring[0] = $calceffstring[0]*(sqrt( (coeffSE[0]/coeffs[0])^2+($idealSEstring[0]/$idealstring[0])^2));		else			InsertPoints (numpnts($eqnoisestring)),1, $eqnoisestring $eqnoiseSEstring $calceffstring $calceffSEstring $sessionstring $corrstring			$sessionstring[numpnts($eqnoisestring)-1] = str2num(session);			$corrstring[numpnts($eqnoisestring)-1] = corr[0];			$eqnoisestring[numpnts($eqnoisestring)-1] = coeffs[1];			$eqnoiseSEstring[numpnts($eqnoisestring)-1] = coeffSE[1];			$calceffstring[numpnts($eqnoisestring)-1] = ($idealstring[0]/coeffs[0])*100;			$calceffSEstring[numpnts($eqnoisestring)-1] = $calceffstring[str2num(session)]*(sqrt( (coeffSE[0]/coeffs[0])^2+($idealSEstring[0]/$idealstring[0])^2));		endif		killwaves corr	endif		|Kill unwanted waves	KillWaves  fitalpha,fitbeta,threshpc,trials,weight,mWeight	KillWaves  one_minus_pc,abbot_pc,adjusted_pc,pcfit	killwaves  thresh threshSE alpha alphaSE beta betaSE 			EndMacro;	 				function/d humanline(w,x)wave/d w;variable/d x;variable/d y, x1, x2;	x1 = w[0];	x2 = w[1];	y = x1*(x + x2);	return(y)end;function/d idealline(w,x)wave/d w;variable/d x;variable/d y;	y =w[0]*x ;	return(y)end;macro humaneqnoise(imagesz)	Variable imagesz=256	Prompt imagesz,"Image Size",popup,"256;76"	if (imagesz == 1)		imagez = 256;	elseif (imagesz == 2)		imagez = 76;	endif	duplicate /o thresh threshE threshESE wt tempfit	duplicate /o tempnsdfit fit 	threshE = thresh*256*256*degconstant;	threshESE = threshE*(threshSE/thresh);	|wt = 1/(threshE*.1);	wt = 1/threshESE;	make /o /n=2 coeffs coeffSE;	K0 = 300;	K1 = 1e-6;	CurveFit line threshE /X=conditions /W=wt /D=tempfit 	|CurveFit line threshE /X=conditions /D=fit 	coeffs[0] = w_coef[1];	coeffs[1] = w_coef[0]/w_coef[1];	coeffSE[0] = W_sigma[1];	coeffSE[1] = W_sigma[0]/w_coef[1];	fit = coeffs[0]*(tempnsdfit+coeffs[1]);	make /o/n=1 corr;	corr[0] = v_pr;	dowindow /f EvsNSD	killwaves tempfit w_coef wt w_sigma		EndMacromacro idealeqnoise(imagesz)	Variable imagesz=256	Prompt imagesz,"Image Size",popup,"256;76"	if (imagesz == 1)		imagez = 256;	elseif (imagesz == 2)		imagez = 76;	endif	duplicate /o thresh threshE threshESE wt tempfit	duplicate /o tempnsdfit fit 	threshE = thresh*256*256*degconstant;	threshESE = threshE*(threshSE/thresh);	|wt = 1/(threshE*.1);	wt = 1/threshESE;	make /o /n=2 coeffs coeffSE;	make /o/n=1 slope;	Funcfit idealline slope threshE /X=conditions /W=wt /D=tempfit	coeffs[0] = slope;	coeffs[1] = 0;	coeffSE[0] = w_sigma[0];	coeffSE[1] = 0;	killwaves slope;	fit = coeffs[0]*(tempnsdfit+coeffs[1]);	dowindow /f EvsNSD	killwaves tempfit  wt w_sigma		EndMacromacro doFit(guessing_Rate);variable/D guessing_Rate;variable dummy;silent 1;	make /o/n=3 coeffs coeffSE;	coeffs[0] = guessing_Rate;	wavestats/q contrast;	coeffs[1] = v_avg;		| this is for fits with lousy initial estimates	|coeffs[1] = 1e-5;	coeffs[2] = 1;	|duplicate/o contrast pc,pcFit,weight,mWeight,one_minus_pc,abbot_pc,adjusted_pc;	duplicate/o contrast pcFit,weight,mWeight,one_minus_pc,abbot_pc,adjusted_pc;	|pc = correct/trials;	adjusted_pc = AdjustPC(pc,trials,coeffs);	abbot_pc = AbbotsLaw(coeffs[0],adjusted_pc);	one_minus_pc = 1-adjusted_pc;	weight = adjusted_pc * one_minus_pc/trials;	dummy = AdjustWeight(weight);	mWeight = CalcMullerWeight(abbot_pc,MullerWeights);	weight *=  mWeight;	pcFit = pc;	Dowindow/f data_graph	wavestats/q pc;	if (guessing_Rate <= v_min)		SetAxis left guessing_Rate,1	else		SetAxis left v_min,1	endif;	wavestats/q contrast	SetAxis bottom v_min*0.75,v_max/0.75	FuncFit/H="100" Weibull coeffs pc /X=contrast /W=weight /D=pcFit;	CoeffSE = w_sigma;	wavestats/q contrast;	make /o/n=513 bigC bigW	bigC = 2*v_max*(p+1)/513;	bigW = Weibull(coeffs,bigC);	|DoWindow/F Coefficients;	|print "*** alpha = ",coeffs[1],"; beta = ",coeffs[2]," ***"	|beep;end;function/D Weibull(w,x)wave/D w;variable/D x;	return (1 - (1-w[0])*exp(- ((x/w[1])^w[2])) );end;function/D getweibthresh(w,pcthresh)wave/D w;variable/D pcthresh;	return (w[1]*((-1*ln( (1-pcthresh)/(1-w[0]) ))^(1/w[2])));end;function/d AbbotsLaw(minProb,x)variable/d minProb,x;variable/d prob;	prob = (x-minProb)/(1-minProb);	if (prob < 0.0)		prob = 0.0	endif;	if (prob > 1.0)		prob = 1.0	endif;	return (prob);end;function AdjustWeight(w)wave/d w;variable theEnd=numpnts(w),theIndex=0;	do		if (w[theIndex] != 0)			w[theIndex] = 1/w[theIndex]		else			w[theIndex] = 1;		endif;		theIndex += 1;	while (theIndex < theEnd);	return (0);end;function AdjustPC(prob,trials,w)variable prob,trials;wave/d w;variable delta;	if (prob== 1)		delta = 1/(2*trials);		prob =1 - delta;	endif;	if (prob< w[0])		delta = 1/(2*trials);		prob =w[0] + delta;	endif;	return (prob);end;function CalcMullerWeight(prob,mw)variable prob;wave/d mwvariable output;	if (prob > 0.5)		prob = abs(1 - prob);	endif;	if (prob > 0.5)		prob = 0.5	endif;	if (prob < 0.01)		output = 0.0	else		output = mw(prob);	endif;	return (output);end;macro dopcpafit(wvpc)	String wvpc	Prompt wvpc,"choose PC wave to fit",popup,WaveList("*",";","")	";_none_"	|the names of the waves to store the data in	String wvpa wvpcSE wvpcfit wvpccoeffs wvpccoeffSE	if  (cmpstr(wvpc[0,3],"ideal") == 0)		wvpa = wvpc[0,strlen(wvpc)-2]+"pa";	else		wvpa = wvpc[0,strlen(wvpc)-3]+"pa";	endif		print wvpa	wvpcSE = wvpc+"SE";	wvpcfit = wvpc+"fit";	wvpccoeffs = wvpc+"coeffs";	wvpccoeffSE = wvpc+"coeffSE";		make /o/n=1 $wvpccoeffs $wvpccoeffSE	duplicate /o $wvpa $wvpcfit	duplicate /o $wvpcSE wt	| set initial values	$wvpccoeffs[0] = .5;	$wvpccoeffs[1] = 1;	$wvpccoeffs[2] = .5;	|$wvpccoeffs[3] = .5;			| initialize	variable V_FitTol; 	variable V_FitMaxIters; | this forces igor to make many iterations	V_FitTol=0.00001 		V_FitMaxIters = 500;		| with weights	variable index=0	do		if (wt[index] == 0)			wt[index] = mean(wt,-inf,inf);		endif			index += 1;		while (index < (numpnts(wt)));	wt = 1/wt;		print wvpc	Funcfit linear $wvpccoeffs $wvpc /X=$wvpa /W=wt /D=$wvpcfit		$wvpccoeffSE = W_sigma;	edit $wvpccoeffs $wvpccoeffSE $wvpc $wvpcfit $wvpa	 killwaves W_sigma wt;	 end;function/D parabola(w,x)wave/D w;variable/D x;	return (w[0]*((x-w[1])^w[2]));end;function/D quick(w,x)wave/D w;variable/D x;	return (100-w[0]*exp(-1*((x-w[1])^w[2])));end;function/D logarithm(w,x)wave/D w;variable/D x;	return (w[0]*ln(x/w[1]));end;function/D hyptangent(w,x)wave/D w;variable/D x;	return (w[0] + w[1]*tanh(x));end;function/D linear(w,x)wave/D w;variable/D x;	return (w[0]*log(x/100) + 100);end;Proc EvsNSD() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode[0]=3	ModifyGraph/Z marker=19	ModifyGraph/Z rgb=(0,0,0)	ModifyGraph/Z msize[0]=3,msize[1]=4	ModifyGraph/Z opaque=1	ModifyGraph/Z log=1	ModifyGraph/Z tick=2	ModifyGraph/Z mirror=2	ModifyGraph/Z logLabel(left)=2	ModifyGraph/Z lblMargin(left)=11,lblMargin(bottom)=12	ModifyGraph/Z axOffset(left)=1.5,axOffset(bottom)=1.4	ModifyGraph/Z lblLatPos(left)=-1,lblLatPos(bottom)=12	Label/Z left "\\F'Times'\\Z16Threshold Signal Energy \\f02E \\f00(deg\\S2\\M\\Z16) "	Label/Z bottom "\\F'Times'\\Z16Noise Spectral Density \\f02N \\f00(deg\\S2\\M\\Z16) "	SetAxis/Z left 0.001,0.1	SetAxis/Z bottom 1e-08,0.0001EndMacroWindow EvsNSDtemp() : Graph	PauseUpdate; Silent 1		| building window...	Preferences 1;	Display threshE vs conditions as "EvsNSD";	append fit vs tempnsdfit;	DelayUpdate;	ErrorBars threshE Y,wave=(threshESE,threshESE)	EvsNSDStyle();EndMacroWindow Coefficients() : Table	PauseUpdate; Silent 1		| building window...	Edit /W=(320,219,561,330) coeffs.y,coeffSE.y as "Coefficients"	Modify width(Point)=44EndMacroWindow Data_Graph() : Graph	PauseUpdate; Silent 1		| building window...	Display /W=(9,49,333,316) pc vs contrast as "Data Graph"	Append bigW vs bigC	Modify mode(pc)=3	Modify marker(pc)=19	Modify lSize(bigW)=1.25	Modify msize(pc)=4	Modify log(bottom)=1	Modify fSize=14	Label left "Percent Correct"	Label bottom "Contrast"	SetAxis left 0,1	SetAxis bottom 0.6375,1.66666666666667EndMacroWindow Data_Table() : Table	PauseUpdate; Silent 1		| building window...	|Edit /W=(405,70,702,209) contrast.y,correct.y,trials.y,pc.y as "Data Table"	|Edit /W=(405,70,702,209) contrast.y,trials.y,pc.y as "Data Table"	|Modify alignment(Point)=0,width(Point)=38	|Modify alignment(contrast.y)=1,width(contrast.y)=62	|Modify alignment(correct.y)=1,width(correct.y)=58	|Modify alignment(trials.y)=1,width(trials.y)=54	Modify width(pc.y)=62EndMacroWindow Muller_Weights() : Table	PauseUpdate; Silent 1		| building window...	Edit /W=(15,45,207,366) MullerWeights.y as "Muller Weights"	|Modify alignment(Point)=0,width(Point)=34	|Modify alignment(MullerWeights.y)=1EndMacroWindow All_Waves_Table() : Table	PauseUpdate; Silent 1		| building window...	|Edit /W=(416,91,719,230) contrast.y,correct.y,trials.y,pc.y as "All Waves"	Edit /W=(416,91,719,230) contrast.y,trials.y,pc.y as "All Waves"	Append abbot_pc.y,weight.y,mWeight.y,pcFit.y	|Modify alignment(Point)=0,width(Point)=38	|Modify alignment(contrast.y)=1,width(contrast.y)=62	|Modify alignment(correct.y)=1,width(correct.y)=58	|Modify alignment(trials.y)=1,width(trials.y)=54	Modify width(pc.y)=62EndMacroWindow Layout_0() : Layout	PauseUpdate; Silent 1		| building window...	Layout /W=(119,86,514,518) Data_Table(165,540,441,660)/O=2,Coefficients(197,444,383,508)/O=2 as "Layout"	Append Data_Graph(121,98,482,386)/O=1	Textbox /N=TextBox_0/S=3/A=MC/X=0.363636/Y=44.9176 "\JCREBECCA (RA) -- NO MASK"	AppendText "Target = 90 deg; Target Contrast = 0.1"EndMacroProc EvsNSDStyle() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode[0]=3,mode[1]=3,mode[2]=3,mode[3]=3,mode[4]=3,mode[5]=3	ModifyGraph/Z marker[0]=19,marker[1]=8,marker[2]=16,marker[3]=17,marker[4]=18,marker[5]=15	ModifyGraph/Z marker[8]=8,marker[9]=16	ModifyGraph/Z rgb[0]=(0,0,0),rgb[1]=(0,0,0),rgb[2]=(0,0,0),rgb[3]=(0,0,0),rgb[4]=(0,0,0)	ModifyGraph/Z rgb[5]=(0,0,0),rgb[6]=(0,0,0),rgb[7]=(0,0,0),rgb[8]=(4369,4369,4369)	ModifyGraph/Z rgb[9]=(0,0,0),rgb[10]=(0,0,0),rgb[11]=(0,0,0)	ModifyGraph/Z msize[0]=4,msize[1]=4,msize[2]=4,msize[3]=4,msize[4]=4,msize[5]=4	ModifyGraph/Z opaque[0]=1,opaque[1]=1,opaque[2]=1,opaque[3]=1,opaque[4]=1,opaque[5]=1	ModifyGraph/Z opaque[8]=1,opaque[9]=1	ModifyGraph/Z log=1	ModifyGraph/Z tick=2	ModifyGraph/Z mirror=2	ModifyGraph/Z logLabel(left)=2	ModifyGraph/Z lblMargin(left)=11,lblMargin(bottom)=12	ModifyGraph/Z axOffset(left)=1.5,axOffset(bottom)=1.4	ModifyGraph/Z lblLatPos(left)=-1,lblLatPos(bottom)=12	Label/Z left "\\F'Times'\\Z16Threshold Signal Energy \\f02E \\f00(deg\\S2\\M\\Z16) "	Label/Z bottom "\\F'Times'\\Z16Noise Spectral Density \\f02N \\f00(deg\\S2\\M\\Z16) "	SetAxis/Z left 0.0001,0.1	SetAxis/Z bottom 1e-08,0.0001EndMacroProc TotalEFFStyle() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode[0]=4,mode[1]=4,mode[6]=4	ModifyGraph/Z marker[0]=8,marker[1]=17,marker[2]=16,marker[3]=18,marker[4]=15,marker[5]=23	ModifyGraph/Z marker[6]=19	ModifyGraph/Z lSize[2]=0,lSize[3]=0,lSize[4]=0,lSize[5]=0	ModifyGraph/Z rgb=(0,0,0)	ModifyGraph/Z opaque=1	ModifyGraph/Z log=1	ModifyGraph/Z tick(left)=2,tick(bottom)=3	ModifyGraph/Z mirror=2	ModifyGraph/Z noLabel(bottom)=2	ModifyGraph/Z lblMargin(left)=10,lblMargin(bottom)=12	ModifyGraph/Z axOffset(left)=2.28571,axOffset(bottom)=1.4	ModifyGraph/Z lblLatPos(left)=7,lblLatPos(bottom)=12	Label/Z bottom "\\F'Times'\\Z16Noise Spectral Density \\f02N \\f00(deg\\S2\\M\\Z16) "	SetAxis/Z left 0.005,5	SetAxis/Z bottom 1e-08,0.0001EndMacroProc CalcEffStyle() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode=4	ModifyGraph/Z marker[0]=8,marker[1]=16	ModifyGraph/Z rgb[0]=(4369,4369,4369),rgb[1]=(0,0,0)	ModifyGraph/Z msize=4	ModifyGraph/Z opaque=1	ModifyGraph/Z log(left)=1	ModifyGraph/Z tick(left)=2,tick(bottom)=3	ModifyGraph/Z mirror=2	ModifyGraph/Z font(left)="Times"	ModifyGraph/Z noLabel(bottom)=2	ModifyGraph/Z fSize(left)=14	ModifyGraph/Z lblMargin=12	ModifyGraph/Z axOffset(left)=1.5,axOffset(bottom)=1.4	ModifyGraph/Z lblLatPos(left)=5,lblLatPos(bottom)=12	ModifyGraph/Z ZisZ(bottom)=1	ModifyGraph/Z tickZap(bottom)={0,7}	Label/Z left "\\F'Times'\\Z16Calculation Efficiency (%) "	Label/Z bottom "\\F'Times'\\Z16Session"	SetAxis/Z left 0.1,11	SetAxis/Z bottom 0,7EndMacroProc EqNoiseStyle() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode=4	ModifyGraph/Z marker[0]=19,marker[1]=8,marker[2]=5,marker[3]=16	ModifyGraph/Z rgb[0]=(4369,4369,4369),rgb[1]=(0,0,0),rgb[2]=(0,0,0),rgb[3]=(0,0,0)	ModifyGraph/Z msize[0]=4,msize[1]=4	ModifyGraph/Z opaque=1	ModifyGraph/Z log(left)=1	ModifyGraph/Z tick=2	ModifyGraph/Z mirror=2	ModifyGraph/Z font(left)="Times"	ModifyGraph/Z minor(left)=1	ModifyGraph/Z fSize(left)=14	ModifyGraph/Z logLabel(left)=4	ModifyGraph/Z lblMargin(left)=14,lblMargin(bottom)=12	ModifyGraph/Z axOffset(left)=1.5,axOffset(bottom)=1.4	ModifyGraph/Z lblLatPos(left)=1,lblLatPos(bottom)=12	ModifyGraph/Z tickZap(bottom)={0,7}	ModifyGraph/Z tickEnab(left)={1e-07,INF}	Label/Z left "\\F'Times'\\Z16Equivalent Noise (deg\\S2\\M\\Z16) "	Label/Z bottom "\\F'Times'\\Z16Session"	SetAxis/Z left 1e-07,0.0001	SetAxis/Z bottom 0,7EndMacroProc BetaStyle() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode=4	ModifyGraph/Z marker[0]=19,marker[1]=16,marker[2]=17,marker[3]=18,marker[4]=15,marker[5]=14	ModifyGraph/Z rgb=(0,0,0)	ModifyGraph/Z msize=7	ModifyGraph/Z opaque=1	ModifyGraph/Z textMarker[0]={"1","Times",1,0,5,0.00,0.00},textMarker[1]={"2","Times",1,0,5,0.00,0.00}	ModifyGraph/Z textMarker[2]={"3","Times",1,0,5,0.00,0.00},textMarker[3]={"4","Times",1,0,5,0.00,0.00}	ModifyGraph/Z textMarker[4]={"5","Times",1,0,5,0.00,0.00},textMarker[5]={"6","Times",1,0,5,0.00,0.00}	ModifyGraph/Z textMarker[6]={"7","Times",1,0,5,0.00,0.00}	ModifyGraph/Z log=1	ModifyGraph/Z tick=2	ModifyGraph/Z mirror=2	ModifyGraph/Z logLabel(left)=2	ModifyGraph/Z lblMargin(left)=13,lblMargin(bottom)=8	ModifyGraph/Z axOffset(left)=1.5,axOffset(bottom)=1.33333	ModifyGraph/Z lblLatPos(left)=3,lblLatPos(bottom)=14	Label/Z left "\\F'Times'\\Z16Beta (Slope) "	Label/Z bottom "\\F'Times'\\Z16Noise Spectral Density \\f02N \\f00(deg\\S2\\M\\Z16) "	SetAxis/Z left 0.15,5	SetAxis/Z bottom 1e-08,0.0001EndMacroWindow jmgGaborEvsNSD() : Graph	PauseUpdate; Silent 1		| building window...	Display /W=(394,173,789,491) jmgG2threshE1 vs jmgG2NSD1 as "jmgGaborEvsNSD"	Append jmgG2fit1 vs jmgG2NSDfit1	ModifyGraph mode(jmgG2threshE1)=3	ModifyGraph marker=19	ModifyGraph rgb=(0,0,0)	ModifyGraph msize(jmgG2threshE1)=3,msize(jmgG2fit1)=4	ModifyGraph opaque=1	ModifyGraph log=1	ModifyGraph tick=2	ModifyGraph mirror=2	ModifyGraph logLabel(left)=2	ModifyGraph lblMargin(left)=11,lblMargin(bottom)=12	ModifyGraph axOffset(left)=1.5,axOffset(bottom)=1.4	ModifyGraph lblLatPos(left)=-1,lblLatPos(bottom)=12	Label left "\\F'Times'\\Z16Threshold Signal Energy \\f02E \\f00(deg\\S2\\M\\Z16) "	Label bottom "\\F'Times'\\Z16Noise Spectral Density \\f02N \\f00(deg\\S2\\M\\Z16) "	SetAxis left 0.001,0.1	SetAxis bottom 1e-08,0.0001	ErrorBars jmgG2threshE1 Y,wave=(jmgG2threshESE1,jmgG2threshESE1)EndMacroProc PCvsPAstyle() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode=3	ModifyGraph/Z marker[0]=19,marker[1]=8	ModifyGraph/Z rgb=(0,0,0)	ModifyGraph/Z msize=4	ModifyGraph/Z opaque=1	ModifyGraph/Z tick=2	ModifyGraph/Z mirror=2	ModifyGraph/Z lblMargin(left)=14,lblMargin(bottom)=13	ModifyGraph/Z axOffset(left)=1.5,axOffset(bottom)=1.4	ModifyGraph/Z lblLatPos(left)=12,lblLatPos(bottom)=1	Label/Z left "\\F'Times'\\Z16\\f01Percent Correct "	Label/Z bottom "\\F'Times'\\Z16\\f01Percent Agreement"	SetAxis/Z left 40,100	SetAxis/Z bottom -1,100EndMacromacro dorename()	Rename cond,mwfF10cond3; Rename cond1pc,mwfF10cond1pc3; ;DelayUpdate	Rename cond2pc,mwfF10cond2pc3; Rename cond1pcSE,mwfF10cond1pcSE3; ;DelayUpdate	Rename cond2pcSE,mwfF10cond2pcSE3; Rename cond1pa,mwfF10cond1pa3; ;DelayUpdate	Rename cond2pa,mwfF10cond2pa3; Rename cond1paSE,mwfF10cond1paSE3; ;DelayUpdate	Rename cond2paSE,mwfF10cond2paSE3;	endmacro Proc PCvsPAStyle10afc() : GraphStyle	PauseUpdate; Silent 1		| modifying window...	ModifyGraph/Z mode=3	ModifyGraph/Z marker[0]=19,marker[1]=5,marker[2]=17	ModifyGraph/Z rgb=(0,0,0)	ModifyGraph/Z msize=4	ModifyGraph/Z opaque=1	ModifyGraph/Z tick=2	ModifyGraph/Z mirror=2	ModifyGraph/Z lblMargin(left)=14,lblMargin(bottom)=13	ModifyGraph/Z axOffset(left)=1.5,axOffset(bottom)=1.4	ModifyGraph/Z lblLatPos(left)=12,lblLatPos(bottom)=1	Label/Z left "\\F'Times'\\Z16\\f01Percent Correct "	Label/Z bottom "\\F'Times'\\Z16\\f01Percent Agreement"	SetAxis/Z left 0,100	SetAxis/Z bottom 0,100EndMacro