% CenSurr parameters.  Center Surround Behavioural experimentexptname='CenSurr';	% the name of the experiment%% CHANGE THISif 0    scrinfo.calfile ='ubu_calrec_1280x1024x75.mat';% scrinfo.calfile ='newJane_1280_1024_85_adjusted.mat';disp('reading calibration file...');    calfitrec=pbReadCalibrationFile(scrinfo.calfile);scrinfo.rgbMat = calfitrec.caldata(:,1:3); % rgb matrixscrinfo.B = calfitrec.caldata(:,4); % array of bit-stealing numbersscrinfo.L = calfitrec.caldata(:,5); % array of luminance valuesscrinfo.number=1;    scrinfo.width=calfitrec.displaypixels(1);scrinfo.height=calfitrec.displaypixels(2);scrinfo.framerate=calfitrec.framerate;scrinfo.pixelsize=calfitrec.pixelsize;scrinfo.pixpercm=mean(calfitrec.displaypixels ./ calfitrec.displaycm);scrinfo.dcNumber = calfitrec.backgroundNumber;scrinfo.RGBgrey=pbBSindex2RGB(scrinfo.dcNumber);scrinfo.avgLum = pbBitStealing2Lum(calfitrec.backgroundNumber,scrinfo.L,scrinfo.B);scrinfo.maxLum = calfitrec.lmaxminave(1);% oldResolution   = Screen('Resolution', scrinfo.number, scrinfo.width, scrinfo.height, scrinfo.framerate);scrinfo.width = 1280;scrinfo.height= 1024;scrinfo.framerate = 75;scrinfo.pixpercm= mean([scrinfo.width scrinfo.height]./calfitrec.displaycm); %width of screen = 39 29 cm else    load('calfitrec.mat')    calfitrec;end% file & directory names namesdefarg('dataTEXTfolder',[exptname,'TEXTfiles']);	% N.B. make sure this folder exists within the folder containing 'orientationlab'!defarg('dataMATfolder',[exptname,'MATfiles']);		% N.B. make sure this folder exists within the folder containing 'orientationlab'!% defarg('maskMATfolder',[exptname,'masks']); %maybe useful% set the pathsdisp('setting path names...');mainfile = [mfilename,'.m'];eval(['mainpath=which(',QuoteString(mainfile),');']);mainpath = mainpath(1:end-length(mainfile));if(isunix==0)    textdatadir=[mainpath,dataTEXTfolder,':'];    matdatadir=[mainpath,dataMATfolder,':'];else    textdatadir=[mainpath,dataTEXTfolder,'/'];    matdatadir=[mainpath,dataMATfolder,'/'];end;cd(mainpath);% scalingexptdesign.viewingdistcm=114; % viewing distance in cm;exptdesign.pixpercm=scrinfo.pixpercm;  % obviously depends on resolution settings for this particular monitorexptdesign.degperpixel=(atan2(1,exptdesign.viewingdistcm)*180/pi)/exptdesign.pixpercm;%% CHECK CONDITIONS exptdesign.sizes = [1 3 9]; %diameter of each grating exptdesign.sfcpd = [1]; % sp. frequenciesexptdesign.contrasts = [0.90] ;  % contrastsff = 1;for ss = exptdesign.sizes    for sf = exptdesign.sfcpd        for cc = exptdesign.contrasts               exptdesign.conditions(ff,:) = [ss sf cc];                ff = ff+1;        end   endendexptdesign.numconds=size(exptdesign.conditions,1); % 2 * 2 * 3 = 12 conditionsexptdesign.stimorder=randperm(exptdesign.numconds); % these may get divided into two sessions. exptdesign.numsessions = 1; exptdesign.curBlock=0;  % exptdesign.stimduration=0.150; % stimulus duration (sec)exptdesign.fixPntOffset=0.5; % inter-trial duration (sec)exptdesign.intertrial=1.5; % inter-trial duration (sec)exptdesign.adaptseconds=60; % light adaptation time (sec) before 1st staircaseexptdesign.adaptreduction=0.33;% reduce adaptation time by this factor on 2nd and subsequent staircases%practiceexptdesign.numpracticetrials =8;exptdesign.practiceduration =1;%otherexptdesign.usefeedback=1;exptdesign.playintervalsounds=0; % if 1, then each stimulus interval is marked by a toneexptdesign.whichKeys=4; % use f=left, j = right% exptdesign.whichKeys=2; % use d=1, f=2, j=3, k=4% exptdesign.whichKeys=1; % use a=1, s=2, l=3, ;=4% exptdesign.whichKeys=0; % use 1=1, 2=2, 3=3, 4=4exptdesign.usespace=0; % use space bar to start each trial?% STIMULUS PARAMETERSstimparams.stimEccenDeg=0;stimparams.eccPixels=round(stimparams.stimEccenDeg/exptdesign.degperpixel); % stimulus distance from fixation point (in pixels)stimparams.sizedeg = exptdesign.conditions(exptdesign.stimorder, 1); % stimulus Diameters in degreesstimparams.sizepix = round(stimparams.sizedeg./exptdesign.degperpixel);  %sizes (D) of gratings in pixelsstimparams.sfcpd = exptdesign.conditions(exptdesign.stimorder, 2); % stim. spatial frequencies%%  CHANGE THISstimparams.size2SD = 4;  % approximate value from CenSurr2IFCstimparams.gaussSD = stimparams.sizepix./stimparams.size2SD;  % size of gaussian SD in pixels.  Will be reset in the Display code when size2SD changes.stimparams.angle = 0; % angles, in degrees, of stimuli (counter clockwise from horizontal)stimparams.sfcpp=stimparams.sfcpd*exptdesign.degperpixel; 			% stimulus sf in cy/pixelstimparams.phase=90;		% should be randomized on every trialstimparams.contrast=exptdesign.conditions(exptdesign.stimorder,3); % % stimparams.avgLum = 42; %rough value from Betts et al 2005stimparams.maxContrast = 1;stimparams.speeddps = 2; % degree drifting gratingstimparams.speedpps = round(stimparams.speeddps/exptdesign.degperpixel);% set up staircasesexptdesign.maxstimframes = 0.500*scrinfo.framerate; %1 secmaxtrials=50; maxreversals=25; %%%%%%%% 50,  staircase ends after maxtrials OR maxreversals is reachedminreversals=4; % won't compute average of reversals (for threshold) unless the staircase has at least this number of reversalslastnrevs=4; % compute threshold from last 4 reversalstakebreaktrial=601; % software will allow subject to take a break at the beginning of trial 601minlevel=1; % min number framesmaxlevel=exptdesign.maxstimframes;range=maxlevel-minlevel;stepsize=1; %steps of 1 framestimrange=linspace(minlevel,maxlevel,maxlevel/stepsize);% contraststepsize=stimrange(2)/stimrange(1); % staircase stepsize in log unitsfirststep=5; % moves 5 frames up or downsteparray=[3,1]; % subsequent step sizes (2/20, 1/20, of a log unit)switchafterRevnum=[3,6]; % change step size after reversals 3, & 6% we are going to use 2 inter-leaved staircases for each conditiondowncount=[2,4]; % one will follow the 2-down/1-up rule; other follows 4-down/1-up ruletg=round(0.25*scrinfo.framerate); % an initial guess for each conditionfor kk=1:exptdesign.numconds        for jj=1:length(downcount)            screc(kk,jj)=scInit(downcount(jj),stimrange,tg,maxtrials,maxreversals,firststep,steparray,switchafterRevnum);        end; % for jj end; % for kk