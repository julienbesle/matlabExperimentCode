function [theImage,rs]=pbnoise(nr,nc,cvar,vmin,vmax,exact,baseimage);%%	function [theImage,rs]=noise2d(nr,cvar,vmin,vmax,exact);%	nr == # of rows%	nc == # of cols%	cvar == contrast variance; the contrast variance of the noise should always equal cvar >>exactly<<%	vmin & vmax == min and max allowable values %	exact: if this is 1, then the nz variance is >>exactly<< cvar%	baseimage (OPTIONAL): added to noise; useful only if you want to check for outliers (ie, values beyond cmax & cmin) >>after<< adding the baseimage to the noise;%%	returns theImage, which is a nr x nc matrix, and rs, which is the seed for the random number generator%if (nargin~=6)&(nargin~=7)	error('pbnoise takes 6 or 7 input parameters!');end;if (vmax<=vmin)	error('vmax must be greater than vmin');end;rs=randn('state'); theImage=randn(nr,nc);if (exact==1)	tv=var(theImage(:));else	tv=1;end;theImage=theImage*sqrt(cvar/tv);	% theImage now has a variance of cvarif (nargin==7)	theImage=theImage+baseimage;end;% check for outliersalldone=0;while(alldone==0)	tmp=find((theImage<vmin)|(theImage>vmax));	alldone=(length(tmp)==0);		nv=randn(1,length(tmp));	if (length(tmp)>1)			tv=var(nv);		nv=nv*sqrt(cvar/tv);	% nv now has a variance of cvar	end;		theImage(tmp)=nv;	% insert new values into theImage	if (exact==1)		tv=var(theImage(:));		theImage=theImage*sqrt(cvar/tv);	% theImage now has a variance of cvar	end;end;return;