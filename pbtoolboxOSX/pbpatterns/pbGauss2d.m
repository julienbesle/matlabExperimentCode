function theImage=pbGauss2d(nr,bx,by,hoff,voff);%% theImage=pbGauss2d(nr,bx,by,hoff,voff);% Returns a gaussian blob.% nr: number of rows (assumes the matrix is square; default == 128)% b: parameter for gaussian's width (default == 1)% hoff & voff: horizontal and vertical offset of gaussian's center (defaults == zero)%% Pattern is written to a square 2D matrix with a coordinate system that goes from -0.5 to +0.5, with% location <0,0> corresponding to the center of the matrix. The center of the% matrix is location <p1,p2>, where p1 = round(nr/2)+1+voff and p2 = round(nr/2)+1+hoff.% The Gaussian is defined as Gauss(x) = exp(-pi*(x/(0.5*b))^2).% The parameter b specifies the width, in image units, between the points at which the gaussian% is 0.043. For example, if you want a gassian that drops to 0.043 at x values% that are ±0.5 image units from the image's center, then you should pass a b value of 1.%defarg('nr',128);defarg('bx',1);defarg('by',1);defarg('hoff',0);defarg('voff',0);nc=nr;bx=bx/2;	% we divide b by 2 because the matrix goes from -0.5 to +0.5, not -1 to +1by=by/2;if ((hoff==0) & (voff==0))	x=0:(nc-1);x=x./nc;x=x-0.5;	gx=exp(-pi*(x./bx).^2);	gy=exp(-pi*(x./by).^2);	temp=gy'*ones(1,nc);	temp2=ones(1,nc)'*gx;	theImage=temp.*temp2;else	x=0:(nc-1);x=x-hoff;x=x./nc;x=x-0.5;	gx=exp(-pi*(x./b).^2);	y=0:(nr-1);y=y-voff;y=y./nr;y=y-0.5;	gy=exp(-pi*(y./b).^2);	temp=gy'*ones(1,nc);	temp2=ones(1,nc)'*gx;	theImage=temp.*temp2;end;return;