function theImage=bpnoise1d(nr,cvar,o,lpc,hpc);%%	function theImage=bpnoise1d(nr,cvar,o,lpc,hpc);%	nr == # of rows%	cvar == contrast variance%	o == orientation in deg (0 deg==horizontal; 90 deg == vertical)%	lpc == low-pass cutoff frequency (c/image); must be greater than 1 and less than nr/2%	hpc == high-pass cutoff frequency (c/image); must be greater than lpc and less than nr/2%	returns theImage, which is a nr x nc matrix%if (nargin ~= 5)	disp('this function takes 5 input parameters!');	return;end;if (lpc<1)|(lpc>(nr/2))	disp('illegal low-pass cutoff frequency!');	return;end;if (hpc<lpc)|(hpc>(nr/2))	disp('illegal high-pass cutoff frequency!');	return;end;nc=nr;temp=randn(1,nc);ftemp=fftshift(fft(temp));amp=abs(ftemp); phz=angle(ftemp);dc=round(nr/2)+1;lp0=round(dc-lpc)+1;lp1=round(dc+lpc)-1;hp0=round(dc-hpc)-1;hp1=round(dc+hpc)+1;amp(1:hp0)=amp(1:hp0)*0;amp(hp1:nr)=amp(hp1:nr)*0;amp(lp0:lp1)=amp(lp0:lp1)*0;ftemp = amp.*exp(sqrt(-1)*phz);temp=real(ifft(fftshift(ftemp)));vtemp=var(temp);temp=temp*sqrt(cvar/vtemp);	% x now has a variance of cvarif (o==90.0)	theImage=ones(1,nc)'*temp;end;if (o==0.0)	theImage=temp'*ones(1,nc);end;if ((o~=90)&(o~=0))	theImage=temp'*ones(1,nc);	temp=imrotate(theImage,o);	[tr,tc]=size(temp);	trect=setrect(0,0,tc,tr);	irect=setrect(0,0,nc-1,nr-1);	irect=centerrect(irect,trect);	T=irect(recttop);	B=irect(rectbottom);	L=irect(rectleft);	R=irect(rectright);	theImage=temp(T:B,L:R);end;return;