function [dout,numNaN]=clipdata(data,criterion)%% function [dout,numNaN]=clipdata(data,criterion)%%	<data>		- data VECTOR (not a matrix)%	<criterion>	- proportion of data that is KEPT; if criterion is 0.95, then the lowest 2.5% and highest 2.5% are thrown out %if nargin<2	disp('Error in CLIPDATA! Must include data & criterion as input arguments.');	dout=NaN;	numNaN=NaN;	return;end;tmp=size(data);if (min(tmp)>1)	disp('Error in CLIPDATA! The data must be a vector, not a matrix.');	dout=NaN;	numNaN=NaN;	return;end;if (criterion<0) | (criterion>=1)	disp('Error in CLIPDATA! The criterion must be a scalar greater than or equal to zero and less than 1.0.');	dout=NaN;	numNaN=NaN;	return;end;locnan=find(isnan(data)==1); numNaN=length(locnan);tmp=find(isnan(data)==0);databuffer=zeros(1,length(tmp));databuffer=data(tmp);if (criterion==0)	dout=databuffer;else		[sortdout,locs]=sort(databuffer);	npnts=length(databuffer);	midpoint=round(npnts/2);	cutoff=round(npnts*(1-criterion)/2);	lowindex=ceil(midpoint-cutoff);	if (lowindex < 1)		lowindex=1;	end;	tmp=locs(1:lowindex);	nanvector=NaN*ones(1,length(tmp));	databuffer(tmp)=nanvector;	highindex=floor(midpoint+cutoff);	if (highindex>npnts)		highindex=npnts;	end;	tmp=locs(highindex:npnts);	nanvector=NaN*ones(1,length(tmp));	databuffer(tmp)=nanvector;	tmp=find(isnan(databuffer)==0);	dout=zeros(1,length(tmp));	dout=databuffer(tmp);end;return;