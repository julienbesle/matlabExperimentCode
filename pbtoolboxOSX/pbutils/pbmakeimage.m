function [theimage,clut] = makeimage(theimage,s,val)% function [theimage,clut] = makeimage(theimage,s,[val])%% makes a pixel image and corresponding clut for stimulus display.% expects the image to be expressed as contrast values.% the first entry in the CLUT corresponds to lave.%% S is a struct array made from a calibration file using% getddf.m. see getddf for details.%% optional third argument VAL reserves a second location in% the clut (location 1) for a pixel value set to VAL.% this is useful if a fixation point needs to remain on the% screen during stimulus display. if it is not passed, the entire% range is used for the clut.%% Parameters:% theimage		- 	the image to be converted, in contrast values% s				-	a structure containing the calibration data (see 'getddf')% val			-   a scalar that corresponds to the reserved value at clut index 1.%					VAL should be between 1 and 256.%% Fields within s:% 	calmatrix	- 	a look up table relating pixel values to luminance% 	pmaxminave	-	maximum, minimum, and average pixel values% 	lmaxminave	- 	maximum, minimum, and average luminance values% 	ABKG		- 	parameters of the fitting function used to make calmatrix%	cmax		-   maximum displayable contrast%% June 1996  JMG U of T Vision Lab% July 1998: JMG cleaned it up.% April 1999: JMG added VAL option% get fields from scalmatrix = s.calmatrix;P = s.pmaxminave;L = s.lmaxminave;ABKG = s.ABKG;% converts the contrast values into luminance values [ contrast = (lum-lave)/lave ][cmax,cmin] = maxmin(theimage);lmax = (cmax+1)*L(3);lmin = (cmin+1)*L(3);theimage = (theimage.*L(3))+L(3);					% find the corresponding values in the calibration matrix. NB: CLUT(1,1;3) = Laveclut = zeros(256,3);index=ones(256,1);if ABKG(3)~=0	Lum=linspace(lmin,lmax,256);	Lum(1)=L(3);	Lum1locs=find(Lum>=ABKG(1));	Lum2locs=find(Lum<ABKG(1));	index(Lum1locs)=round((1.0/ABKG(3))*(exp(log(Lum(Lum1locs)-ABKG(1))*(1.0/ABKG(4)))-ABKG(2)));	index(Lum2locs)=round(-ABKG(2)/ABKG(3));endindexinbetween = find(index>0 & index<length(calmatrix(:,1)));indexlezero= find(index<=0);indexgemax = find(index>=length(calmatrix(:,1)));clut(indexinbetween,1:3) = calmatrix(index(indexinbetween),1:3);clut(indexlezero,1:3) = zeros(length(indexlezero),3);clut(indexgemax,1:3) = ones(length(indexgemax),3)*255;% the reserved clut locationif exist('val','var')	clut(2,:) = ones(1,3)*val;	P(2) = P(2)+1;end	% convert the image to pixel valuesif lmax-lmin>0	slope = (P(1)-P(2))/(lmax-lmin);					intercept = P(1) - slope*lmax;						theimage = round(theimage.*slope + intercept);else	theimage = zeros(size(theimage));endreturn