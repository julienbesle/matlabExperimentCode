function outimage=bpimage1d(inimage,thefilter,showImage);%% function outimage=bpimage1d(inimage,thefilter,showImage)% bandpass filters matrix "inimage" and returns it as "outimage"% parameters:%		>> inimage: input image; must be a row vector%		>> thefilter: bandpass amplitude filter; the amplitude spectrum of inimage is%		   multiplied by thefilter; it, too, must be a row vector%		   N.B. inimage and thefilter must have the same dimensions%		>> showImage: if showImage is 1, the input, output, and filter will be%		   displayed in separate Matlab windows; default is zero (i.e, not shown)%if (nargin<3)	showImage=0;end;if (nargin<2)	disp('ERROR in BPIMAGE: need at least 2 input parameters');	outimage=[NaN];	return;end;dim1=size(inimage,1);dim2=size(inimage,2);if (dim1 ~= 1)	disp('ERROR in BPIMAGE: inimage must be a row vector');	outimage=NaN;	return;end;dim3=size(thefilter,1);dim4=size(thefilter,2);if (dim3 ~= 1)	disp('ERROR in BPIMAGE: thefilter must be a row vector');	outimage=NaN;	return;end;if (dim2 ~= dim4)	disp('ERROR in BPIMAGE: inimage & thefilter must be same size');	outimage=NaN;	return;end;ft=fftshift(fft(inimage));amp=abs(ft);phase=angle(ft);r=size(amp,1);c=size(amp,2);dc=round(c/2)+1;dcAmp=amp(1,dc);% thefilter=bpfilter(lowf,highf,dim);% temp=ofilter(orient1,orient2,dim);% thefilter=thefilter.*temp;amp = amp.*thefilter;ft = amp.*exp(sqrt(-1)*phase);outimage=real(ifft(fftshift(ft)));if (showImage ~= 0)	figure(1);plot(scale(thefilter));set(1,'Name','filter')	figure(2);plot(scale(inimage));set(2,'Name','input')	figure(3);plot(scale(outimage));set(3,'Name','output')end;return;