function screc=scInit(down,values,startvalue,maxtrials,maxrevs,firststep,steparray,switchafterRevnum);%%	function screc=scInit(down,values,startvalue,maxtrials,maxrevs);%	defarg('maxtrials',100);	defarg('maxrevs',12);	screc.type='staircase';	screc.up=1;	screc.down=down;	screc.correct=0;	screc.incorrect=0;	screc.curdirection=0;	% 1=up, -1=down, 0=neutral (i.e., start of staircase)	screc.trialcount=0;	screc.reversalcount=0;	screc.revpoints=0;	screc.appspec=0;		% applications can use this field to do whatever they want	tmp=abs(values-startvalue);	[y,index]=min(tmp);	screc.curvalue=values(index);	screc.curindex=index;	screc.values=values;	screc.trialdata=[0,0];	screc.maxtrials=maxtrials;	screc.maxrevs=maxrevs;        if (exist('firststep')==0)        firststep=1;    end;    if (exist('steparray')==0)        steparray=1;    end;    if (exist('switchafterRevnum')==0)        switchafterRevnum=0;    end;	% set up the staircase to use a step size of 1 (i.e., number in which "values" index is incremented/decremented)	% more complicated arrangements can be made by calling scInitStepSize% 	screc.curstepsize=1;	 % initial step size% 	screc.steps=1;% subsequent step sizes (i.e., number in which "values" index is incremented/decremented)% 	screc.startusingstep=0; % the reversals on which step size is changed; we've set it to zero, the step size won't be changed	screc.curstepsize=firststep;	 % initial step size	screc.steps=steparray;% subsequent step sizes (i.e., number in which "values" index is incremented/decremented)	screc.startusingstep=switchafterRevnum; % the reversals on which step size is changed; we've set it to zero, the step size won't be changedreturn;	