function screc=scInitStepSize(datarec,firststep,steparray,startusingstep);%%	function screc=scCalcStepSize(datarec,firststep,steparray,startusingstep);%% 	firststepsize:	initial step size	% 	steparray: 		subsequent step sizes% 	startusingsteps: the reversals on which step size is changed; must be same size as "steparray"%%	firstsetpsize and steparray must be non-negative%	startusingsteps must be greater than zero%%	All step sizes are given in terms of the number of indices in the "values" list attached to each staircase record.%	So, if you've set up your staircase to have list of values that differ by 0.1 log units, then a stepsize of 1 equal%	0.1 log unit, a stepsize of 2 is 0.2 log units, a stepsize of 3 is 0.3 log units, etc. The initial stepsize is given%	by parameter "firststepsize". After each reversal, the staircase will check to see if the current reversalcount%	equals one of the values in "startusingsteps". If a match is found, then the stepsize is changed to the corresponding%	value in "steparray". For example, if "firststepsize=4" "startusingsteps"=[2 4 8] and "steparray"= [3 2 1], then the%	staircase will start with a stepsize of 4, switch to using a steps size of 3 immediately AFTER reversal 2, a step size of 2%	immediately AFTER reveral 4, and a step size of 1 after reversal 8. It will continue to use this reversal until the%	staircase is terminated. N.B. The staircase may end before all stepsizes are used.%	if (datarec.type~='staircase')	disp(['ERROR in scInitStepSize: data record is not of type staircase']);	datarec=screc;	return;end;if (size(steparray)~=size(startusingstep))	disp(['ERROR in scInitStepSize: steparray and startusingstep must be same size']);	datarec=screc;	return;end;if (length(find(steparray<0))>0)	disp(['ERROR in scInitStepSize: steparray contains negative values']);	datarec=screc;	return;end;if (length(find(startusingstep<1))>0)	disp(['ERROR in scInitStepSize: startusingstep contains values less than 1']);	datarec=screc;	return;end;if (firststep<0)	disp(['ERROR in scInitStepSize: firststep is a negative value']);	datarec=screc;	return;end;	startusingstep=sort(startusingstep); % sort so that the reversal numbers are ascendingdatarec.curstepsize=firststep;datarec.startusingstep=startusingstep;datarec.steps=steparray;screc=datarec;return