% load nzstim;% amp=nzstim.amp;% phz=nzstim.phz;% % % dim=64;% % lowf=3; highf=6;% % otarget=[-10,10];% % nz=noise2d(dim,1,-100,100,0);% % amp=abs(fft2(nz));% % phz=angle(fft2(noise2d(dim,1,-100,100,0)));% % delta=12;% % targetfft=amp.*exp(i*phz); % combine random phase spectrum with amplitude spectrum% target=real(ifft2(targetfft));	% calculate the inverse FFT;% fq=bpfilter((lowf-1),(highf+1),dim);% of=ofilter(otarget(1),otarget(2),dim);% % filt=fq.*of;% % target=bpimage(target,filt,0);% distractor=imrotate(target,delta,'bilinear','crop');% spot=pbspot(round(dim/2),dim);% target=target.*spot;% distractor=distractor.*spot;% % figure(1);imshow(scale(target));% figure(2);imshow(scale(distractor));defarg('vd',57);		% viewing distance in cm; not used in current program except as a reminder to the experimenterdefarg('stimpix',64);	% size of stimulus in pixelsdefarg('odelta',12);	% orientation difference in degdefarg('lowf',3);defarg('highf',6);		% target contains 3-6 cy/imagedefarg('otarget',[-10,10]);		% target contains orientations from -10 to 10 deg (0 deg is horizontal)load nzstim;	% load set of amplitude and phase spectra of noise image (should be same dimensions as stimpix)amp=nzstim.amp; phz=nzstim.phz;targetfft=amp.*exp(i*phz); % combine amp & phase spectratarget=real(ifft2(targetfft));	% calculate the inverse FFT;fq=bpfilter((lowf-1),(highf+1),stimpix); of=ofilter(otarget(1),otarget(2),stimpix); filt=fq.*of; % construct 2D Fourier filtertarget=bpimage(target,filt,0);distractor=imrotate(target,odelta,'bilinear','crop');spot=pbspot(round(stimpix/2),stimpix);nzpattern.target=target.*spot; nzpattern.distractor=distractor.*spot; % vignette patterns with circular windowclear amp phz nzstim targetfft fq of filt spot target distractor; % clean up the mess