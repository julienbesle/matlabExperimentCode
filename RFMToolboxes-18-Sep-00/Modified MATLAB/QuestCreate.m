function q=QuestCreate(tGuess,tGuessSd,pThreshold,beta,delta,gamma,grain,range)% q=QuestCreate(tGuess,tGuessSd,pThreshold,beta,delta,gamma,[grain],[range])% Create a stuff bag q with all the information necessary to% measure threshold. Threshold "t" is measured on an abstract "intensity"% scale, which usually corresponds to log10 contrast.% % This file uses a Weibull psychometric function:% p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10.^(beta*(x2+xThreshold))));% where x represents log10 contrast relative to threshold. You could% easily create your own custom version of this file that used any% other psychometric function. All the other Quest functions simply use% the psychometric function stored in "q".% % tGuess is your prior threshold estimate.% tGuessSd is the standard deviation you assign to that guess.% pThreshold is your threshold criterion expressed as probability of %	response==1. An intensity offset is introduced into the psychometric %	function so that threshold (i.e. the midpoint of the table) yields %	pThreshold.% beta, delta, and gamma are the parameters of a Weibull psychometric function.% beta controls the steepness of the psychometric function. Typically 3.5.% delta is the fraction of trials on which the observer presses blindly. %	Typically 0.01.% gamma is the fraction of trials that will generate response 1 when %	intensity==-inf.% % See QuestCreate, QuestUpdate, QuestQuantile, QuestMean, QuestMode,% QuestSd, and QuestSimulate.%% Copyright (c) 1996-1997 Denis Pelli%% 6/8/96   dgp  Wrote it.% 6/11/96  dgp  Optimized the order of stuffing for faster unstuffing.% 11/10/96 dhb  Added warning about correctness after DGP told me.% 3/1/97   dgp  Fixed error in sign of xThreshold in formula for p2.% 3/1/97   dgp  Updated to use MATLAB 5 structs.% 3/3/97   dhb  Added missing semi-colon to first struct eval.% 3/5/97   dgp  Fixed sd: use exp instead of 10^.% 3/5/97   dgp  Added some explanation of the psychometric function.% 6/24/97   dgp  For simulations, now allow specification of grain and dim.% 30-Jul-98  RFM  Handles case where 'range' is not integral multiple of 'grain'.if nargin<6 | nargin>8	error('Usage: q=QuestCreate(tGuess,tGuessSd,pThreshold,beta,delta,gamma,[grain],[range])')endif nargin<7	grain=0.01;endif nargin<8	dim=1000;else	if range<=0		error('"range" must be greater than zero.')	end	%dim=range/grain;	% The previous line causes problems if 'range' is not an even 	% integral multiple of 'grain'.  The following line handles this case,	% ensuring that (dim/2)*grain>=range-log10(2), which in de-logified 	% units means that grain^(dim/2)>=range/2.	% 30-Jul-98 (RFM)	dim=2*ceil((range-log10(2))/grain);end% prepare all the arraysi=-dim/2:dim/2;x=i*grain;pdf=exp(-0.5*(x/tGuessSd).^2);pdf=pdf/sum(pdf);			% keep the pdf normalizedi2=-dim:dim;x2=i2*grain;p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10.^(beta*x2)));index=find(diff(p2)); 		% subset that is strictly monotonicxThreshold=interp1(p2(index),x2(index),pThreshold);p2=delta*gamma+(1-delta)*(1-(1-gamma)*exp(-10.^(beta*(x2+xThreshold))));s2=fliplr([1-p2;p2]);% Best quantileOrder depends only on min and max of psychometric function.% For 2-interval forced choice, if pL=0.5 and pH=1 then best quantileOrder=0.60% We write x*log(x+eps) in place of x*log(x) to get zero instead of NAN when x is zero.pL=p2(1);pH=p2(size(p2,2));pE=pH*log(pH+eps)-pL*log(pL+eps)+(1-pH+eps)*log(1-pH+eps)-(1-pL+eps)*log(1-pL+eps);pE=1/(1+exp(pE/(pL-pH)));quantileOrder=(pE-pL)/(pH-pL);if sscanf(version,'%f',1)<5	q=Stuff([],'tGuess',tGuess);	q=Stuff(q,'pdf',pdf);	q=Stuff(q,'i',i);	q=Stuff(q,'s2',s2);	q=Stuff(q,'grain',grain);	q=Stuff(q,'quantileOrder',quantileOrder);	q=Stuff(q,'x',x);	q=Stuff(q,'x2',x2);	q=Stuff(q,'p2',p2);	q=Stuff(q,'tGuessSd',tGuessSd);	q=Stuff(q,'pThreshold',pThreshold);	q=Stuff(q,'xThreshold',xThreshold);	q=Stuff(q,'beta',beta);	q=Stuff(q,'delta',delta);	q=Stuff(q,'gamma',gamma);	q=Stuff(q,'dim',dim);	returnelse	clear q;	eval('q.tGuess=tGuess;');	eval('q.pdf=pdf;')	eval('q.i=i;')	eval('q.s2=s2;')	eval('q.grain=grain;')	eval('q.quantileOrder=quantileOrder;')	eval('q.x=x;')	eval('q.x2=x2;')	eval('q.p2=p2;')	eval('q.tGuessSd=tGuessSd;')	eval('q.pThreshold=pThreshold;')	eval('q.xThreshold=xThreshold;')	eval('q.beta=beta;')	eval('q.delta=delta;')	eval('q.gamma=gamma;')	eval('q.dim=dim;')end