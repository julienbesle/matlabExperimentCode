function [ mat, ft ] = bpnoise2d( n, fmin, fmax, direct )% BPNOISE2D  Make a sample of 2D bandpass noise%% [ mat, ft ] = bpnoise2d( n, fmin, fmax, direct )% 01-Sep-99 -- created (RFM)defarg('direct',0);% make templateftemp=zeros(n);hn=floor(n/2);% outer limitrmax=round(fmax*(hn-1));c=circ2d(rmax);i1=(hn+1)-rmax;i2=(hn+1)+rmax;ftemp(i1:i2,i1:i2)=c;% inner limitif fmin>0,	rmin=round(fmin*(hn-1));	c=circ2d(rmin);	i1=(hn+1)-rmin;	i2=(hn+1)+rmin;	ftemp(i1:i2,i1:i2)=ftemp(i1:i2,i1:i2)-c;end% energy in templatee=sum(sum(ftemp.^2));% make noise using IFT of noise in Fourier domainif direct==0,	f1=ftemp(hn+1,(hn+2):end);	f=find(f1)';	fn=size(f,1);	f1(f)=randn(fn,1)+i*randn(fn,1);	f2=ftemp((hn+2):end,2:end);	f=find(f2);	fn=size(f,1);	f2(f)=randn(fn,1)+i*randn(fn,1);	ft=zeros(n);	ft(2:hn,2:end)=conj(flipud(fliplr(f2)));	ft(hn+1,2:hn)=conj(fliplr(f1));	ft(hn+1,hn+1)=sqrt(2)*randn;	ft(hn+1,hn+2:end)=f1;	ft(hn+2:end,2:end)=f2;	ft=ft*(n^2)/sqrt(2*e);		mat=real(ifft2(fftshift(ft)));% make noise by filtering a sampleelse	m=randn(n);	ft=fftshift(fft2(m));	ft=ft.*ftemp;	mat=real(ifft2(fftshift(ft)));endreturn