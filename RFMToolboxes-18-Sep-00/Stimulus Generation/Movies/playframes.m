function [pt,pi] = playframes( reel, framelist, ipf, priority, playview )% PLAYFRAMES  Copy movie frames to onscreen window%% [pt,pi] = playframes( reel, framelist, ipf, priority, playview )%     - <reel> is movie reel to play%     - <framelist> is list of frames to play%     - <ipf> is number of interrupts per frame (default=1)%     - <priority> is priority at which to play movie (default=-1)%     - <playview> is rectangle of destination window in which to play%       movie (default=centered)%% See also INITMOVIE, FILMMOVIE, PLAYMOVIE, FREEMOVIE.% 05-Mar-99 -- created (RFM)% set default argumentsdefarg('ipf',1);defarg('priority',-1);defarg('playview',reel.destView);% decide on background colourglobal sgBGColour;bg=notnull( sgBGColour, 0 );% resize frame list and ipf listframelist=framelist(:);framen=size(framelist,1);if prod(size(ipf))==1,	ipf=ipf*ones(framen,1);else	ipf=ipf(:);endif size(ipf,1)~=framen,	error('ipf list size does not match framelist size');end% flag whether to keep timekeeptime=(nargout>0);if keeptime & (priority>=2)	warning('Unable to time movies at priority two or greater');end% preload functions and preallocate variablesscreen('Windows');isnan(NaN);f=0;f0=0;ipf0=0;[t1,i1]=screen(reel.destID,'PeekVBL');[t2,i2]=screen(reel.destID,'PeekVBL');% code to play movieplaycode = [ ...' screen(reel.destID,''WaitVBL'',1); ' ...' [i1,t1]=screen(reel.destID,''PeekVBL''); ' ...' for f=1:framen, ' ...'	f0=framelist(f); ' ...'	ipf0=ipf(f); ' ...'	if isnan(f0), ' ...'		screen(reel.destID,''FillRect'',bg,playview); ' ...'	else ' ...'		screen(''CopyWindow'',reel.frameID(f0),reel.destID,reel.view,playview); ' ...'	end; ' ...'	screen(reel.destID,''WaitVBL'',ipf0); ' ...' end; ' ...' [i2,t2]=screen(reel.destID,''PeekVBL''); ' ];% play movierush(playcode,priority);% find time required to play movieif keeptime,	pt=t2-t1;	pi=i2-i1;endreturn