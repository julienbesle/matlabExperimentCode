function data = dfread( fname, sessflag, execflag )% DFREAD  Read data and execute commands embedded in a data file%% data = dfread( fname, sessflag, execflag )% 09-Oct-98 -- created; adapted from readdata.m (RFM)% 14-Dec-98 -- <sessflag> added (RFM)% 04-Feb-99 -- <execflag> added (RFM)% 15-Feb-99 -- data saved in .mat file% NOTE:  has not been idiot-proofed%        i.e., improperly formatted files will cause unpredictable errors% set default argumentsdefarg('sessflag',1);defarg('execflag',1);% see if file existstxtdir=dir(fname);if isempty(txtdir),	error(sprintf('Cannot find file ''%s''',fname));end% session-by-sessionif sessflag,	% see if .mat file exists	[path,partname,ext]=fileparts(fname);	matname=fullfile(path,[ partname '.mat' ]);	matdir=dir(matname);	if ~isempty(matdir) & (datenum(matdir.date)>datenum(txtdir.date)),		fprintf(1,'loading ''%s''\n',matname);		load(matname,'data');		return	end	s=0;	% read file line-by-line	fid = fopen(fname,'r');	while feof(fid)==0,			% read line		line=fgets(fid);				% non-null?		if size(line,2)>=1,			% comment?			if strncmp(line,'%',1),				if size(line,2)>=3,					% start-of-session tag?					if strncmp(line,'% +',3),						s=s+1;						data{s}.cmd='';						data{s}.lines=[];					% embedded command?					elseif strncmp(line,'% *',3),						data{s}.cmd=[ data{s}.cmd line(4:end-1) ];					end									end			% data line?			else				numline=str2num(line);				if ~isempty(numline),					data{s}.lines=[ data{s}.lines ; numline ];				end			end					end			end	fclose(fid);		% save as .mat file	save(matname,'data');% pool across sessionselse	% execute tagged commands	if execflag,		fid = fopen(fname,'r');		while feof(fid)==0,			line = fgets(fid);			if size(line,2)>=3,				if strncmp(line,'% *',3),					evalin('caller',line(4:end));				end			end		end		fclose(fid);	end	% try to load ascii data file;  return if empty 	% ( some files may contain only commands )	ok=1;	eval('load(fname,''-ascii'')','ok=0;');	if ~ok,		data=[];		return	end	% assign data to return argument	[ path name ]=fileparts(fname);	eval( sprintf('data=%s;',name) );endreturn