typedef struct {	int m,n;	double *pMat;	} Mat2D;typedef struct {	int m,n,p;	double *pMat;	} Mat3D;#define INIT2D( mat, m0, n0 ) \	(mat).m=(m0); (mat).n=(n0); (mat).pMat=(double*)mxCalloc((m0)*(n0),sizeof(double));#define WRAP2D( mat, matarr ) \	(mat).pMat=mxGetPr(matarr); (mat).m=mxGetM((matarr)); (mat).n=mxGetN((matarr));#define SET2D( mat, m0, n0, val ) *((mat).pMat+(m0)+(n0)*(mat.m))=(val);#define GET2D( mat, m0, n0 ) ( *((mat).pMat+(m0)+(n0)*(mat.m)) )#define FREE2D( mat ) mxFree((mat).pMat);#define INIT3D( mat, m0, n0, p0 ) \	(mat).m=(m0); (mat).n=(n0); (mat).p=(p0); (mat).pMat=(double*)mxCalloc((m0)*(n0)*(p0),sizeof(double));#define WRAP3D( mat, matarr, m0, n0, p0 ) \	(mat).pMat=mxGetPr((matarr)); (mat).m=(m0); (mat).n=(n0); (mat).p=(p0);#define SET3D( mat, m0, n0, p0, val ) *((mat).pMat+(m0)+(n0)*(mat.m)+(p0)*(mat.m)*(mat.n))=(val);#define GET3D( mat, m0, n0, p0 ) ( *((mat).pMat+(m0)+(n0)*(mat.m)+(p0)*(mat.m)*(mat.n)) )#define FREE3D( mat ) mxFree((mat).pMat);void Print2D( Mat2D *prMat );void Print3D( Mat3D *prMat );void Print2D( Mat2D *prMat ) {	int i,j;	char szStr[81];	for(i=0;i<prMat->m;i++) {		for(j=0;j<prMat->n;j++) {			sprintf(szStr,"%3.0f ",GET2D((*prMat),i,j));			mexPrintf(szStr);		}		mexPrintf("\n");	}	}void Print3D( Mat3D *prMat ) {	int i,j,k;	char szStr[81];	for(k=0;k<prMat->p;k++) {		sprintf(szStr,"frame %d\n",k);		mexPrintf(szStr);		for(i=0;i<prMat->m;i++) {			for(j=0;j<prMat->n;j++) {				sprintf(szStr,"%3.0f ",GET3D((*prMat),i,j,k));				mexPrintf(szStr);			}			mexPrintf("\n");		}	}	}