function [data,quitflag]=pmdisplay(cal,displayrate,duration,isiframes,spotdiampix,circdiampix,practicetrials,...		intertrial,adaptseconds,usespace,distanceFromFixPnt,targlocsdeg,randrangedeg,mainscrs,dm,mousefilename,mousedatadir);%% function [data,quitflag]=pmdisplay(cal,displayrate,duration,isiframes,spotdiampix,circdiampix,practicetrials,...% 		intertrial,adaptseconds,usespace,distanceFromFixPnt,targlocsdeg,randrangedeg,mainscrs,dm,mousefileID,mousedatadir);%clear hidecursor;% initialize the random number generatorrandn('state',sum(100*clock));curdir=cd; % get current directorytmpfilename='temporary_data'; % 'data' is stored after every trial in a mat file, just in case things go bad% % % set default values% defarg('cvar',0.2);% defarg('imagesizepix',512);% defarg('gaussb',1);% defarg('displayrate',75);% defarg('duration',0.1);% defarg('isidur',0.5);% defarg('intertrial',0.75);% defarg('phz',0);% defarg('deg',0);% defarg('usespace',0);% initialize output variablesquitflag=0;[nr,nc]=size(dm);tmp=zeros(nr,3);data=[dm,tmp];clear tmp;% These are the values for the response keys '1' or '2'.key1 = abs('1');key2 = abs('2');% This is the value for the space bar, which is used to start each trial.spacebar=32;deletekey=8;% convert stimulus duration from seconds to framesstimframes=round(displayrate*duration);% make sounds for feedback, etc. Just a sine wave burst.introsnd=makesnd(600,.2,.6);intervalsnd=makesnd(300,duration,.6);corrsnd=makesnd(900,.2,.6);wrongsnd=makesnd(200,.09,.7);% calculate the max and min contrasts for this displayL = cal.lmaxminave;cmax=(L(1)-L(3))/L(3);cmin=(L(2)-L(3))/L(3);fixrgb=210;	% the RGB value for the fixation pointfixLUT=1;	% the rgb value is stored in LUT index 1 (zero-based); for matlab, it is stored in array position #2dcLUT=0;	% the rgb value for DC is stored in LUT index 0% this makes an initial CLUT set to average luminance. In the calibration% routine, average luminance is arbitrarily chosen as the luminance % of the pixel combination [160 160 160]. you can change this easily.tempCLUT=ones(256,3)*160;% this just stuffs a low-luminance value in the clut for text display.% it will be overwritten later on.tempCLUT(2,:)=[1 1 1];% this is the screen upon which the image is to be displayed. defarg('mainscrs',0);% this opens brainard's screen function. it is a wrapper% around the original function that can set mutiple screens% at once and sets unused screens to zero luminance.[screens,rects] = openscreens(mainscrs,tempCLUT);fixpnt=setrect(0,0,8,8);fixpnt=CenterRect(fixpnt,rects(1,:));stimrect=setrect(0,0,spotdiampix,spotdiampix);destrect=CenterRect(stimrect,rects(1,:));boxrect=setrect(0,0,circdiampix,circdiampix);boxrect=CenterRect(boxrect,rects(1,:));% create the off-screen windowsnumwindows=3;offscrptrs=zeros(1,numwindows);offscrptrs(1)=screen(mainscrs,'OpenOffscreenWindow',0,stimrect);	% offscreen window for spotoffscrptrs(2)=screen(mainscrs,'OpenOffscreenWindow',0,stimrect);	% offscreen window for dc stimulusoffscrptrs(3)=screen(mainscrs,'OpenOffscreenWindow',0,stimrect);	% offscreen window for "reminder" stimulus% These values work for Big Blue's monitor... They are hardware dependent!!!% screen(screens(1),'Preference','WaitForVBLInterrupt',1);% screen(screens(1),'Preference','SetClutWaitVBL',1);% this is a wrapper around brainard's functions that allow you% change the text display attributes in one command.[oldfont,oldsz,oldstyle] = settext(screens(1),'Times',26,1);			sound(introsnd); % this makes an introductory soundflushevents('keyDown'); % this flushes any key presses before this point.% create a clut and load itdefaultCLUT=[0:255]'*[1 1 1];defaultCLUT(1,:)=[160,160,160]; % DC value in index 1defaultCLUT(2,:)=[fixrgb,fixrgb,fixrgb]; % value for the fixation point & textdefaultCLUT(3,:)=[1,1,1]; % value for the spot % ringscreen(screens(1),'SetClut',defaultCLUT,0);% create a DC clut which will be used to "erase" stimuli from screendcCLUT=160*ones(256,3);dcCLUT(2,:)=[fixrgb,fixrgb,fixrgb]; % value for the fixation point & textscreen(screens(1),'FillRect',0); % this fills the screen with clut index 0, which is [160 160 160]% light adapt% hidecursor; adaptpause(screens(1),rects(1,:),adaptseconds); showcursor(0); % shows an arrowpmpractice;if quitflag==1	closeall;	return;end;flushmouse;if (usespace)	[newx,newy] = centertext(screens(1),rects(1,:),'Click Fixation Point To Start Each Trial');else	[newx,newy] = centertext(screens(1),rects(1,:),'Click Mouse To Start Experiment');end;hit = getclicks; % this waits for a mouse clickscreen(screens(1),'SetClut',defaultCLUT,0); % load clutscreen(screens(1),'FillRect',0); % clear the screen with average luminancescreen(screens(1),'FillOval',1,fixpnt); % draw fixation pointdmsize=size(dm); totaltrials=dmsize(1);takebreaktrial=round(totaltrials/2);hidecursor;for curtrial=1:totaltrials%	if (curtrial==takebreaktrial)	if (curtrial==takebreaktrial)		takebreak(screens(1),rects(1,:));	end;		stime=getsecs;	curAngle=dm(curtrial,1)+dm(curtrial,2); % dm: col 1 is target direction; col 2 is random direction increment; col 3 is ISI; col 4 is radius	curRadius=dm(curtrial,4);	curISI=dm(curtrial,3);	% build the spot stimulus	% first, calculate the x,y coordinates	xoffset=round(curRadius*cos(deg2rad(curAngle)));	yoffset=round(curRadius*sin(deg2rad(curAngle)));	% next, build the stimulus rectangle	stimrect=setrect(0,0,spotdiampix,spotdiampix); % create stimulus rectangle	stimrect=CenterRect(stimrect,rects(1,:)); % center it in the display window	stimrect=OffsetRect(stimrect,xoffset,yoffset); % newRect = OffsetRect(oldRect,x,y)	% finally, calculate the end points of the line drawn to the stimulus	fixX=fixpnt(rectleft)+round(rectwidth(fixpnt)/2);	fixY=fixpnt(recttop)+round(rectheight(fixpnt)/2);	stimX=stimrect(rectleft)+round(rectwidth(stimrect)/2);	stimY=stimrect(recttop)+round(rectheight(stimrect)/2);	% DO ONE TRIAL...	snd('Open');	% open a channel for asynchronous sound output	gotime=stime+intertrial;	while (getsecs<gotime)	end;		if (usespace)		% center the mouse on the fixation point		theX=fixpnt(rectleft)+round(rectwidth(fixpnt)/2);		theY=fixpnt(recttop)+round(rectheight(fixpnt)/2);		while 1			SetMouse(theX,theY);			[checkX,checkY] = GetMouse;			if (checkX==theX) & (checkY==theY)				break;			end		end		flushmouse;		showcursor(0); % shows an arrow		screen(screens(1),'FillOval',1,fixpnt);		pkey=exptpause(screens(1),rects(1,:));		resp = '9';		gostarttrial=0;		flushevents('keyDown');		while (gostarttrial==0)			if (CharAvail)				resp = getchar;				if isquitkey(resp) 					quitflag=1;					closeall;					return;				end; % if isquitkey(resp)			end; % if (CharAvail)% 			if abs(resp)==spacebar% 				gostarttrial=1;% 			end;			[x,y,button] = GetMouse(screens(1));			if (button==1)				while(button==1)	% loop here until button is released					[x,y,button] = GetMouse(screens(1));				end;				dx=(x-fixpnt(RectLeft))*(x-fixpnt(RectLeft));				dy=(y-fixpnt(RectTop))*(y-fixpnt(RectTop));				d=sqrt(dx+dy);				if (d < distanceFromFixPnt)					gostarttrial=1;				end;			end; % if (button==1)		end % while (gostarttrial==0)		hidecursor;		waitsecs(0.25);	else		pkey=exptpause(screens(1),rects(1,:),'p',1);		if (~isempty(pkey)) & isquitkey(pkey)			quitflag=1;			return;		end;	end;% 	sound(introsnd);	snd('Play',introsnd,8192); % this begins an introductory sound & immediately returns control to program	screen(screens(1),'WaitBlanking');	screen(screens(1),'FillOval',0,fixpnt); % erase fixation point	screen(screens(1),'WaitBlanking',5);	screen(screens(1),'FillOval',1,fixpnt); % draw fixation point	screen(screens(1),'WaitBlanking',5);	screen(screens(1),'FillOval',0,fixpnt); % erase fixation point	screen(screens(1),'WaitBlanking',5);	screen(screens(1),'FillOval',1,fixpnt); % draw fixation point	waitsecs(0.5);	screen(screens(1),'DrawLine',2,fixX,fixY,stimX,stimY); % draw line	screen(screens(1),'FillOval',2,stimrect); % draw spot	screen(screens(1),'FillOval',1,fixpnt); % draw fixation point	waitsecs(duration);	screen(screens(1),'WaitBlanking');	screen(screens(1),'DrawLine',0,fixX,fixY,stimX,stimY); % erase line	screen(screens(1),'FillOval',0,stimrect); % erase spot	screen(screens(1),'FillOval',1,fixpnt); % draw fixation point	screen(screens(1),'WaitBlanking',curISI); % wait for isi duration% 	screen(screens(1),'FillOval',0,fixpnt); % erase fixation point	screen(screens(1),'FrameOval',2,boxrect); % draw circle	% do mouse stuff here	nr=round(displayrate*10); % ten seconds worth of data 	mdata=zeros(nr,7);	% curtrial,elapsed_time, x, y, distance, angle, button		% center the mouse on the fixation point	theX=fixpnt(rectleft)+round(rectwidth(fixpnt)/2);	theY=fixpnt(recttop)+round(rectheight(fixpnt)/2);	while 1		SetMouse(theX,theY);		[checkX,checkY] = GetMouse;		if (checkX==theX) & (checkY==theY)			break;		end	end% 	sound(corrsnd); % this makes a higher-pitch sound	snd('Play',corrsnd,8192); % this begins a higher-pitch sound & immediately returns control to program	flushmouse;%	disp('showing cursor...');	showcursor(2); % shows a plus sign (+) 	button=0;	cf=1;	time0=clock;	while (cf<=nr)		screen(screens(1),'WaitBlanking'); % wait one frame		[x,y,button] = getmouse(screens(1));		x=x-theX;		y=y-theY;		d=sqrt(x*x+y*y);		theta=mod((atan2(y,x)*180/pi),360);		curtime=etime(clock,time0);		mdata(cf,:)=[curtrial,curtime,x,y,d,theta,button];		if (button==1)&(abs((circdiampix/2)-d)<12)			break;		end;		cf=cf+1;	end; % while (cf<=nr)	if (button==0)		while (1)			screen(screens(1),'WaitBlanking'); % wait one frame			[x,y,button] = getmouse(screens(1));			x=x-theX;			y=y-theY;			d=sqrt(x*x+y*y);			theta=mod((atan2(y,x)*180/pi),360);			curtime=etime(clock,time0);			if (button==1)				break;			end;		end; % while (1)	end; % if (button==0)	waitsecs(1);	screen(screens(1),'FrameOval',0,boxrect); % erase circle	screen(screens(1),'FillOval',1,fixpnt); % draw fixation point	snd('Close'); % close the sound channel% END OF TRIAL... 	% save the data	% first extract the mouse location data	tmpindex=find(mdata(:,1)>0); mousedata=mdata(tmpindex,:); [tmptrials,tmp0]=size(mousedata);	% now append the mouse data to the end of a text file	cd(mousedatadir);	fid=fopen(mousefilename,'a');	for kk=1:tmptrials fprintf(fid,'%3i \t %6.3f \t %4i \t %4i \t %6.2f \t %6.2f \t %i\n',mousedata(kk,:)); end	fclose(fid);	cd(curdir);	% clean up mess...	clear tmpindex tmpdata tmptrials tmp0;		% now store the coordinates of the button press in the 'data' matrix... 	data(curtrial,:)=[dm(curtrial,:),theta,d,curtime];	% and save it in a temporary file...	save tmpfilename data;	%	disp('hiding cursor...');	hidecursor;end% close the screen and data file. this is a wrapper around brainard that closes % all of the active windows and any text data file that may have been% opened but not closed during the routine.sound(introsnd);closeall;return;